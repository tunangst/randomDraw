{"version":3,"sources":["codeBank/utilities.js","codeBank/mandalaDrawing/functionPool/_getDrawType.js","components/Nav.js","components/CodeInjector.js","components/DropDownMarkUp.js","components/Controls.js","components/MainDisplay.js","codeBank/boxDrawing/boxDrawingUtilities.js","codeBank/boxDrawing/singles/clone.js","codeBank/boxDrawing/specials/fullClone.js","codeBank/boxDrawing/singles/rotate.js","codeBank/boxDrawing/specials/fullRotate.js","codeBank/boxDrawing/singles/reflect.js","codeBank/boxDrawing/specials/fullReflect.js","codeBank/boxDrawing/specials/halfReflect.js","codeBank/boxDrawing/specials/noPattern.js","codeBank/boxDrawing/specials/specials.js","codeBank/boxDrawing/singles/singles.js","codeBank/boxDrawing/doubles/doubles.js","codeBank/boxDrawing/BoxDrawing.js","codeBank/mandalaDrawing/functionPool/_getStrokeWidth.js","codeBank/mandalaDrawing/functionPool/_getColorType.js","codeBank/mandalaDrawing/functionPool/_checkIndividualSwitches.js","codeBank/mandalaDrawing/functionPool/draw/drawLine.js","codeBank/mandalaDrawing/functionPool/draw/clearLoop.js","codeBank/mandalaDrawing/functionPool/draw/fillLoop.js","codeBank/mandalaDrawing/functionPool/draw/strokeLoop.js","codeBank/mandalaDrawing/special/loop.js","codeBank/mandalaDrawing/functionPool/draw/clearDrawingArea.js","codeBank/mandalaDrawing/functionPool/_getBackgroundLoopStats.js","codeBank/mandalaDrawing/functionPool/_checkLoopSwitches.js","codeBank/mandalaDrawing/functionPool/_checkShapeSpacing.js","codeBank/mandalaDrawing/functionPool/_getFollowingLoopStats.js","codeBank/mandalaDrawing/functionPool/draw/drawSquare.js","codeBank/mandalaDrawing/functionPool/draw/drawEllipse.js","codeBank/mandalaDrawing/functionPool/_getShapeFunction.js","codeBank/mandalaDrawing/functionPool/_getShapeArr.js","codeBank/mandalaDrawing/functionPool/_checkBackgroundSwitches.js","codeBank/mandalaDrawing/initMandalaDraw.js","codeBank/mandalaDrawing/mandalaDrawingUtilities.js","codeBank/mandalaDrawing/functionPool/_getBlendMode.js","codeBank/mandalaDrawing/functionPool/_getInputStats.js","codeBank/mandalaDrawing/MandalaDrawing.js","codeBank/randomInterface.js","codeBank/randomDrawing.js","randomDraw.js","App.js","index.js"],"names":["roll","range","Math","floor","random","rollRange","min","max","coinFlip","createCanvasTemplate","width","height","old","document","querySelector","remove","canvasTemplate","createElement","id","ctx","getContext","createCanvasDraw","parentSpace","innerHTML","canvasDraw","ctx2","appendChild","clear","inputObj","matrix","clearRect","canvasWidth","canvasHeight","randomColor","randomR","randomG","randomB","lightColor","shapeCount","randomL","randomH","randomS","darkColor","getDrawType","inputs","forceType","loopCycle","word","eval","chaos","fillSwitch","strokeSwitch","strokeOnly","clearIndividual","strokeAll","custom","fillOnly","clearAll","fillAll","fillAndStroke","individual","fillIndividual","fillColorIndividual","strokeIndividual","strokeColorIndividual","strokeWidthIndividual","outline","customBackgroundSwitch","customBackgroundColor","customStrokeColor","blendMode","maxShapeCount","customShape","strokeColorAll","strokeWidthAll","dice","console","log","Nav","className","CodeInjector","obj","state","displayState","JSON","parse","stringify","clearEmpties","key","Object","keys","length","undefined","writeInputCode","DropDownMarkUp","class","type","value","step","btnContainer","initialInputState","Controls","draw","dropDownMarkUp","adjustState","adjustDimensions","useState","input","setInput","dropDown","setDropDown","whichDropDown","setWhichDropDown","handleBtnClick","event","target","handleChange","name","Number","onClick","onChange","MainDisplay","boxDraw","boxDrawObj","xCoord","yCoord","usingMatrix","matrixRow","matrixColumn","pixel","calcX","xStart","calcY","yStart","fillStyle","color","fillRect","pixelWidth","pixelHeight","strokeStyle","strokeRect","PixelNode","this","InputNode","whatToPlace","rollColor","backgroundColor","primaryColor","secondaryColor","createPixelMap","patternOverride","newMatrix","y","row","x","push","drawSectionHeight","drawSectionWidth","combineMatrixTopHalf","matrix1","matrix2","combinedMatrix","i","combine","combineMatrixLeftHalf","clone","xOffset","yOffset","xPos","yPos","tempMatrix","rowArr","newPixel","fullClone","cloneMatrix1","cloneMatrix2","cloneMatrix3","inputNode","rotateClockwise","useMatrix","column","rotateCounterClockwise","fullRotate","rotatedMatrix1","rotatedMatrix2","rotatedMatrix3","reflectVerticalAxis","reflectHorizontalAxis","fullReflect","adjustedMatrix","reflectedMatrix","halfReflect","clonedMatrix","noPattern","getMatrix","specials","drawStyle","singles","quadrantDice","order","quadrantArray","test","includes","quadrant","findQuadrantOrder","forEach","number","index","doubles","styleDice","doubleDice","quadrantDouble","rotatedMatrix","BoxDrawing","forceDesignObj","dimensions","boxCount","primaryToggle","secondaryToggle","backgroundToggle","alert","toDataURL","getStrokeWidth","getColorType","clearSwitch","checkIndividualSwitches","fillColor","strokeColor","strokeWidth","starburst","save","moveTo","pathRadius","shapeSize","lineTo","restore","slant","clearLoop","shapeFunction","shapeArr","currentLoop","clearShape","globalCompositeOperation","beginPath","fill","closePath","rotate","PI","fillLoop","fillShape","strokeLoop","strokeShape","lineWidth","stroke","loop","translate","halfWidth","halfHeight","clearDrawingArea","getBackgroundStats","minShapeCount","maxPathRadius","maxFullPath","backgroundLoopSwitch","checkLoopSwitches","clearRandomLoops","FillRandomLoops","fillColorRandomLoops","strokeRandomLoops","strokeColorRandomLoops","strokeWidthRandomLoops","checkShapeSpacing","newPath","improperSpacing","minPathRadius","getFollowingLoopStats","maxShapeSize","percent","square","rect","diamond","circle","arc","oval","ellipse","getShapeFunction","forceNumber","getShapeArr","loopCount","shapeStyleDice","sameShape","checkResetBackgroundSwitches","fillColorAll","initMandalaDraw","inputStats","ceil","useHalfSize","getBackgroundLoopStats","checkBackgroundSwitches","findHypotenuse","hypotenuse","sqrt","pow","round","getBlendMode","blend","getInputStats","mandalaDrawObj","initLoopSwitch","drawType","fillRandomLoops","useSize","MandalaDrawing","randomInterface","RandomDrawing","returnRandomDrawing","sequence","App","designState","setDesignState","useEffect","typeOfDrawer","box","mandala","randomDraw","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.c157fb58.chunk.js","sourcesContent":["const roll = (range) => {\r\n\t// 1 - range\r\n\treturn Math.floor(Math.random() * range + 1);\r\n};\r\nconst rollRange = (min, max) => {\r\n\tconst answer = Math.floor(Math.random() * (max - min + 1)) + min;\r\n\treturn answer;\r\n};\r\n\r\nconst coinFlip = () => {\r\n\tconst coin = roll(2);\r\n\tconst face = coin === 1 ? true : false;\r\n\treturn face;\r\n};\r\nconst createCanvasTemplate = (width, height) => {\r\n\t//remove old canvas\r\n\tconst old = document.querySelector('#canvasTemplate');\r\n\tif (old) {\r\n\t\told.remove();\r\n\t}\r\n\t//create new canvas\r\n\tlet canvasTemplate = document.createElement('canvas');\r\n\tcanvasTemplate.id = 'canvasTemplate';\r\n\tcanvasTemplate.width = width;\r\n\tcanvasTemplate.height = height;\r\n\tconst ctx = canvasTemplate.getContext('2d');\r\n\r\n\treturn [canvasTemplate, ctx];\r\n};\r\nconst createCanvasDraw = (width, height) => {\r\n\t//find user defined space for canvas\r\n\tconst parentSpace =\r\n\t\tdocument.querySelector('.randomDraw') ||\r\n\t\tdocument.querySelector('#randomDraw');\r\n\t//remove old canvas\r\n\tparentSpace.innerHTML = '';\r\n\t//create new canvas\r\n\tlet canvasDraw = document.createElement('canvas');\r\n\tcanvasDraw.id = 'canvasDraw';\r\n\tcanvasDraw.width = width;\r\n\tcanvasDraw.height = height;\r\n\tconst ctx2 = canvasDraw.getContext('2d');\r\n\r\n\t//place canvas\r\n\tparentSpace.appendChild(canvasDraw);\r\n\r\n\treturn [canvasDraw, ctx2];\r\n};\r\n\r\nconst clear = (inputObj) => {\r\n\tinputObj.matrix = [];\r\n\tinputObj.ctx &&\r\n\t\tinputObj.ctx.clearRect(\r\n\t\t\t0,\r\n\t\t\t0,\r\n\t\t\tinputObj.canvasWidth,\r\n\t\t\tinputObj.canvasHeight\r\n\t\t);\r\n\tinputObj.ctx2 &&\r\n\t\tinputObj.ctx2.clearRect(\r\n\t\t\t0,\r\n\t\t\t0,\r\n\t\t\tinputObj.canvasWidth,\r\n\t\t\tinputObj.canvasHeight\r\n\t\t);\r\n\treturn inputObj.matrix;\r\n};\r\n\r\nconst randomColor = () => {\r\n\tconst randomR = roll(256);\r\n\tconst randomG = roll(256);\r\n\tconst randomB = roll(256);\r\n\treturn `rgb(${randomR},${randomG},${randomB})`;\r\n};\r\n\r\nconst lightColor = (shapeCount) => {\r\n\tconst randomH = rollRange(0, 360);\r\n\tconst randomS = rollRange(0, 100);\r\n\tlet randomL;\r\n\tif (shapeCount > 150) {\r\n\t\trandomL = 99;\r\n\t} else if (shapeCount > 100) {\r\n\t\trandomL = rollRange(95, 99); //0=black 50=normal 100=white\r\n\t} else if (shapeCount > 50) {\r\n\t\trandomL = rollRange(90, 99); //0=black 50=normal 100=white\r\n\t} else {\r\n\t\trandomL = rollRange(80, 99); //0=black 50=normal 100=white\r\n\t}\r\n\treturn `hsl(${randomH},${randomS}%,${randomL}%)`;\r\n};\r\n\r\nconst darkColor = (shapeCount) => {\r\n\tconst randomH = rollRange(0, 360);\r\n\tconst randomS = rollRange(0, 100);\r\n\tlet randomL;\r\n\t// debugger;\r\n\tif (shapeCount > 150) {\r\n\t\trandomL = 1;\r\n\t} else if (shapeCount > 100) {\r\n\t\trandomL = rollRange(5, 1); //0=black 50=normal 100=white\r\n\t} else if (shapeCount > 50) {\r\n\t\trandomL = rollRange(10, 1); //0=black 50=normal 100=white\r\n\t} else {\r\n\t\trandomL = rollRange(20, 1); //0=black 50=normal 100=white\r\n\t}\r\n\treturn `hsl(${randomH},${randomS}%,${randomL}%)`;\r\n};\r\n\r\n//rotate image functions\r\n//rotate image functions\r\n//rotate image functions\r\n//rotate image functions\r\n\r\n// const img = new Image();\r\n// img.src = \"https://i.stack.imgur.com/C7qq2.png?s=328&g=1\";\r\n// img.onload = () => { requestAnimationFrame(mainLoop) } // start when loaded\r\n// const ctx = canvas.getContext(\"2d\");\r\n\r\n// function drawImageRotated(img, x, y, scale, rot) {\r\n//   ctx.setTransform(scale, 0, 0, scale, x, y);\r\n//   ctx.rotate(rot);\r\n//   ctx.drawImage(img, -img.width / 2, -img.height / 2);\r\n//   ctx.setTransform(1, 0, 0, 1, 0, 0);\r\n// }\r\n\r\n// function mainLoop(time) {\r\n//   ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n//   drawImageRotated(img,canvas.width / 2, canvas.height / 2, 0.5, time / 500);\r\n//   requestAnimationFrame(mainLoop);\r\n// }\r\n\r\n//rotate image functions\r\n//rotate image functions\r\n//rotate image functions\r\n//rotate image functions\r\n\r\nexport {\r\n\troll,\r\n\trollRange,\r\n\tcoinFlip,\r\n\tcreateCanvasTemplate,\r\n\tcreateCanvasDraw,\r\n\tclear,\r\n\trandomColor,\r\n\tlightColor,\r\n\tdarkColor,\r\n};\r\n","import { roll, coinFlip } from '../../utilities.js';\r\n\r\nconst getDrawType = (inputs, forceType) => {\r\n\tconst loopCycle = (word) => {\r\n\t\teval(`inputs.${word}All = ${coinFlip()}`);\r\n\r\n\t\tif (!eval(`inputs.${word}All`)) {\r\n\t\t\teval(`inputs.${word}RandomLoops = ${coinFlip()}`);\r\n\t\t} else {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (!eval(`inputs.${word}RandomLoops`)) {\r\n\t\t\teval(`inputs.${word}Individual = ${coinFlip()}`);\r\n\t\t} else {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (!eval(`inputs.${word}Individual`)) {\r\n\t\t\tloopCycle(word);\r\n\t\t} else {\r\n\t\t\treturn;\r\n\t\t}\r\n\t};\r\n\r\n\tconst chaos = () => {\r\n\t\tinputs.fillSwitch = true;\r\n\t\tinputs.strokeSwitch = true;\r\n\t\tloopCycle('clear');\r\n\t\tloopCycle('fill');\r\n\t\tloopCycle('fillColor');\r\n\t\tloopCycle('stroke');\r\n\t\tloopCycle('strokeColor');\r\n\t\tloopCycle('strokeWidth');\r\n\t};\r\n\tconst strokeOnly = () => {\r\n\t\tinputs.fillSwitch = true;\r\n\t\tinputs.strokeSwitch = true;\r\n\t\t// loopCycle('clear');\r\n\t\tinputs.clearIndividual = true;\r\n\t\tinputs.strokeAll = true;\r\n\t\tloopCycle('strokeColor');\r\n\t\tloopCycle('strokeWidth');\r\n\t};\r\n\tconst custom = () => {};\r\n\tconst fillOnly = () => {\r\n\t\tinputs.fillSwitch = true;\r\n\t\tinputs.clearAll = true;\r\n\t\tinputs.fillAll = true;\r\n\t\tloopCycle('fillColor');\r\n\t\t// fillColorRandomLoops = true;\r\n\t};\r\n\tconst fillAndStroke = () => {\r\n\t\tinputs.fillSwitch = true;\r\n\t\tinputs.strokeSwitch = true;\r\n\t\tinputs.fillAll = true;\r\n\t\tinputs.strokeAll = true;\r\n\t\tloopCycle('clear');\r\n\t\tloopCycle('strokeColor');\r\n\t\tloopCycle('fillColor');\r\n\t};\r\n\tconst individual = () => {\r\n\t\tinputs.fillSwitch = true;\r\n\t\tinputs.strokeSwitch = true;\r\n\t\tinputs.clearIndividual = true;\r\n\t\tinputs.fillIndividual = true;\r\n\t\tinputs.fillColorIndividual = true;\r\n\t\tinputs.strokeIndividual = true;\r\n\t\tinputs.strokeColorIndividual = true;\r\n\t\tinputs.strokeWidthIndividual = true;\r\n\t};\r\n\tconst outline = () => {\r\n\t\tinputs.customBackgroundSwitch = true;\r\n\t\tinputs.customBackgroundColor = '#fff';\r\n\t\tinputs.customStrokeColor = '#000';\r\n\t\tinputs.blendMode = 'source-over';\r\n\t\tinputs.maxShapeCount = 50;\r\n\t\tinputs.customShape = 'noLine';\r\n\r\n\t\tinputs.strokeSwitch = true;\r\n\t\tinputs.fillSwitch = false;\r\n\t\tinputs.strokeAll = true;\r\n\t\tinputs.clearAll = true;\r\n\t\t// inputs.clearRandomLoops = true;\r\n\t\tinputs.strokeColorAll = true;\r\n\t\tinputs.strokeWidthAll = true;\r\n\t};\r\n\r\n\t// debugger;\r\n\tif (forceType) {\r\n\t\teval(`${forceType}()`);\r\n\t} else {\r\n\t\tconst dice = roll(5);\r\n\t\tswitch (dice) {\r\n\t\t\tcase 1:\r\n\t\t\t\tstrokeOnly();\r\n\t\t\t\tbreak;\r\n\t\t\tcase 2:\r\n\t\t\t\tfillOnly();\r\n\t\t\t\tbreak;\r\n\t\t\tcase 3:\r\n\t\t\t\tfillAndStroke();\r\n\t\t\t\tbreak;\r\n\t\t\tcase 4:\r\n\t\t\t\tindividual();\r\n\t\t\t\tbreak;\r\n\t\t\tcase 5:\r\n\t\t\t\tchaos();\r\n\t\t\t\tbreak;\r\n\t\t\t// case 6:\r\n\t\t\t// \toutline();\r\n\t\t\t// \tbreak;\r\n\t\t\t// case 7:\r\n\t\t\t// \tcustom();\r\n\t\t\t// \tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tconsole.log('error in getDrawType');\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n\treturn inputs;\r\n};\r\n\r\nexport default getDrawType;\r\n","import React from 'react';\r\n\r\nconst Nav = () => {\r\n\treturn (\r\n\t\t<header>\r\n\t\t\t<h1>randomDraw</h1>\r\n\t\t\t<button id='sequence' className='btn'>\r\n\t\t\t\tsequence\r\n\t\t\t</button>\r\n\t\t\t<img id='randomDrawSequence' />\r\n\t\t</header>\r\n\t);\r\n};\r\n\r\nexport default Nav;\r\n","import React from 'react';\r\n\r\nconst CodeInjector = ({ state }) => {\r\n\tconst cloneObj = (obj) => {\r\n\t\treturn JSON.parse(JSON.stringify(obj));\r\n\t};\r\n\tconst clearEmpties = (obj) => {\r\n\t\tfor (let key in obj) {\r\n\t\t\tif (!obj[key] || typeof obj[key] !== 'object') {\r\n\t\t\t\t//remove strings null and undefined\r\n\t\t\t\tif (\r\n\t\t\t\t\tobj[key] === undefined ||\r\n\t\t\t\t\tobj[key] === null ||\r\n\t\t\t\t\tobj[key] === ''\r\n\t\t\t\t) {\r\n\t\t\t\t\tdelete obj[key];\r\n\t\t\t\t}\r\n\t\t\t\tcontinue; // If null or not an object, skip to the next iteration\r\n\t\t\t}\r\n\t\t\t// The property is an object\r\n\t\t\tclearEmpties(obj[key]); // <-- Make a recursive call on the nested object\r\n\t\t\tif (Object.keys(obj[key]).length === 0) {\r\n\t\t\t\tdelete obj[key]; // The object had no properties, so delete that property\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\tconst writeInputCode = (obj) => {\r\n\t\tclearEmpties(obj);\r\n\t\tconst tab = `  `;\r\n\t\tlet html = `randomDraw(${JSON.stringify(obj, null, tab)});`;\r\n\t\treturn html;\r\n\t};\r\n\r\n\t//get code\r\n\tlet displayState = cloneObj(state);\r\n\t// clearEmpties(displayState);\r\n\tdisplayState = writeInputCode(displayState);\r\n\tconsole.log(displayState);\r\n\r\n\treturn (\r\n\t\t<section className='codeInjectionContainer'>\r\n\t\t\t<pre>\r\n\t\t\t\t<code className='codeInjection'>{displayState}</code>\r\n\t\t\t</pre>\r\n\t\t</section>\r\n\t);\r\n};\r\n\r\nexport default CodeInjector;\r\n","import React, { Fragment } from 'react';\r\n\r\nconst DropDownMarkUp = () => {\r\n\treturn (\r\n\t\t<Fragment>\r\n\t\t\t<div class='separatorContainer'>\r\n\t\t\t\t<div class='separators'>\r\n\t\t\t\t\t<p>\r\n\t\t\t\t\t\tBox Count:\r\n\t\t\t\t\t\t<input\r\n\t\t\t\t\t\t\tid='boxCount'\r\n\t\t\t\t\t\t\tclass='inputField'\r\n\t\t\t\t\t\t\ttype='number'\r\n\t\t\t\t\t\t\tvalue='10'\r\n\t\t\t\t\t\t\tmin='2'\r\n\t\t\t\t\t\t\tstep='2'\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</p>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div class='separators'>\r\n\t\t\t\t\t<p>Primary Color:</p>\r\n\t\t\t\t\t<div class='primaryColorContainer' btnContainer>\r\n\t\t\t\t\t\t<button id='defaultPrimaryColorBtn' class='btns active'>\r\n\t\t\t\t\t\t\tDefault\r\n\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t<button id='randomPrimaryColorBtn' class='btns'>\r\n\t\t\t\t\t\t\tRandom\r\n\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t<button id='choosePrimaryColorBtn' class='btns'>\r\n\t\t\t\t\t\t\tChoose\r\n\t\t\t\t\t\t\t<input\r\n\t\t\t\t\t\t\t\tid='choosePrimaryColor'\r\n\t\t\t\t\t\t\t\ttype='color'\r\n\t\t\t\t\t\t\t\tvalue='#000000'\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t</button>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div class='separators'>\r\n\t\t\t\t\t<p>Secondary Color:</p>\r\n\t\t\t\t\t<div class='secondaryColorContainer btnContainer'>\r\n\t\t\t\t\t\t<button\r\n\t\t\t\t\t\t\tid='defaultSecondaryColorBtn'\r\n\t\t\t\t\t\t\tclass='btns active'\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\tDefault Random\r\n\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t<button id='chooseSecondaryColorBtn' class='btns'>\r\n\t\t\t\t\t\t\tChoose\r\n\t\t\t\t\t\t\t<input\r\n\t\t\t\t\t\t\t\tid='chooseSecondaryColor'\r\n\t\t\t\t\t\t\t\ttype='color'\r\n\t\t\t\t\t\t\t\tvalue='#8C00FF'\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t</button>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div class='separators'>\r\n\t\t\t\t\t<p>Background Color:</p>\r\n\t\t\t\t\t<div class='backgroundColorContainer btnContainer'>\r\n\t\t\t\t\t\t<button\r\n\t\t\t\t\t\t\tid='defaultBackgroundColorBtn'\r\n\t\t\t\t\t\t\tclass='btns active'\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\tDefault\r\n\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t<button id='randomBackgroundColorBtn' class='btns'>\r\n\t\t\t\t\t\t\tRandom\r\n\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t<button id='chooseBackgroundColorBtn' class='btns'>\r\n\t\t\t\t\t\t\tChoose\r\n\t\t\t\t\t\t\t<input\r\n\t\t\t\t\t\t\t\tid='chooseBackgroundColor'\r\n\t\t\t\t\t\t\t\ttype='color'\r\n\t\t\t\t\t\t\t\tvalue='#EEEEEE'\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t</button>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t<div class='styleContainer btnContainer'>\r\n\t\t\t\t<p>Styles</p>\r\n\t\t\t\t<div class='btnContainer'>\r\n\t\t\t\t\t<button id='randomBtn' class='btns boxPatternBtns active'>\r\n\t\t\t\t\t\tRandom\r\n\t\t\t\t\t</button>\r\n\t\t\t\t\t<button id='fullCloneBtn' class='btns boxPatternBtns'>\r\n\t\t\t\t\t\tFull Clone\r\n\t\t\t\t\t</button>\r\n\t\t\t\t\t<button id='fullReflectBtn' class='btns boxPatternBtns'>\r\n\t\t\t\t\t\tFull Reflect\r\n\t\t\t\t\t</button>\r\n\t\t\t\t\t<button id='fullRotateBtn' class='btns boxPatternBtns'>\r\n\t\t\t\t\t\tFull Rotate\r\n\t\t\t\t\t</button>\r\n\t\t\t\t\t<button id='halfReflectBtn' class='btns boxPatternBtns'>\r\n\t\t\t\t\t\tHalf Reflect\r\n\t\t\t\t\t</button>\r\n\t\t\t\t\t<button id='noPatternBtn' class='btns boxPatternBtns'>\r\n\t\t\t\t\t\tNo Pattern\r\n\t\t\t\t\t</button>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</Fragment>\r\n\t);\r\n};\r\n\r\nexport default DropDownMarkUp;\r\n","import React, { useState, Fragment } from 'react';\r\nimport DropDownMarkUp from './DropDownMarkUp';\r\n// import { randomDraw } from '../../randomDraw';\r\n\r\nconst initialInputState = {\r\n\twidth: 500,\r\n\theight: 500,\r\n};\r\n\r\nconst Controls = ({ draw, state, adjustState, adjustDimensions }) => {\r\n\tconst [input, setInput] = useState(initialInputState);\r\n\tconst [dropDown, setDropDown] = useState(false);\r\n\tconst [whichDropDown, setWhichDropDown] = useState(''); //'draw', 'mandala'\r\n\r\n\tconst handleBtnClick = (event) => {\r\n\t\tlet id = event.target.id;\r\n\t\tswitch (id) {\r\n\t\t\tcase 'boxDrawerBtn':\r\n\t\t\t\tadjustState('typeOfDrawer', 'boxDraw');\r\n\t\t\t\tsetDropDown(true);\r\n\t\t\t\tsetWhichDropDown('box');\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'mandalaDrawerBtn':\r\n\t\t\t\tadjustState('typeOfDrawer', 'mandalaDraw');\r\n\t\t\t\tsetDropDown(true);\r\n\t\t\t\tsetWhichDropDown('mandala');\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tsetDropDown(false);\r\n\t\t\t\tconsole.log('error in handleBtnClick', id);\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t};\r\n\tconst handleChange = (event) => {\r\n\t\tsetInput({\r\n\t\t\t...input,\r\n\t\t\t[event.target.name]: event.target.value,\r\n\t\t});\r\n\t\tadjustDimensions([event.target.name], Number(event.target.value));\r\n\t};\r\n\r\n\tlet dropDownMarkUp;\r\n\tswitch (whichDropDown) {\r\n\t\tcase 'box':\r\n\t\t\tdropDownMarkUp = <DropDownMarkUp />;\r\n\t\t\tbreak;\r\n\t\tcase 'mandala':\r\n\t\t\t// dropDownMarkUp = <DropDownMarkUp />;\r\n\t\t\tbreak;\r\n\t\tdefault:\r\n\t\t\tdropDownMarkUp = null;\r\n\t\t\tbreak;\r\n\t}\r\n\r\n\treturn (\r\n\t\t<section className='controls'>\r\n\t\t\t<div className='mainControls'>\r\n\t\t\t\t<div className='drawerContainer btnContainer'>\r\n\t\t\t\t\t<button\r\n\t\t\t\t\t\tid='randomDrawerBtn'\r\n\t\t\t\t\t\tclassName='btns'\r\n\t\t\t\t\t\tonClick={handleBtnClick}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\tRandom Draw\r\n\t\t\t\t\t</button>\r\n\t\t\t\t\t<button\r\n\t\t\t\t\t\tid='boxDrawerBtn'\r\n\t\t\t\t\t\tclassName='btns'\r\n\t\t\t\t\t\tonClick={handleBtnClick}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\tBox Draw\r\n\t\t\t\t\t</button>\r\n\t\t\t\t\t<button\r\n\t\t\t\t\t\tid='mandalaDrawerBtn'\r\n\t\t\t\t\t\tclassName='btns'\r\n\t\t\t\t\t\tonClick={handleBtnClick}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\tMandala Draw\r\n\t\t\t\t\t</button>\r\n\t\t\t\t</div>\r\n\t\t\t\t<p>\r\n\t\t\t\t\tDimensions:\r\n\t\t\t\t\t<input\r\n\t\t\t\t\t\tid='dimensionWidth'\r\n\t\t\t\t\t\tname='width'\r\n\t\t\t\t\t\tclassName='inputField'\r\n\t\t\t\t\t\ttype='number'\r\n\t\t\t\t\t\tvalue={input.width}\r\n\t\t\t\t\t\tmin='2'\r\n\t\t\t\t\t\tstep='2'\r\n\t\t\t\t\t\tonChange={handleChange}\r\n\t\t\t\t\t/>\r\n\t\t\t\t\tx\r\n\t\t\t\t\t<input\r\n\t\t\t\t\t\tid='dimensionHeight'\r\n\t\t\t\t\t\tname='height'\r\n\t\t\t\t\t\tclassName='inputField'\r\n\t\t\t\t\t\ttype='number'\r\n\t\t\t\t\t\tvalue={input.height}\r\n\t\t\t\t\t\tmin='2'\r\n\t\t\t\t\t\tstep='2'\r\n\t\t\t\t\t\tonChange={handleChange}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</p>\r\n\t\t\t</div>\r\n\t\t\t<div className='subControls'>\r\n\t\t\t\t{dropDown ? dropDownMarkUp : null}\r\n\t\t\t</div>\r\n\t\t</section>\r\n\t);\r\n};\r\nexport default Controls;\r\n","import React from 'react';\r\n\r\nconst MainDisplay = () => {\r\n\treturn <section className='randomDraw'></section>;\r\n};\r\nexport default MainDisplay;\r\n","import { roll } from '../utilities.js';\r\n\r\nconst boxDraw = (boxDrawObj, xCoord = 0, yCoord = 0) => {\r\n\tconst usingMatrix = boxDrawObj.matrix;\r\n\r\n\tif (xCoord === null && yCoord === null) {\r\n\t\tfor (let matrixRow = 0; matrixRow < usingMatrix.length; matrixRow++) {\r\n\t\t\tfor (\r\n\t\t\t\tlet matrixColumn = 0;\r\n\t\t\t\tmatrixColumn < usingMatrix[matrixRow].length;\r\n\t\t\t\tmatrixColumn++\r\n\t\t\t) {\r\n\t\t\t\tconst pixel = usingMatrix[matrixRow][matrixColumn];\r\n\t\t\t\tconst calcX = pixel.xStart + xCoord;\r\n\t\t\t\tconst calcY = pixel.yStart + yCoord;\r\n\r\n\t\t\t\tboxDrawObj.ctx.fillStyle = pixel.color;\r\n\t\t\t\tboxDrawObj.ctx.fillRect(\r\n\t\t\t\t\tcalcX,\r\n\t\t\t\t\tcalcY,\r\n\t\t\t\t\tboxDrawObj.pixelWidth,\r\n\t\t\t\t\tboxDrawObj.pixelHeight\r\n\t\t\t\t);\r\n\t\t\t\tboxDrawObj.ctx.strokeStyle = `rgb(255, 255, 255)`;\r\n\t\t\t\tboxDrawObj.ctx.strokeRect(\r\n\t\t\t\t\tcalcX,\r\n\t\t\t\t\tcalcY,\r\n\t\t\t\t\tboxDrawObj.pixelWidth,\r\n\t\t\t\t\tboxDrawObj.pixelHeight\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn;\r\n\t}\r\n\tfor (let matrixRow = 0; matrixRow < usingMatrix.length; matrixRow++) {\r\n\t\tfor (\r\n\t\t\tlet matrixColumn = 0;\r\n\t\t\tmatrixColumn < usingMatrix[matrixRow].length;\r\n\t\t\tmatrixColumn++\r\n\t\t) {\r\n\t\t\tconst pixel = usingMatrix[matrixRow][matrixColumn];\r\n\t\t\tconst calcX = pixel.xStart + xCoord;\r\n\t\t\tconst calcY = pixel.yStart + yCoord;\r\n\r\n\t\t\tif (xCoord === null && yCoord === null) {\r\n\t\t\t\tboxDrawObj.ctx.fillStyle = pixel.color;\r\n\t\t\t\tboxDrawObj.ctx.fillRect(\r\n\t\t\t\t\tcalcX,\r\n\t\t\t\t\tcalcY,\r\n\t\t\t\t\tboxDrawObj.pixelWidth,\r\n\t\t\t\t\tboxDrawObj.pixelHeight\r\n\t\t\t\t);\r\n\t\t\t\tboxDrawObj.ctx.strokeStyle = `rgb(255, 255, 255)`;\r\n\t\t\t\tboxDrawObj.ctx.strokeRect(\r\n\t\t\t\t\tcalcX,\r\n\t\t\t\t\tcalcY,\r\n\t\t\t\t\tboxDrawObj.pixelWidth,\r\n\t\t\t\t\tboxDrawObj.pixelHeight\r\n\t\t\t\t);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tboxDrawObj.ctx2.fillStyle = pixel.color;\r\n\t\t\tboxDrawObj.ctx2.fillRect(\r\n\t\t\t\tcalcX,\r\n\t\t\t\tcalcY,\r\n\t\t\t\tboxDrawObj.pixelWidth,\r\n\t\t\t\tboxDrawObj.pixelHeight\r\n\t\t\t);\r\n\t\t\tboxDrawObj.ctx2.strokeStyle = `rgb(255, 255, 255)`;\r\n\t\t\tboxDrawObj.ctx2.strokeRect(\r\n\t\t\t\tcalcX,\r\n\t\t\t\tcalcY,\r\n\t\t\t\tboxDrawObj.pixelWidth,\r\n\t\t\t\tboxDrawObj.pixelHeight\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n\treturn usingMatrix;\r\n};\r\nclass PixelNode {\r\n\tconstructor(xStart, yStart, color = '#020') {\r\n\t\tthis.xStart = xStart;\r\n\t\tthis.yStart = yStart;\r\n\t\tthis.color = color;\r\n\t}\r\n}\r\nclass InputNode {\r\n\tconstructor(ctx, ctx2, matrix, pixelWidth, pixelHeight) {\r\n\t\tthis.ctx = ctx;\r\n\t\tthis.ctx2 = ctx2;\r\n\t\tthis.matrix = matrix;\r\n\t\tthis.pixelWidth = pixelWidth;\r\n\t\tthis.pixelHeight = pixelHeight;\r\n\t}\r\n}\r\n\r\nconst whatToPlace = (boxDrawObj, xStart, yStart) => {\r\n\tconst rollColor = roll(3);\r\n\tlet pixel = new PixelNode(xStart, yStart);\r\n\tswitch (rollColor) {\r\n\t\tcase 1:\r\n\t\t\tpixel.color = boxDrawObj.backgroundColor;\r\n\t\t\tbreak;\r\n\t\tcase 2:\r\n\t\t\tpixel.color = boxDrawObj.primaryColor;\r\n\t\t\tbreak;\r\n\t\tcase 3:\r\n\t\t\tpixel.color = boxDrawObj.secondaryColor;\r\n\t\t\tbreak;\r\n\t\tdefault:\r\n\t\t\tconsole.log('error, sorry');\r\n\t}\r\n\treturn pixel;\r\n};\r\n\r\nconst createPixelMap = (boxDrawObj, patternOverride) => {\r\n\tconst newMatrix = [];\r\n\tif (patternOverride === 'noPattern') {\r\n\t\t//this will cycle through y axis on pixel height\r\n\t\tfor (\r\n\t\t\tlet y = 0;\r\n\t\t\ty < boxDrawObj.canvasHeight;\r\n\t\t\ty += boxDrawObj.pixelHeight\r\n\t\t) {\r\n\t\t\tlet row = [];\r\n\t\t\t//this will cycle through x axis on pixel width\r\n\t\t\tfor (\r\n\t\t\t\tlet x = 0;\r\n\t\t\t\tx < boxDrawObj.canvasWidth;\r\n\t\t\t\tx += boxDrawObj.pixelWidth\r\n\t\t\t) {\r\n\t\t\t\t// console.log(`${x} starting pixel draw,`);\r\n\t\t\t\tconst pixel = whatToPlace(boxDrawObj, x, y);\r\n\t\t\t\trow.push(pixel);\r\n\t\t\t}\r\n\t\t\tnewMatrix.push(row);\r\n\t\t}\r\n\t} else {\r\n\t\t//this will cycle through y axis on pixel height\r\n\t\tfor (\r\n\t\t\tlet y = 0;\r\n\t\t\ty < boxDrawObj.drawSectionHeight;\r\n\t\t\ty += boxDrawObj.pixelHeight\r\n\t\t) {\r\n\t\t\tlet row = [];\r\n\t\t\t//this will cycle through x axis on pixel width\r\n\t\t\tfor (\r\n\t\t\t\tlet x = 0;\r\n\t\t\t\tx < boxDrawObj.drawSectionWidth;\r\n\t\t\t\tx += boxDrawObj.pixelWidth\r\n\t\t\t) {\r\n\t\t\t\t// console.log(`${x} starting pixel draw,`);\r\n\t\t\t\tconst pixel = whatToPlace(boxDrawObj, x, y);\r\n\t\t\t\trow.push(pixel);\r\n\t\t\t}\r\n\t\t\tnewMatrix.push(row);\r\n\t\t}\r\n\t}\r\n\treturn newMatrix;\r\n};\r\n\r\nconst combineMatrixTopHalf = (matrix1, matrix2) => {\r\n\tlet combinedMatrix = [];\r\n\tfor (let i = 0; i < matrix1.length; i++) {\r\n\t\tconst combine = [...matrix1[i], ...matrix2[i]];\r\n\t\tcombinedMatrix.push(combine);\r\n\t}\r\n\treturn combinedMatrix;\r\n};\r\nconst combineMatrixLeftHalf = (matrix1, matrix2) => {\r\n\treturn [...matrix1, ...matrix2];\r\n};\r\n\r\nconst findQuadrantOrder = (boxDrawObj) => {\r\n\t// console.log(boxDrawObj);\r\n\tlet order = [];\r\n\tlet quadrantArray = [];\r\n\r\n\twhile (order.length < 4) {\r\n\t\tlet test = roll(4);\r\n\t\tif (!order.includes(test)) {\r\n\t\t\tlet quadrant = {};\r\n\t\t\tswitch (test) {\r\n\t\t\t\tcase 1:\r\n\t\t\t\t\tquadrant.x = 0;\r\n\t\t\t\t\tquadrant.y = 0;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 2:\r\n\t\t\t\t\tquadrant.x = boxDrawObj.drawSectionWidth;\r\n\t\t\t\t\tquadrant.y = 0;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 3:\r\n\t\t\t\t\tquadrant.x = boxDrawObj.drawSectionWidth;\r\n\t\t\t\t\tquadrant.y = boxDrawObj.drawSectionHeight;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 4:\r\n\t\t\t\t\tquadrant.x = 0;\r\n\t\t\t\t\tquadrant.y = boxDrawObj.drawSectionHeight;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tconsole.log('error in findQuadrantOrder');\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\torder.push(test);\r\n\t\t\tquadrantArray.push(quadrant);\r\n\t\t}\r\n\t}\r\n\treturn quadrantArray;\r\n};\r\n\r\nexport {\r\n\tboxDraw,\r\n\tPixelNode,\r\n\tInputNode,\r\n\tcreatePixelMap,\r\n\tcombineMatrixTopHalf,\r\n\tcombineMatrixLeftHalf,\r\n\tfindQuadrantOrder,\r\n};\r\n","import { PixelNode } from '../boxDrawingUtilities.js';\r\n\r\nconst clone = (boxDrawObj, xOffset = 0, yOffset = 0) => {\r\n\tconst usingMatrix = boxDrawObj.matrix;\r\n\tlet xPos = xOffset;\r\n\tlet yPos = yOffset;\r\n\tlet tempMatrix = [];\r\n\r\n\tfor (let matrixRow = 0; matrixRow < usingMatrix.length; matrixRow++) {\r\n\t\tlet rowArr = [];\r\n\t\tfor (\r\n\t\t\tlet matrixColumn = 0;\r\n\t\t\tmatrixColumn < usingMatrix[matrixRow].length;\r\n\t\t\tmatrixColumn++\r\n\t\t) {\r\n\t\t\tconst pixel = usingMatrix[matrixRow][matrixColumn];\r\n\t\t\tconst newPixel = new PixelNode(xPos, yPos, pixel.color);\r\n\r\n\t\t\trowArr.push(newPixel);\r\n\t\t\txPos += boxDrawObj.pixelWidth;\r\n\t\t}\r\n\t\ttempMatrix.push(rowArr);\r\n\t\txPos = xOffset;\r\n\t\tyPos += boxDrawObj.pixelHeight;\r\n\t}\r\n\tyPos = yOffset;\r\n\r\n\treturn tempMatrix;\r\n};\r\n\r\nexport default clone;\r\n","import { boxDraw, InputNode } from '../boxDrawingUtilities.js';\r\nimport clone from '../singles/clone.js';\r\n\r\nconst fullClone = (boxDrawObj) => {\r\n\tlet cloneMatrix1 = [];\r\n\tlet cloneMatrix2 = [];\r\n\tlet cloneMatrix3 = [];\r\n\r\n\tlet inputNode = new InputNode(\r\n\t\tboxDrawObj.ctx,\r\n\t\tboxDrawObj.ctx2,\r\n\t\tboxDrawObj.matrix,\r\n\t\tboxDrawObj.pixelWidth,\r\n\t\tboxDrawObj.pixelHeight\r\n\t);\r\n\r\n\tboxDraw(boxDrawObj);\r\n\r\n\tcloneMatrix1 = clone(boxDrawObj, boxDrawObj.drawSectionWidth, 0);\r\n\r\n\tinputNode.matrix = cloneMatrix1;\r\n\r\n\tboxDraw(inputNode);\r\n\r\n\tcloneMatrix2 = clone(\r\n\t\tboxDrawObj,\r\n\t\tboxDrawObj.drawSectionWidth,\r\n\t\tboxDrawObj.drawSectionHeight\r\n\t);\r\n\r\n\tinputNode.matrix = cloneMatrix2;\r\n\r\n\tboxDraw(inputNode);\r\n\r\n\tcloneMatrix3 = clone(boxDrawObj, 0, boxDrawObj.drawSectionHeight);\r\n\r\n\tinputNode.matrix = cloneMatrix3;\r\n\r\n\tboxDraw(inputNode);\r\n};\r\n\r\nexport default fullClone;\r\n","import { PixelNode } from '../boxDrawingUtilities.js';\r\n\r\nconst rotateClockwise = (boxDrawObj, xOffset = 0, yOffset = 0) => {\r\n\tconst useMatrix = boxDrawObj.matrix;\r\n\tlet xPos = xOffset;\r\n\tlet yPos = yOffset;\r\n\tlet tempMatrix = [];\r\n\tlet rotatedMatrix = [];\r\n\r\n\tfor (let column = 0; column < useMatrix[0].length; column++) {\r\n\t\tlet rowArr = [];\r\n\r\n\t\tfor (let row = useMatrix.length - 1; row >= 0; row--) {\r\n\t\t\tconst pixel = useMatrix[row][column];\r\n\t\t\tconst newPixel = new PixelNode(xPos, yPos, pixel.color);\r\n\r\n\t\t\trowArr.push(newPixel);\r\n\t\t\txPos += boxDrawObj.pixelWidth;\r\n\t\t}\r\n\t\ttempMatrix.push(rowArr);\r\n\t\txPos = xOffset;\r\n\t\tyPos += boxDrawObj.pixelHeight;\r\n\t}\r\n\tyPos = yOffset;\r\n\trotatedMatrix = [...tempMatrix];\r\n\r\n\treturn rotatedMatrix;\r\n};\r\n\r\nconst rotateCounterClockwise = (boxDrawObj, xOffset = 0, yOffset = 0) => {\r\n\tconst useMatrix = boxDrawObj.matrix;\r\n\t//loop columns reverse\r\n\t//loop over rows in order\r\n\tlet xPos = xOffset;\r\n\tlet yPos = yOffset;\r\n\tlet tempMatrix = [];\r\n\tlet rotatedMatrix = [];\r\n\r\n\tfor (let column = useMatrix[0].length - 1; column >= 0; column--) {\r\n\t\tlet rowArr = [];\r\n\r\n\t\tfor (let row = 0; row < useMatrix.length; row++) {\r\n\t\t\tconst pixel = useMatrix[row][column];\r\n\t\t\tconst newPixel = new PixelNode(xPos, yPos, pixel.color);\r\n\r\n\t\t\trowArr.push(newPixel);\r\n\t\t\txPos += boxDrawObj.pixelWidth;\r\n\t\t}\r\n\t\ttempMatrix.push(rowArr);\r\n\t\txPos = xOffset;\r\n\t\tyPos += boxDrawObj.pixelHeight;\r\n\t}\r\n\tyPos = yOffset;\r\n\trotatedMatrix = [...tempMatrix];\r\n\r\n\treturn rotatedMatrix;\r\n};\r\n\r\nexport { rotateClockwise, rotateCounterClockwise };\r\n","import { rotateClockwise } from '../singles/rotate.js';\r\nimport { boxDraw, InputNode } from '../boxDrawingUtilities.js';\r\n\r\nconst fullRotate = (boxDrawObj) => {\r\n\tlet rotatedMatrix1 = [];\r\n\tlet rotatedMatrix2 = [];\r\n\tlet rotatedMatrix3 = [];\r\n\r\n\tboxDraw(boxDrawObj);\r\n\r\n\tlet inputNode = new InputNode(\r\n\t\tboxDrawObj.ctx,\r\n\t\tboxDrawObj.ctx2,\r\n\t\tboxDrawObj.matrix,\r\n\t\tboxDrawObj.pixelWidth,\r\n\t\tboxDrawObj.pixelHeight\r\n\t);\r\n\r\n\trotatedMatrix1 = rotateClockwise(boxDrawObj);\r\n\r\n\tinputNode.matrix = rotatedMatrix1;\r\n\r\n\tboxDraw(inputNode, boxDrawObj.drawSectionWidth, 0);\r\n\r\n\trotatedMatrix2 = rotateClockwise(inputNode);\r\n\r\n\tinputNode.matrix = rotatedMatrix2;\r\n\r\n\tboxDraw(\r\n\t\tinputNode,\r\n\t\tboxDrawObj.drawSectionWidth,\r\n\t\tboxDrawObj.drawSectionHeight\r\n\t);\r\n\r\n\trotatedMatrix3 = rotateClockwise(inputNode);\r\n\r\n\tinputNode.matrix = rotatedMatrix3;\r\n\r\n\tboxDraw(inputNode, 0, boxDrawObj.drawSectionHeight);\r\n};\r\n\r\nexport default fullRotate;\r\n","import { PixelNode } from '../boxDrawingUtilities.js';\r\n\r\nconst reflectVerticalAxis = (boxDrawObj, xOffset = 0, yOffset = 0) => {\r\n\tconst useMatrix = boxDrawObj.matrix;\r\n\tlet xPos = xOffset;\r\n\tlet yPos = yOffset;\r\n\tlet tempMatrix = [];\r\n\tfor (let row = 0; row < useMatrix.length; row++) {\r\n\t\tlet rowArr = [];\r\n\t\tfor (let column = useMatrix[row].length - 1; column >= 0; column--) {\r\n\t\t\tconst pixel = useMatrix[row][column];\r\n\t\t\tconst newPixel = new PixelNode(xPos, yPos, pixel.color);\r\n\r\n\t\t\trowArr.push(newPixel);\r\n\t\t\txPos += boxDrawObj.pixelWidth;\r\n\t\t}\r\n\t\ttempMatrix.push(rowArr);\r\n\t\txPos = xOffset;\r\n\t\tyPos += boxDrawObj.pixelHeight;\r\n\t}\r\n\tyPos = yOffset;\r\n\r\n\treturn tempMatrix;\r\n};\r\n\r\nconst reflectHorizontalAxis = (boxDrawObj, xOffset = 0, yOffset = 0) => {\r\n\tconst useMatrix = boxDrawObj.matrix;\r\n\tlet xPos = xOffset;\r\n\tlet yPos = yOffset;\r\n\tlet tempMatrix = [];\r\n\tfor (let row = useMatrix.length - 1; row >= 0; row--) {\r\n\t\tlet rowArr = [];\r\n\t\tfor (let column = 0; column < useMatrix[row].length; column++) {\r\n\t\t\tconst pixel = useMatrix[row][column];\r\n\t\t\tconst newPixel = new PixelNode(xPos, yPos, pixel.color);\r\n\r\n\t\t\trowArr.push(newPixel);\r\n\t\t\txPos += boxDrawObj.pixelWidth;\r\n\t\t}\r\n\t\ttempMatrix.push(rowArr);\r\n\t\txPos = xOffset;\r\n\t\tyPos += boxDrawObj.pixelHeight;\r\n\t}\r\n\tyPos = yOffset;\r\n\r\n\treturn tempMatrix;\r\n};\r\n\r\nexport { reflectVerticalAxis, reflectHorizontalAxis };\r\n","import {\r\n\treflectVerticalAxis,\r\n\treflectHorizontalAxis,\r\n} from '../singles/reflect.js';\r\nimport {\r\n\tboxDraw,\r\n\tInputNode,\r\n\tcombineMatrixTopHalf,\r\n} from '../boxDrawingUtilities.js';\r\n\r\nconst fullReflect = (boxDrawObj) => {\r\n\tlet adjustedMatrix = [];\r\n\tlet combinedMatrix = [];\r\n\tlet reflectedMatrix = [];\r\n\r\n\tlet inputNode = new InputNode(\r\n\t\tboxDrawObj.ctx,\r\n\t\tboxDrawObj.ctx2,\r\n\t\tboxDrawObj.matrix,\r\n\t\tboxDrawObj.pixelWidth,\r\n\t\tboxDrawObj.pixelHeight\r\n\t);\r\n\r\n\tboxDraw(inputNode);\r\n\r\n\tadjustedMatrix = reflectVerticalAxis(\r\n\t\tboxDrawObj,\r\n\t\tboxDrawObj.drawSectionWidth,\r\n\t\t0\r\n\t);\r\n\r\n\tinputNode.matrix = adjustedMatrix;\r\n\r\n\tboxDraw(inputNode);\r\n\r\n\tcombinedMatrix = combineMatrixTopHalf(boxDrawObj.matrix, adjustedMatrix);\r\n\r\n\tinputNode.matrix = combinedMatrix;\r\n\r\n\treflectedMatrix = reflectHorizontalAxis(\r\n\t\tinputNode,\r\n\t\t0,\r\n\t\tboxDrawObj.drawSectionHeight\r\n\t);\r\n\r\n\tinputNode.matrix = reflectedMatrix;\r\n\r\n\tboxDraw(inputNode);\r\n};\r\n\r\nexport default fullReflect;\r\n","import { roll } from '../../utilities.js';\r\nimport {\r\n\tboxDraw,\r\n\tInputNode,\r\n\tcombineMatrixLeftHalf,\r\n\tcombineMatrixTopHalf,\r\n} from '../boxDrawingUtilities.js';\r\nimport clone from '../singles/clone.js';\r\nimport {\r\n\treflectVerticalAxis,\r\n\treflectHorizontalAxis,\r\n} from '../singles/reflect.js';\r\n\r\nconst halfReflect = (boxDrawObj) => {\r\n\tboxDraw(boxDrawObj);\r\n\tlet clonedMatrix = [];\r\n\tlet combinedMatrix = [];\r\n\tlet reflectedMatrix = [];\r\n\r\n\tlet inputNode = new InputNode(\r\n\t\tboxDrawObj.ctx,\r\n\t\tboxDrawObj.ctx2,\r\n\t\tboxDrawObj.matrix,\r\n\t\tboxDrawObj.pixelWidth,\r\n\t\tboxDrawObj.pixelHeight\r\n\t);\r\n\r\n\tconst quadrantDice = roll(2);\r\n\tswitch (quadrantDice) {\r\n\t\tcase 1:\r\n\t\t\t//horizontal reflect\r\n\t\t\tclonedMatrix = clone(boxDrawObj, boxDrawObj.drawSectionWidth, 0);\r\n\r\n\t\t\tinputNode.matrix = clonedMatrix;\r\n\r\n\t\t\tboxDraw(inputNode);\r\n\r\n\t\t\tcombinedMatrix = combineMatrixTopHalf(\r\n\t\t\t\tboxDrawObj.matrix,\r\n\t\t\t\tclonedMatrix\r\n\t\t\t);\r\n\r\n\t\t\tinputNode.matrix = combinedMatrix;\r\n\r\n\t\t\treflectedMatrix = reflectHorizontalAxis(\r\n\t\t\t\tinputNode,\r\n\t\t\t\t0,\r\n\t\t\t\tboxDrawObj.drawSectionHeight\r\n\t\t\t);\r\n\r\n\t\t\tinputNode.matrix = reflectedMatrix;\r\n\r\n\t\t\tboxDraw(inputNode);\r\n\r\n\t\t\tbreak;\r\n\t\tcase 2:\r\n\t\t\t//vertical reflect\r\n\t\t\tclonedMatrix = clone(boxDrawObj, 0, boxDrawObj.drawSectionHeight);\r\n\r\n\t\t\tinputNode.matrix = clonedMatrix;\r\n\r\n\t\t\tboxDraw(inputNode);\r\n\r\n\t\t\tcombinedMatrix = combineMatrixLeftHalf(\r\n\t\t\t\tboxDrawObj.matrix,\r\n\t\t\t\tclonedMatrix\r\n\t\t\t);\r\n\r\n\t\t\tinputNode.matrix = combinedMatrix;\r\n\r\n\t\t\treflectedMatrix = reflectVerticalAxis(\r\n\t\t\t\tinputNode,\r\n\t\t\t\tboxDrawObj.drawSectionWidth,\r\n\t\t\t\t0\r\n\t\t\t);\r\n\r\n\t\t\tinputNode.matrix = reflectedMatrix;\r\n\r\n\t\t\tboxDraw(inputNode);\r\n\t\t\tbreak;\r\n\t\tdefault:\r\n\t\t\tconsole.log('error in halfReflect switch');\r\n\t\t\tbreak;\r\n\t}\r\n};\r\n\r\nexport default halfReflect;\r\n","import { boxDraw, InputNode, createPixelMap } from '../boxDrawingUtilities.js';\r\n\r\nconst noPattern = (boxDrawObj) => {\r\n\tlet inputNode = new InputNode(\r\n\t\tboxDrawObj.ctx,\r\n\t\tboxDrawObj.ctx2,\r\n\t\tboxDrawObj.matrix,\r\n\t\tboxDrawObj.pixelWidth,\r\n\t\tboxDrawObj.pixelHeight\r\n\t);\r\n\r\n\tlet getMatrix = createPixelMap(boxDrawObj, 'noPattern');\r\n\tinputNode.matrix = getMatrix;\r\n\r\n\tboxDraw(inputNode);\r\n};\r\n\r\nexport default noPattern;\r\n","import { roll } from '../../utilities.js';\r\nimport fullClone from './fullClone.js';\r\nimport fullRotate from './fullRotate.js';\r\nimport fullReflect from './fullReflect.js';\r\nimport halfReflect from './halfReflect.js';\r\nimport noPattern from './noPattern.js';\r\n\r\nconst specials = (boxDrawObj) => {\r\n\tif (!boxDrawObj.drawStyle || boxDrawObj.drawStyle === 'random') {\r\n\t\tconst dice = roll(5);\r\n\t\tswitch (dice) {\r\n\t\t\tcase 1:\r\n\t\t\t\tfullClone(boxDrawObj);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 2:\r\n\t\t\t\tfullRotate(boxDrawObj);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 3:\r\n\t\t\t\tfullReflect(boxDrawObj);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 4:\r\n\t\t\t\thalfReflect(boxDrawObj);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 5:\r\n\t\t\t\tnoPattern(boxDrawObj);\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tconsole.log('error in layout variable');\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t} else {\r\n\t\tswitch (boxDrawObj.drawStyle) {\r\n\t\t\tcase 'fullClone':\r\n\t\t\t\tfullClone(boxDrawObj);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'fullReflect':\r\n\t\t\t\tfullReflect(boxDrawObj);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'fullRotate':\r\n\t\t\t\tfullRotate(boxDrawObj);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'halfReflect':\r\n\t\t\t\thalfReflect(boxDrawObj);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'noPattern':\r\n\t\t\t\tnoPattern(boxDrawObj);\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tconsole.log('error in forcedraw of specials');\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n};\r\n\r\nexport default specials;\r\n","import { roll } from '../../utilities.js';\r\nimport {\r\n\tfindQuadrantOrder,\r\n\tboxDraw,\r\n\tInputNode,\r\n} from '../boxDrawingUtilities.js';\r\nimport clone from './clone.js';\r\nimport { reflectVerticalAxis, reflectHorizontalAxis } from './reflect.js';\r\nimport { rotateClockwise, rotateCounterClockwise } from './rotate.js';\r\n\r\nconst singles = (boxDrawObj) => {\r\n\tconst quadrantDice = findQuadrantOrder(boxDrawObj);\r\n\tconst styleDice = [1, roll(3), roll(3), roll(3)];\r\n\r\n\tstyleDice.forEach((number, index) => {\r\n\t\tconst xPos = quadrantDice[index].x;\r\n\t\tconst yPos = quadrantDice[index].y;\r\n\t\tlet adjustedMatrix = [];\r\n\r\n\t\tlet inputNode = new InputNode(\r\n\t\t\tboxDrawObj.ctx,\r\n\t\t\tboxDrawObj.ctx2,\r\n\t\t\tboxDrawObj.matrix,\r\n\t\t\tboxDrawObj.pixelWidth,\r\n\t\t\tboxDrawObj.pixelHeight\r\n\t\t);\r\n\r\n\t\tswitch (number) {\r\n\t\t\tcase 1:\r\n\t\t\t\t//clone\r\n\t\t\t\tadjustedMatrix = clone(boxDrawObj, xPos, yPos);\r\n\r\n\t\t\t\tinputNode.matrix = adjustedMatrix;\r\n\r\n\t\t\t\tboxDraw(inputNode);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 2:\r\n\t\t\t\t//reflect\r\n\t\t\t\tconst directionDiceReflect = roll(2); // 1 = vertical axis reflect. 2 = horizontal axis reflect\r\n\r\n\t\t\t\tdirectionDiceReflect === 1\r\n\t\t\t\t\t? (adjustedMatrix = reflectVerticalAxis(\r\n\t\t\t\t\t\t\tboxDrawObj,\r\n\t\t\t\t\t\t\txPos,\r\n\t\t\t\t\t\t\tyPos\r\n\t\t\t\t\t  ))\r\n\t\t\t\t\t: (adjustedMatrix = reflectHorizontalAxis(\r\n\t\t\t\t\t\t\tboxDrawObj,\r\n\t\t\t\t\t\t\txPos,\r\n\t\t\t\t\t\t\tyPos\r\n\t\t\t\t\t  ));\r\n\r\n\t\t\t\tinputNode.matrix = adjustedMatrix;\r\n\r\n\t\t\t\tboxDraw(inputNode);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 3:\r\n\t\t\t\t//rotate\r\n\t\t\t\tconst directionDiceRotate = roll(2); // 1 = clockwise rotate. 2 = counter clockwise rotate\r\n\r\n\t\t\t\tdirectionDiceRotate === 1\r\n\t\t\t\t\t? (adjustedMatrix = rotateClockwise(boxDrawObj, xPos, yPos))\r\n\t\t\t\t\t: (adjustedMatrix = rotateCounterClockwise(\r\n\t\t\t\t\t\t\tboxDrawObj,\r\n\t\t\t\t\t\t\txPos,\r\n\t\t\t\t\t\t\tyPos\r\n\t\t\t\t\t  ));\r\n\r\n\t\t\t\tinputNode.matrix = adjustedMatrix;\r\n\r\n\t\t\t\tboxDraw(inputNode);\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tconsole.log('error in number variable');\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t});\r\n};\r\n\r\nexport default singles;\r\n","import { roll } from '../../utilities.js';\r\nimport { InputNode } from '../boxDrawingUtilities.js';\r\nimport {\r\n\tboxDraw,\r\n\tcombineMatrixTopHalf,\r\n\tcombineMatrixLeftHalf,\r\n} from '../boxDrawingUtilities.js';\r\nimport clone from '../singles/clone.js';\r\nimport {\r\n\treflectHorizontalAxis,\r\n\treflectVerticalAxis,\r\n} from '../singles/reflect.js';\r\nimport { rotateClockwise, rotateCounterClockwise } from '../singles/rotate.js';\r\n\r\nconst doubles = (boxDrawObj) => {\r\n\tboxDraw(boxDrawObj);\r\n\tconst quadrantDice = roll(2); // 1 = q2. 2 = q3\r\n\tconst styleDice = roll(3); // 1= clone, 2= rotate, 3= reflect\r\n\tconst doubleDice = roll(3); // 1= clone, 2= rotate x2, 3= reflect\r\n\tlet directionDice = 0;\r\n\tlet adjustedMatrix = [];\r\n\r\n\tconst quadrant =\r\n\t\tquadrantDice === 1\r\n\t\t\t? { x: boxDrawObj.drawSectionWidth, y: 0 }\r\n\t\t\t: { x: 0, y: boxDrawObj.drawSectionHeight };\r\n\tconst quadrantDouble =\r\n\t\tquadrantDice === 1\r\n\t\t\t? { x: 0, y: boxDrawObj.drawSectionHeight }\r\n\t\t\t: { x: boxDrawObj.drawSectionWidth, y: 0 };\r\n\r\n\tlet inputNode = new InputNode(\r\n\t\tboxDrawObj.ctx,\r\n\t\tboxDrawObj.ctx2,\r\n\t\tboxDrawObj.matrix,\r\n\t\tboxDrawObj.pixelWidth,\r\n\t\tboxDrawObj.pixelHeight\r\n\t);\r\n\r\n\tswitch (styleDice) {\r\n\t\tcase 1:\r\n\t\t\t//clone\r\n\t\t\tadjustedMatrix = clone(boxDrawObj, quadrant.x, quadrant.y);\r\n\r\n\t\t\tinputNode.matrix = adjustedMatrix;\r\n\r\n\t\t\tboxDraw(inputNode);\r\n\t\t\tbreak;\r\n\t\tcase 2:\r\n\t\t\t//rotate\r\n\t\t\tdirectionDice = roll(2); // 1 = clockwise. 2 = counter clockwise\r\n\t\t\tdirectionDice === 1\r\n\t\t\t\t? (adjustedMatrix = rotateClockwise(\r\n\t\t\t\t\t\tinputNode,\r\n\t\t\t\t\t\tquadrant.x,\r\n\t\t\t\t\t\tquadrant.y\r\n\t\t\t\t  ))\r\n\t\t\t\t: (adjustedMatrix = rotateCounterClockwise(\r\n\t\t\t\t\t\tinputNode,\r\n\t\t\t\t\t\tquadrant.x,\r\n\t\t\t\t\t\tquadrant.y\r\n\t\t\t\t  ));\r\n\r\n\t\t\tinputNode.matrix = adjustedMatrix;\r\n\r\n\t\t\tboxDraw(inputNode);\r\n\t\t\tbreak;\r\n\t\tcase 3:\r\n\t\t\t//reflect\r\n\r\n\t\t\tdirectionDice = roll(2); // 1 = vertical axis reflect. 2 = horizontal axis reflect\r\n\t\t\tdirectionDice === 1\r\n\t\t\t\t? (adjustedMatrix = reflectVerticalAxis(\r\n\t\t\t\t\t\tinputNode,\r\n\t\t\t\t\t\tquadrant.x,\r\n\t\t\t\t\t\tquadrant.y\r\n\t\t\t\t  ))\r\n\t\t\t\t: (adjustedMatrix = reflectHorizontalAxis(\r\n\t\t\t\t\t\tinputNode,\r\n\t\t\t\t\t\tquadrant.x,\r\n\t\t\t\t\t\tquadrant.y\r\n\t\t\t\t  ));\r\n\r\n\t\t\tinputNode.matrix = adjustedMatrix;\r\n\r\n\t\t\tboxDraw(inputNode);\r\n\t\t\tbreak;\r\n\t\tdefault:\r\n\t\t\tconsole.log('error in style dice variable');\r\n\t\t\tbreak;\r\n\t}\r\n\r\n\tlet combinedMatrix = [];\r\n\tquadrantDice === 1\r\n\t\t? (combinedMatrix = combineMatrixTopHalf(\r\n\t\t\t\tboxDrawObj.matrix,\r\n\t\t\t\tadjustedMatrix\r\n\t\t  ))\r\n\t\t: (combinedMatrix = combineMatrixLeftHalf(\r\n\t\t\t\tboxDrawObj.matrix,\r\n\t\t\t\tadjustedMatrix\r\n\t\t  ));\r\n\tlet rotatedMatrix = [];\r\n\tlet reflectedMatrix = [];\r\n\r\n\tinputNode.matrix = combinedMatrix;\r\n\r\n\tswitch (doubleDice) {\r\n\t\tcase 1:\r\n\t\t\t//clone\r\n\r\n\t\t\tboxDraw(inputNode, quadrantDouble.x, quadrantDouble.y);\r\n\t\t\tbreak;\r\n\t\tcase 2: //quadrantDice === 1, combine top\r\n\t\t\t//rotate\r\n\r\n\t\t\trotatedMatrix = rotateClockwise(inputNode);\r\n\t\t\tinputNode.matrix = rotatedMatrix;\r\n\t\t\trotatedMatrix = rotateClockwise(\r\n\t\t\t\tinputNode,\r\n\t\t\t\tquadrantDouble.x,\r\n\t\t\t\tquadrantDouble.y\r\n\t\t\t); // rotate twice\r\n\r\n\t\t\tinputNode.matrix = rotatedMatrix;\r\n\r\n\t\t\tboxDraw(inputNode);\r\n\t\t\tbreak;\r\n\t\tcase 3: // quadrantDice === 1, reflect horizontal : reflect vertical\r\n\t\t\t//reflect\r\n\t\t\treflectedMatrix =\r\n\t\t\t\tquadrantDice === 1\r\n\t\t\t\t\t? reflectHorizontalAxis(\r\n\t\t\t\t\t\t\tinputNode,\r\n\t\t\t\t\t\t\tquadrantDouble.x,\r\n\t\t\t\t\t\t\tquadrantDouble.y\r\n\t\t\t\t\t  )\r\n\t\t\t\t\t: reflectVerticalAxis(\r\n\t\t\t\t\t\t\tinputNode,\r\n\t\t\t\t\t\t\tquadrantDouble.x,\r\n\t\t\t\t\t\t\tquadrantDouble.y\r\n\t\t\t\t\t  );\r\n\r\n\t\t\tinputNode.matrix = reflectedMatrix;\r\n\r\n\t\t\tboxDraw(inputNode);\r\n\r\n\t\t\tbreak;\r\n\r\n\t\tdefault:\r\n\t\t\tconsole.log('error in style dice variable');\r\n\t\t\tbreak;\r\n\t}\r\n};\r\n\r\nexport default doubles;\r\n","import specials from './specials/specials.js';\r\nimport singles from './singles/singles.js';\r\nimport doubles from './doubles/doubles.js';\r\nimport { roll, clear, randomColor } from '../utilities.js';\r\nimport { boxDraw, createPixelMap } from './boxDrawingUtilities.js';\r\n\r\nimport { createCanvasTemplate, createCanvasDraw } from '../utilities.js';\r\n\r\nconst BoxDrawing = (forceDesignObj) => {\r\n\t// if(forceDesignObj)\r\n\tlet { dimensions, boxDrawObj } = forceDesignObj;\r\n\tlet width, height;\r\n\tif (dimensions) {\r\n\t\twidth = dimensions.width;\r\n\t\theight = dimensions.height;\r\n\t}\r\n\tdebugger;\r\n\r\n\tconst canvasWidth = width ? width : 500;\r\n\tconst canvasHeight = height ? height : 500;\r\n\tconst matrix = [];\r\n\tconst boxCount = boxDrawObj.boxCount || 10;\r\n\tconst pixelWidth = canvasWidth / boxCount || 250;\r\n\tconst pixelHeight = canvasHeight / boxCount || 250;\r\n\tconst drawSectionWidth = Math.floor(canvasWidth / 2);\r\n\tconst drawSectionHeight = Math.floor(canvasHeight / 2);\r\n\r\n\tconst primaryToggle = boxDrawObj.primaryToggle || 'default';\r\n\tconst secondaryToggle = boxDrawObj.secondaryToggle || 'default';\r\n\tconst backgroundToggle = boxDrawObj.backgroundToggle || 'default';\r\n\r\n\tconst [canvasTemplate, ctx] = createCanvasTemplate(\r\n\t\tdrawSectionWidth,\r\n\t\tdrawSectionHeight\r\n\t);\r\n\tconst [canvasDraw, ctx2] = createCanvasDraw(canvasWidth, canvasHeight);\r\n\r\n\tswitch (primaryToggle) {\r\n\t\tcase 'default':\r\n\t\t\tboxDrawObj.primaryColor = '#000000';\r\n\t\t\tbreak;\r\n\t\tcase 'random':\r\n\t\t\tboxDrawObj.primaryColor = randomColor();\r\n\t\t\tbreak;\r\n\t\tcase 'choose':\r\n\t\t\t//keep input\r\n\t\t\tbreak;\r\n\t\tdefault:\r\n\t\t\tconsole.log('error in primarytoggle');\r\n\t\t\tboxDrawObj.primaryColor = '#000000';\r\n\t\t\tbreak;\r\n\t}\r\n\r\n\tswitch (secondaryToggle) {\r\n\t\tcase 'default':\r\n\t\tcase 'random':\r\n\t\t\tboxDrawObj.secondaryColor = randomColor(); //new color seed on refresh;\r\n\t\t\tbreak;\r\n\t\tcase 'choose':\r\n\t\t\t//keep input\r\n\t\t\tbreak;\r\n\t\tdefault:\r\n\t\t\tconsole.log('error in secondaryToggle');\r\n\t\t\tboxDrawObj.secondaryColor = randomColor();\r\n\t\t\tbreak;\r\n\t}\r\n\r\n\tswitch (backgroundToggle) {\r\n\t\tcase 'default':\r\n\t\t\tboxDrawObj.backgroundColor = '#ffffff00';\r\n\t\t\tbreak;\r\n\t\tcase 'random':\r\n\t\t\tboxDrawObj.backgroundColor = randomColor();\r\n\t\t\tbreak;\r\n\t\tcase 'choose':\r\n\t\t\t//keep input\r\n\t\t\tbreak;\r\n\t\tdefault:\r\n\t\t\tconsole.log('error in backgroundToggle');\r\n\t\t\tboxDrawObj.backgroundColor = '#ffffff00';\r\n\t\t\tbreak;\r\n\t}\r\n\t//build up input obj\r\n\tboxDrawObj = {\r\n\t\t...boxDrawObj,\r\n\t\tcanvasWidth,\r\n\t\tcanvasHeight,\r\n\t\tmatrix,\r\n\t\tboxCount,\r\n\t\tpixelWidth,\r\n\t\tpixelHeight,\r\n\t\tdrawSectionWidth,\r\n\t\tdrawSectionHeight,\r\n\t\tcanvasTemplate,\r\n\t\tctx,\r\n\t\tcanvasDraw,\r\n\t\tctx2,\r\n\t};\r\n\r\n\tif (boxDrawObj.canvasDraw.getContext) {\r\n\t\t//clear previous matrix\r\n\t\tboxDrawObj.matrix = clear(boxDrawObj);\r\n\t\t//create new matrix\r\n\t\tboxDrawObj.matrix = [...createPixelMap(boxDrawObj)];\r\n\r\n\t\tboxDraw(boxDrawObj); // draw on ctx not ctx2\r\n\r\n\t\tswitch (boxDrawObj.drawStyle || 'random') {\r\n\t\t\tcase 'random':\r\n\t\t\t\tlet dice = roll(3);\r\n\t\t\t\tswitch (dice) {\r\n\t\t\t\t\tcase 1:\r\n\t\t\t\t\t\tspecials(boxDrawObj);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 2:\r\n\t\t\t\t\t\tsingles(boxDrawObj);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 3:\r\n\t\t\t\t\t\tdoubles(boxDrawObj);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\tconsole.log('error in layout variable no dice');\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tspecials(boxDrawObj);\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t} else {\r\n\t\talert('You need Safari or Firefox 1.5+ to see this demo.');\r\n\t}\r\n\t//convert canvas to an image\r\n\t//return image\r\n\t// return ctx2;\r\n\r\n\tconst dataURL = boxDrawObj.canvasDraw.toDataURL('image/png');\r\n\treturn dataURL;\r\n};\r\n\r\nexport { BoxDrawing };\r\n","import { roll } from '../../utilities.js';\r\nconst getStrokeWidth = (shapeCount) => {\r\n    let dice;\r\n    switch (shapeCount) {\r\n        case shapeCount > 100:\r\n            dice = 1;\r\n            break;\r\n        case shapeCount > 90:\r\n            dice = roll(2);\r\n            break;\r\n        case shapeCount > 60:\r\n            dice = roll(3);\r\n            break;\r\n        case shapeCount > 40:\r\n            dice = roll(4);\r\n            break;\r\n        default:\r\n            dice = roll(5);\r\n            break;\r\n    }\r\n    return dice;\r\n};\r\n\r\nexport default getStrokeWidth;\r\n","import { randomColor, lightColor, darkColor } from '../../utilities.js';\r\n\r\nconst getColorType = (inputs) => {\r\n    if (inputs.clearSwitch) {\r\n        return randomColor();\r\n    }\r\n\r\n    if (inputs.blendMode === 'screen') {\r\n        return darkColor(inputs.shapeCount);\r\n    } else if (inputs.blendMode === 'multiply') {\r\n        return lightColor(inputs.shapeCount);\r\n    } else {\r\n        return randomColor();\r\n    }\r\n    // return inputs;\r\n};\r\nexport default getColorType;\r\n","import { coinFlip } from '../../utilities.js';\r\nimport getStrokeWidth from './_getStrokeWidth.js';\r\nimport getColorType from './_getColorType.js';\r\n\r\nconst checkIndividualSwitches = (type, inputs) => {\r\n    if (!type) {\r\n        console.log('error in checkIndividual switch, no type');\r\n        return inputs;\r\n    }\r\n    if (type === 'clear') {\r\n        if (inputs.clearIndividual) {\r\n            inputs.clearSwitch = coinFlip();\r\n        }\r\n    }\r\n    if (type === 'fill') {\r\n        // if (inputs.fillIndividual) {\r\n        //     inputs.fillSwitch = coinFlip();\r\n        // }\r\n        if (inputs.fillSwitch) {\r\n            if (inputs.fillColorIndividual) {\r\n                inputs.fillColor = getColorType(inputs);\r\n            }\r\n        }\r\n    }\r\n    if (type === 'stroke') {\r\n        // if (inputs.strokeIndividual) {\r\n        //     inputs.strokeSwitch = coinFlip();\r\n        // }\r\n        if (inputs.strokeSwitch) {\r\n            if (inputs.strokeColorIndividual) {\r\n                inputs.strokeColor = getColorType(inputs);\r\n            }\r\n            if (inputs.strokeWidthIndividual) {\r\n                inputs.strokeWidth = getStrokeWidth(inputs.shapeCount);\r\n            }\r\n        }\r\n    }\r\n\r\n    return inputs;\r\n};\r\nexport default checkIndividualSwitches;\r\n","// import { ctx2 } from '../../MandalaDrawing.js';\r\n// import { roll } from '../../../utilities.js';\r\n\r\nconst starburst = (inputs) => {\r\n\t//starburst\r\n\tinputs.ctx2.save();\r\n\tinputs.ctx2.moveTo(inputs.pathRadius - inputs.shapeSize, 0);\r\n\tinputs.ctx2.lineTo(inputs.shapeSize, 0);\r\n\tinputs.ctx2.restore();\r\n\t//starburst\r\n};\r\nconst slant = (inputs) => {\r\n\t//slant\r\n\tinputs.ctx2.save();\r\n\tinputs.ctx2.moveTo(\r\n\t\tinputs.pathRadius - inputs.shapeSize,\r\n\t\tinputs.pathRadius - inputs.shapeSize\r\n\t);\r\n\tinputs.ctx2.lineTo(-inputs.shapeSize / 2, inputs.shapeSize / 2);\r\n\tinputs.ctx2.restore();\r\n\t// ctx2.stroke();\r\n\t//slant\r\n};\r\n\r\nexport { starburst, slant };\r\n","// import { ctx2 } from '../../mandalaDrawing.js';\r\nimport checkIndividualSwitches from '../_checkIndividualSwitches.js';\r\nimport { slant, starburst } from './drawLine.js';\r\n\r\nconst clearLoop = (inputs) => {\r\n\tconst shapeFunction = inputs.shapeArr[inputs.currentLoop - 1];\r\n\tif (shapeFunction === slant || shapeFunction === starburst) return;\r\n\r\n\tfor (let clearShape = 1; clearShape <= inputs.shapeCount; clearShape++) {\r\n\t\tinputs = checkIndividualSwitches('clear', inputs);\r\n\r\n\t\tinputs.ctx2.globalCompositeOperation = 'destination-out';\r\n\t\tinputs.ctx2.beginPath();\r\n\t\tshapeFunction(inputs);\r\n\t\tinputs.ctx2.fillStyle = inputs.color;\r\n\t\tinputs.ctx2.fill();\r\n\t\tinputs.ctx2.closePath();\r\n\t\tinputs.ctx2.globalCompositeOperation = 'source-over';\r\n\t\tinputs.ctx2.rotate((2 * Math.PI) / inputs.shapeCount);\r\n\t}\r\n};\r\n\r\nexport default clearLoop;\r\n","// import { ctx2 } from '../../mandalaDrawing.js';\r\nimport checkIndividualSwitches from '../_checkIndividualSwitches.js';\r\nimport { slant, starburst } from './drawLine.js';\r\n\r\nconst fillLoop = (inputs) => {\r\n\tconst shapeFunction = inputs.shapeArr[inputs.currentLoop - 1];\r\n\tif (shapeFunction === slant || shapeFunction === starburst) return;\r\n\tfor (let fillShape = 1; fillShape <= inputs.shapeCount; fillShape++) {\r\n\t\tinputs = checkIndividualSwitches('fill', inputs);\r\n\r\n\t\tinputs.ctx2.globalCompositeOperation = inputs.blendMode; // great for clear first\r\n\t\t// ctx2.globalCompositeOperation = 'multiply'; // great for clear first\r\n\t\t// ctx2.globalCompositeOperation = 'screen'; // also good option for both\r\n\t\t// ctx2.globalCompositeOperation = 'difference'; // cool chaos option both ways\r\n\t\t// ctx2.globalCompositeOperation = inputs.blendMode || 'source-over';\r\n\t\t// ctx2.globalCompositeOperation = 'source-over';\r\n\t\tinputs.ctx2.beginPath();\r\n\t\tshapeFunction(inputs);\r\n\t\tinputs.ctx2.fillStyle = inputs.fillColor;\r\n\t\tinputs.ctx2.fill();\r\n\t\tinputs.ctx2.closePath();\r\n\t\tinputs.ctx2.globalCompositeOperation = 'source-over';\r\n\t\tinputs.ctx2.rotate((2 * Math.PI) / inputs.shapeCount);\r\n\t}\r\n};\r\n\r\nexport default fillLoop;\r\n","// import { ctx2 } from '../../mandalaDrawing.js';\r\nimport checkIndividualSwitches from '../_checkIndividualSwitches.js';\r\n\r\nconst strokeLoop = (inputs) => {\r\n\tconst shapeFunction = inputs.shapeArr[inputs.currentLoop - 1];\r\n\r\n\tfor (let strokeShape = 1; strokeShape <= inputs.shapeCount; strokeShape++) {\r\n\t\tinputs = checkIndividualSwitches('stroke', inputs);\r\n\r\n\t\tinputs.ctx2.globalCompositeOperation = 'source-over';\r\n\t\tinputs.ctx2.beginPath();\r\n\t\tshapeFunction(inputs);\r\n\r\n\t\tinputs.ctx2.lineWidth = inputs.strokeWidth;\r\n\t\tinputs.ctx2.strokeStyle = inputs.strokeColor;\r\n\t\tinputs.ctx2.stroke();\r\n\t\tinputs.ctx2.closePath();\r\n\t\tinputs.ctx2.globalCompositeOperation = 'source-over';\r\n\t\tinputs.ctx2.rotate((2 * Math.PI) / inputs.shapeCount);\r\n\t}\r\n};\r\n// ctx2.beginPath();\r\n// drawCircle(shapeSize, pathRadius);\r\n// ctx2.lineWidth = 1;\r\n// ctx2.strokeStyle = randomColorValue;\r\n// ctx2.stroke();\r\n// ctx2.closePath();\r\n// ctx2.rotate((2 * Math.PI) / inputs.shapeCount);\r\n\r\nexport default strokeLoop;\r\n","import { roll, rollRange, randomColor, lightColor } from '../../utilities.js';\r\n\r\nimport checkIndividualSwitches from '../functionPool/_checkIndividualSwitches.js';\r\n\r\n// import { ctx2, halfWidth, halfHeight } from '../mandalaDrawing.js';\r\n\r\nimport clearLoop from '../functionPool/draw/clearLoop.js';\r\nimport fillLoop from '../functionPool/draw/fillLoop.js';\r\nimport strokeLoop from '../functionPool/draw/strokeLoop.js';\r\n\r\nconst loop = (inputs) => {\r\n\t//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ check clear fill stroke ~~~~~~~~~~~\r\n\r\n\tinputs.ctx2.save();\r\n\tinputs.ctx2.translate(inputs.halfWidth, inputs.halfHeight); // move to center\r\n\r\n\tinputs.clearSwitch && clearLoop(inputs);\r\n\r\n\tinputs.fillSwitch && fillLoop(inputs);\r\n\r\n\tinputs.strokeSwitch && strokeLoop(inputs);\r\n\r\n\tinputs.ctx2.restore();\r\n\t//******MOVE CENTER POINT BACK*********** */\r\n\t//******ENDING DRAW*********** */\r\n\t//******ENDING DRAW*********** */\r\n\t//******ENDING DRAW*********** */\r\n\t//******ENDING DRAW*********** */\r\n\treturn inputs;\r\n};\r\n\r\nexport default loop;\r\n","// import { ctx2, width, height } from '../../mandalaDrawing.js';\r\n\r\nconst clearDrawingArea = (inputs) => {\r\n\tinputs.ctx2.clearRect(0, 0, inputs.width, inputs.height);\r\n};\r\n\r\nexport default clearDrawingArea;\r\n","import { rollRange } from '../../utilities.js';\r\nimport getColorType from './_getColorType.js';\r\n\r\nconst getBackgroundStats = (inputs) => {\r\n    inputs.shapeCount = rollRange(inputs.minShapeCount, inputs.maxShapeCount);\r\n    inputs.pathRadius = rollRange(inputs.maxPathRadius, inputs.maxFullPath);\r\n    inputs.shapeSize = inputs.pathRadius;\r\n    // //****************INSIDE FIRST ROLL****************\r\n    // //****************INSIDE FIRST ROLL****************\r\n    // console.log(inputs);\r\n    // debugger;\r\n\r\n    if (inputs.customBackgroundSwitch) {\r\n        inputs.fillColor = inputs.customBackgroundColor;\r\n        inputs.strokeColor = inputs.customStrokeColor;\r\n    } else {\r\n        inputs.fillColor = getColorType(inputs);\r\n        inputs.strokeColor = getColorType(inputs);\r\n    }\r\n\r\n    inputs.fillSwitch = true;\r\n    inputs.backgroundLoopSwitch = false; // switch off\r\n    return inputs;\r\n};\r\nexport default getBackgroundStats;\r\n","import { lightColor, coinFlip, roll } from '../../utilities.js';\r\nimport getStrokeWidth from './_getStrokeWidth.js';\r\nimport getColorType from './_getColorType.js';\r\n\r\nconst checkLoopSwitches = (inputs) => {\r\n    //clear\r\n    if (inputs.clearRandomLoops) {\r\n        inputs.clearSwitch = coinFlip();\r\n    }\r\n    //clear\r\n    //fill\r\n    if (inputs.FillRandomLoops) {\r\n        inputs.fillSwitch = coinFlip();\r\n    }\r\n    if (inputs.fillSwitch) {\r\n        if (inputs.fillColorRandomLoops) {\r\n            inputs.fillColor = getColorType(inputs);\r\n        }\r\n    }\r\n    //fill\r\n    //stroke\r\n    if (inputs.strokeRandomLoops) {\r\n        inputs.strokeSwitch = coinFlip();\r\n    }\r\n    if (inputs.strokeSwitch) {\r\n        if (inputs.strokeColorRandomLoops) {\r\n            inputs.strokeColor = getColorType(inputs);\r\n            //chance for randomIndividual color to be a single loop choice\r\n            inputs.strokeColorIndividual = roll(10) === 1 ? true : false;\r\n        }\r\n        if (inputs.strokeWidthRandomLoops) {\r\n            inputs.strokeWidth = getStrokeWidth(inputs.shapeCount);\r\n            //chance for randomIndividual width to be a single loop choice\r\n            inputs.strokeWidthIndividual = roll(10) === 1 ? true : false;\r\n        }\r\n    }\r\n    //stroke\r\n    //individual\r\n    if (inputs.strokeIndividual) {\r\n        inputs.strokeSwitch = true;\r\n    }\r\n    if (inputs.fillIndividual) {\r\n        inputs.fillSwitch = true;\r\n    }\r\n    //individual\r\n\r\n    return inputs;\r\n};\r\nexport default checkLoopSwitches;\r\n","import { rollRange } from '../../utilities.js';\r\n\r\nconst checkShapeSpacing = (inputs) => {\r\n    let newPath = inputs.pathRadius;\r\n    let improperSpacing = inputs.shapeSize - inputs.pathRadius;\r\n\r\n    while (improperSpacing >= -5 && improperSpacing <= 5) {\r\n        console.log('improperspacing while loop, changing pathRadius variable');\r\n\r\n        newPath = rollRange(inputs.minPathRadius, inputs.maxPathRadius);\r\n        improperSpacing = newPath - inputs.pathRadius;\r\n    }\r\n    inputs.pathRadius = newPath;\r\n    return inputs;\r\n};\r\n\r\nexport default checkShapeSpacing;\r\n","import { rollRange, lightColor, coinFlip } from '../../utilities.js';\r\nimport checkLoopSwitches from './_checkLoopSwitches.js';\r\n\r\nimport checkShapeSpacing from './_checkShapeSpacing.js';\r\n\r\nconst getFollowingLoopStats = (inputs) => {\r\n    //****************INSIDE OTHER ROLLS****************\r\n    //          things changing per loop\r\n    //****************INSIDE OTHER ROLLS****************\r\n\r\n    inputs.pathRadius = rollRange(inputs.minPathRadius, inputs.maxPathRadius);\r\n    inputs.shapeSize = inputs.maxShapeSize * inputs.percent;\r\n    inputs.shapeCount = rollRange(inputs.minShapeCount, inputs.maxShapeCount);\r\n    inputs = checkShapeSpacing(inputs);\r\n\r\n    //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ check clear fill stroke ~~~~~~~~~~~\r\n    inputs = checkLoopSwitches(inputs);\r\n    //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ check clear fill stroke ~~~~~~~~~~~\r\n    if (inputs.customBackgroundSwitch) {\r\n        inputs.fillColor = inputs.customBackgroundColor;\r\n        inputs.strokeColor = inputs.customStrokeColor;\r\n    }\r\n\r\n    return inputs;\r\n};\r\n\r\nexport default getFollowingLoopStats;\r\n","// import { ctx2 } from '../../MandalaDrawing.js';\r\n\r\nconst square = (inputs) => {\r\n\t// ctx.rect(x, y, width, height);\r\n\tinputs.ctx2.rect(\r\n\t\tinputs.shapeSize / 2,\r\n\t\tinputs.pathRadius,\r\n\t\t-inputs.shapeSize,\r\n\t\t-inputs.shapeSize\r\n\t);\r\n};\r\nconst diamond = (inputs) => {\r\n\tinputs.ctx2.save();\r\n\tinputs.ctx2.rotate(Math.PI / 4);\r\n\tinputs.ctx2.rect(\r\n\t\tinputs.pathRadius,\r\n\t\tinputs.pathRadius,\r\n\t\t-inputs.shapeSize,\r\n\t\t-inputs.shapeSize\r\n\t);\r\n\tinputs.ctx2.restore();\r\n};\r\n\r\nexport { square, diamond };\r\n","// import { ctx2 } from '../../MandalaDrawing.js';\r\n\r\nconst circle = (inputs) => {\r\n\tinputs.ctx2.arc(\r\n\t\t0,\r\n\t\tinputs.pathRadius,\r\n\t\tinputs.shapeSize,\r\n\t\t0,\r\n\t\t2 * Math.PI,\r\n\t\tfalse\r\n\t);\r\n};\r\n\r\nconst oval = (inputs) => {\r\n\t// ctx.ellipse(x, y, radiusX, radiusY, rotation, startAngle, endAngle [, anticlockwise]);\r\n\tinputs.ctx2.ellipse(\r\n\t\t0,\r\n\t\tinputs.pathRadius,\r\n\t\tinputs.shapeSize / 5,\r\n\t\tinputs.shapeSize,\r\n\t\t0,\r\n\t\t0,\r\n\t\t2 * Math.PI\r\n\t);\r\n};\r\n\r\nexport { circle, oval };\r\n","import { roll } from '../../utilities.js';\r\nimport { slant, starburst } from './draw/drawLine.js';\r\nimport { square, diamond } from './draw/drawSquare.js';\r\nimport { circle, oval } from './draw/drawEllipse.js';\r\n\r\nconst getShapeFunction = (customShape, forceNumber) => {\r\n\tconst diceRange = 3; // length of cases when ready\r\n\tlet dice;\r\n\t//forceNumber should increment, lets the invoke call the case\r\n\tif (forceNumber) {\r\n\t\twhile (forceNumber && forceNumber > diceRange) {\r\n\t\t\tforceNumber = forceNumber - diceRange;\r\n\t\t}\r\n\t\tdice = forceNumber;\r\n\t} else if (customShape === 'noLine') {\r\n\t\tdice = roll(2);\r\n\t} else {\r\n\t\tdice = roll(3);\r\n\t}\r\n\tswitch (dice) {\r\n\t\tcase 1: // draw ellipse\r\n\t\t\tconst ellipseDice = roll(2);\r\n\t\t\t// ellipseDice = 2;\r\n\t\t\tswitch (ellipseDice) {\r\n\t\t\t\tcase 1:\r\n\t\t\t\t\treturn circle;\r\n\t\t\t\tcase 2:\r\n\t\t\t\t\treturn oval;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tconsole.log('error in getShapeFunction ellipse');\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t// return drawCircle;\r\n\t\tcase 2: // draw square\r\n\t\t\tlet squareDice = roll(2);\r\n\t\t\tswitch (squareDice) {\r\n\t\t\t\tcase 1:\r\n\t\t\t\t\treturn square;\r\n\t\t\t\tcase 2:\r\n\t\t\t\t\treturn diamond;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tconsole.log('error in getShapeFunction square');\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\tcase 3: // draw line\r\n\t\t\tlet lineDice = roll(2);\r\n\t\t\tswitch (lineDice) {\r\n\t\t\t\tcase 1:\r\n\t\t\t\t\treturn starburst;\r\n\t\t\t\tcase 2:\r\n\t\t\t\t\treturn slant;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tconsole.log('error in getShapeFunction line');\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\tdefault:\r\n\t\t\tconsole.log('error in getShapeType');\r\n\t\t\treturn;\r\n\t}\r\n};\r\nexport default getShapeFunction;\r\n","import { roll } from '../../utilities.js';\r\nimport getShapeFunction from './_getShapeFunction.js';\r\n\r\nconst getShapeArr = (loopCount, customShape, forceNumber) => {\r\n\tlet shapeStyleDice;\r\n\r\n\tif (forceNumber) {\r\n\t\tif (forceNumber === 'random') shapeStyleDice = 1;\r\n\t\tif (forceNumber === 'same') shapeStyleDice = 2;\r\n\t\tif (forceNumber === 'increment') shapeStyleDice = 3;\r\n\t} else {\r\n\t\tshapeStyleDice = roll(3);\r\n\t}\r\n\tlet shapeArr = [];\r\n\tswitch (shapeStyleDice) {\r\n\t\tcase 1:\r\n\t\t\tfor (let loop = 0; loop < loopCount; loop++) {\r\n\t\t\t\tshapeArr.push(getShapeFunction(customShape));\r\n\t\t\t}\r\n\t\t\tbreak;\r\n\t\tcase 2:\r\n\t\t\tconst sameShape = getShapeFunction(customShape);\r\n\t\t\tfor (let loop = 0; loop < loopCount; loop++) {\r\n\t\t\t\tshapeArr.push(sameShape);\r\n\t\t\t}\r\n\t\t\tbreak;\r\n\t\tcase 3:\r\n\t\t\tfor (let loop = 0; loop < loopCount; loop++) {\r\n\t\t\t\tshapeArr.push(getShapeFunction(customShape, loop + 1));\r\n\t\t\t}\r\n\t\t\tbreak;\r\n\t\tdefault:\r\n\t\t\tconsole.log('error in getShapeArr');\r\n\t\t\tbreak;\r\n\t}\r\n\treturn shapeArr;\r\n};\r\n\r\nexport default getShapeArr;\r\n","import getColorType from './_getColorType.js';\r\n\r\nconst checkResetBackgroundSwitches = (inputs) => {\r\n    if (inputs.clearAll) {\r\n        inputs.clearSwitch = true;\r\n    } else {\r\n        inputs.clearSwitch = false;\r\n    }\r\n    if (inputs.fillAll) {\r\n        inputs.fillSwitch = true;\r\n\r\n        if (inputs.fillColorAll) {\r\n            inputs.fillColor = getColorType(inputs);\r\n        }\r\n    } else {\r\n        inputs.fillSwitch = false;\r\n    }\r\n    if (inputs.strokeAll) {\r\n        inputs.strokeSwitch = true;\r\n\r\n        if (inputs.strokeColorAll) {\r\n            inputs.strokeColor = getColorType(inputs);\r\n        }\r\n        if (inputs.strokeWidthAll) {\r\n            inputs.strokeWidth = 1;\r\n            //stroke all needs 1 because some loops may have high shape count\r\n        }\r\n    } else {\r\n        inputs.strokeSwitch = false;\r\n    }\r\n\r\n    return inputs;\r\n};\r\nexport default checkResetBackgroundSwitches;\r\n","import loop from './special/loop.js';\r\n// import getInputStats from './functionPool/_getInputStats.js';\r\nimport clearDrawingArea from './functionPool/draw/clearDrawingArea.js';\r\nimport getBackgroundLoopStats from './functionPool/_getBackgroundLoopStats.js';\r\n// import getInitLoopStats from '../functionPool/_getInitLoopStats.js';\r\nimport getFollowingLoopStats from './functionPool/_getFollowingLoopStats.js';\r\nimport getShapeArr from './functionPool/_getShapeArr.js';\r\n// import getDrawType from './functionPool/_getDrawType.js';\r\nimport checkBackgroundSwitches from './functionPool/_checkBackgroundSwitches.js';\r\n// import getBlendMode from './functionPool/_getBlendMode.js';\r\n\r\nconst initMandalaDraw = (inputStats) => {\r\n\t// clear canvas\r\n\tclearDrawingArea(inputStats);\r\n\t// clear canvas\r\n\t//|||||||||||||||||||||||||||||||||stats|||||||||||||||||||\r\n\t//init stats\r\n\r\n\t// let inputStats = getInputStats();\r\n\r\n\t//'strokeOnly','fillOnly','fillAndStroke','individual','chaos','outline'\r\n\t// inputStats = getBlendMode(inputStats);\r\n\t//overrides\r\n\t// inputStats = getDrawType(inputStats, 'outline');\r\n\t// inputStats = getDrawType(inputStats);\r\n\t//build arr\r\n\t// inputStats.shapeArr = getShapeArr(inputStats);\r\n\r\n\t//start looping\r\n\tfor (\r\n\t\tlet currentLoop = inputStats.loopCount;\r\n\t\tcurrentLoop > 0;\r\n\t\tcurrentLoop--\r\n\t) {\r\n\t\tinputStats.currentLoop = currentLoop;\r\n\t\tinputStats.percent = currentLoop / inputStats.loopCount;\r\n\t\tif (!inputStats.customShape) {\r\n\t\t\tinputStats.maxShapeCount = Math.ceil(\r\n\t\t\t\tinputStats.useHalfSize * inputStats.percent\r\n\t\t\t);\r\n\t\t}\r\n\t\tif (inputStats.backgroundLoopSwitch) {\r\n\t\t\tinputStats = getBackgroundLoopStats(inputStats);\r\n\t\t\t// } else if (inputStats.initLoopSwitch) {\r\n\t\t\t//     inputStats = getInitLoopStats(inputStats);\r\n\t\t} else {\r\n\t\t\tinputStats = getFollowingLoopStats(inputStats);\r\n\t\t}\r\n\t\t//call loop\r\n\t\t// console.log({ ...inputStats });\r\n\t\t// console.log(inputStats.pathRadius, inputStats.shapeSize);\r\n\t\t// debugger;\r\n\t\tinputStats = loop(inputStats);\r\n\t\t//reset loop stats\r\n\t\tif (inputStats.percent === 1) {\r\n\t\t\tinputStats = checkBackgroundSwitches(inputStats);\r\n\t\t}\r\n\t}\r\n};\r\n\r\nexport default initMandalaDraw;\r\n","// #################################### idea ######################################\r\n// stacking effect when you use rollRange(0, threshRadius50) for every pass\r\n\r\n// move this to edges for one of the effects being on the sides off center\r\n// ctx2.translate(halfWidth, halfHeight)\r\n\r\n// outer circle\r\n// ctx2.translate(halfWidth, halfHeight);\r\n// drawCircle(width, halfHeight);\r\n// drawCircle(halfWidth, height);\r\n//\r\n// top left is center inside begin path, bot right web outside of beginpath\r\n// ctx2.translate(0, 0);\r\n// drawCircle(width, height);\r\n// #################################### idea ######################################\r\n\r\nclass PointNode {\r\n\tconstructor(x, y) {\r\n\t\tthis.x = x;\r\n\t\tthis.y = y;\r\n\t}\r\n}\r\n\r\n// const randomStartingPoint = () => {\r\n// \tconst dice = roll(halfWidth);\r\n// \treturn new PointNode(dice, halfWidth);\r\n// };\r\n\r\nconst findHypotenuse = (width, height) => {\r\n\tconst hypotenuse = Math.sqrt(Math.pow(width, 2) + Math.pow(height, 2));\r\n\treturn Math.round(hypotenuse);\r\n};\r\n\r\n// const mandalaDraw = () => {\r\n// \t// const mandalaType = roll(5);\r\n// \tconst mandalaType = 1;\r\n// \tswitch (mandalaType) {\r\n// \t\tcase 1:\r\n// \t\t\tspecialShape();\r\n// \t\t\tbreak;\r\n// \t\tcase 2:\r\n// \t\t\toneShape();\r\n// \t\t\tbreak;\r\n// \t\tcase 3:\r\n// \t\t\tmultiShapes();\r\n// \t\t\tbreak;\r\n// \t\tdefault:\r\n// \t\t\tbreak;\r\n// \t}\r\n\r\n// };\r\n\r\nexport {\r\n\tPointNode,\r\n\t// mandalaDraw,\r\n\tfindHypotenuse,\r\n};\r\n","import { roll } from '../../utilities.js';\r\n\r\nconst getBlendMode = () => {\r\n\t// debugger;\r\n\t// const blends = ['source-over', 'screen', 'difference', 'multiply'];\r\n\t// if (inputs.blendMode && blends.includes(inputs.blendMode)) return;\r\n\r\n\tlet blend;\r\n\tconst dice = roll(3);\r\n\tswitch (dice) {\r\n\t\tcase 1:\r\n\t\t\tblend = 'difference';\r\n\t\t\tbreak;\r\n\t\tcase 2:\r\n\t\t\tblend = 'screen';\r\n\t\t\tbreak;\r\n\t\tcase 3:\r\n\t\t\tblend = 'multiply';\r\n\t\t\tbreak;\r\n\t\t// case 4:\r\n\t\t//     blend = 'source-over';\r\n\t\t//     break;\r\n\t\tdefault:\r\n\t\t\tconsole.log('error in getBlendMode');\r\n\t\t\tbreak;\r\n\t}\r\n\r\n\treturn blend;\r\n};\r\n\r\nexport default getBlendMode;\r\n","// import { roll, randomColor, lightColor } from '../../utilities.js';\r\n// import { halfWidth, halfHeight, height, width } from '../mandalaDrawing.js';\r\nimport { findHypotenuse } from '../mandalaDrawingUtilities.js';\r\nimport getBlendMode from './_getBlendMode.js';\r\nimport getShapeArr from './_getShapeArr.js';\r\n\r\nconst getInputStats = (mandalaDrawObj) => {\r\n\t//|||||||||||||||||||||||||||||||||stats|||||||||||||||||||\r\n\t// console.log(mandalaDrawObj);\r\n\tconst { canvasWidth, canvasHeight } = mandalaDrawObj;\r\n\tlet inputObj = {\r\n\t\twidth: canvasWidth || 500,\r\n\t\theight: canvasHeight || 500,\r\n\t\thalfWidth: Math.floor(canvasWidth / 2) || 250,\r\n\t\thalfHeight: Math.floor(canvasHeight / 2) || 250,\r\n\r\n\t\tloopCount: 5, //roll(5)\r\n\t\tcurrentLoop: null,\r\n\t\tpercent: null, // created in loop\r\n\r\n\t\tbackgroundLoopSwitch: true,\r\n\t\tinitLoopSwitch: false,\r\n\r\n\t\tcustomBackgroundSwitch: false,\r\n\t\tcustomBackgroundColor: null,\r\n\t\tcustomStrokeColor: null,\r\n\t\tcustomShape: null,\r\n\r\n\t\tclearSwitch: false,\r\n\t\tclearAll: false,\r\n\t\tclearRandomLoops: false,\r\n\t\tclearIndividual: false,\r\n\r\n\t\tdrawType: null,\r\n\r\n\t\tfillSwitch: false,\r\n\t\tfillAll: false,\r\n\t\tfillRandomLoops: false,\r\n\t\tfillIndividual: false,\r\n\t\tfillColor: null,\r\n\t\tfillColorAll: false,\r\n\t\tfillColorRandomLoops: false,\r\n\t\tfillColorIndividual: false,\r\n\r\n\t\tstrokeSwitch: false,\r\n\t\tstrokeAll: false,\r\n\t\tstrokeRandomLoops: false,\r\n\t\tstrokeIndividual: false,\r\n\t\tstrokeColor: null,\r\n\t\tstrokeColorAll: false,\r\n\t\tstrokeColorRandomLoops: false,\r\n\t\tstrokeColorIndividual: false,\r\n\t\tstrokeWidth: 1,\r\n\t\tstrokeWidthAll: false,\r\n\t\tstrokeWidthRandomLoops: false,\r\n\t\tstrokeWidthIndividual: false,\r\n\r\n\t\tuseSize: canvasWidth > canvasHeight ? canvasWidth : canvasHeight,\r\n\t\tuseHalfSize: null,\r\n\t\tmaxFullPath: findHypotenuse(canvasWidth, canvasHeight),\r\n\r\n\t\tpathRadius: null,\r\n\t\tminPathRadius: 20,\r\n\t\tmaxPathRadius: null,\r\n\t\tminShapeCount: 4,\r\n\t\tmaxShapeCount: 200,\r\n\t\tmaxShapeSize: 200,\r\n\r\n\t\tshapeCount: null, // default, randomize\r\n\t\tshapeSize: null, //default, shape size needs to be adjusted based on path\r\n\t\tshapeArr: null,\r\n\r\n\t\tblendMode: getBlendMode(), // have to find in loop\r\n\r\n\t\t...mandalaDrawObj, // override input stats\r\n\t};\r\n\tinputObj.useHalfSize = inputObj.useSize / 2;\r\n\tinputObj.maxPathRadius = findHypotenuse(\r\n\t\tinputObj.halfWidth,\r\n\t\tinputObj.halfHeight\r\n\t);\r\n\tinputObj.shapeArr = getShapeArr(inputObj.loopCount, inputObj.customShape);\r\n\r\n\t// console.log(inputObj.shapeArr);\r\n\t// debugger;\r\n\treturn inputObj;\r\n};\r\n\r\nexport default getInputStats;\r\n","import { createCanvasDraw } from '../utilities.js';\r\nimport initMandalaDraw from './initMandalaDraw.js';\r\nimport getInputStats from './functionPool/_getInputStats.js';\r\nimport getDrawType from './functionPool/_getDrawType.js';\r\n\r\nconst MandalaDrawing = (forceDesignObj) => {\r\n\tlet { dimensions, mandalaDrawObj } = forceDesignObj;\r\n\tlet width, height;\r\n\tif (dimensions) {\r\n\t\twidth = dimensions.width;\r\n\t\theight = dimensions.height;\r\n\t}\r\n\r\n\tconst canvasWidth = width ? width : 500;\r\n\tconst canvasHeight = height ? height : 500;\r\n\tconst [canvasDraw, ctx2] = createCanvasDraw(canvasWidth, canvasHeight);\r\n\r\n\tmandalaDrawObj = {\r\n\t\t...mandalaDrawObj,\r\n\t\tcanvasWidth,\r\n\t\tcanvasHeight,\r\n\t\tcanvasDraw,\r\n\t\tctx2,\r\n\t};\r\n\t//get and place stats\r\n\tlet inputStats = getInputStats(mandalaDrawObj);\r\n\t//build arr\r\n\tinputStats = getDrawType(inputStats);\r\n\r\n\tinitMandalaDraw(inputStats);\r\n\r\n\t//convert canvas to an image\r\n\t//return image\r\n\t// return ctx2;\r\n\tconst dataURL = mandalaDrawObj.canvasDraw.toDataURL('image/png');\r\n\treturn dataURL;\r\n};\r\n\r\nexport { MandalaDrawing };\r\n","import RandomDrawing from './randomDrawing.js';\r\nimport { BoxDrawing } from './boxDrawing/BoxDrawing.js';\r\nimport { MandalaDrawing } from './mandalaDrawing/MandalaDrawing.js';\r\n\r\nconst randomInterface = {\r\n    RandomDrawing,\r\n    BoxDrawing,\r\n    MandalaDrawing,\r\n};\r\n\r\nexport default randomInterface;\r\n","import { roll } from './utilities.js';\r\nimport { BoxDrawing } from './boxDrawing/BoxDrawing.js';\r\nimport { MandalaDrawing } from './mandalaDrawing/MandalaDrawing.js';\r\n\r\nconst RandomDrawing = (forceDesignObj) => {\r\n\tconst dice = roll(2);\r\n\tlet returnRandomDrawing;\r\n\tswitch (dice) {\r\n\t\tcase 1:\r\n\t\t\treturnRandomDrawing = BoxDrawing;\r\n\t\t\tbreak;\r\n\t\tcase 2:\r\n\t\t\treturnRandomDrawing = MandalaDrawing;\r\n\t\t\tbreak;\r\n\t\tdefault:\r\n\t\t\tconsole.log('error in randomDraw random dice');\r\n\t\t\tbreak;\r\n\t}\r\n\treturn returnRandomDrawing(forceDesignObj);\r\n};\r\n\r\nexport default RandomDrawing;\r\n","import randomInterface from './codeBank/randomInterface.js';\r\n\r\nconst BoxDrawing = randomInterface.BoxDrawing;\r\nconst MandalaDrawing = randomInterface.MandalaDrawing;\r\nconst RandomDrawing = randomInterface.RandomDrawing;\r\n\r\nlet sequence = [];\r\n\r\nconst getSequence = (length) => {\r\n\tif (sequence.length > length) {\r\n\t\tsequence.shift();\r\n\t}\r\n\tconst image = sequence[sequence.length - 1];\r\n\tconsole.log(image);\r\n\treturn image;\r\n};\r\n\r\nconst randomDraw = (forceDesignObj = {}) => {\r\n\tconst { typeOfDrawer } = forceDesignObj;\r\n\tif (!forceDesignObj.boxDrawObj) {\r\n\t\tforceDesignObj.boxDrawObj = {};\r\n\t}\r\n\tif (!forceDesignObj.mandalaDrawObj) {\r\n\t\tforceDesignObj.mandalaDrawObj = {};\r\n\t}\r\n\tswitch (typeOfDrawer) {\r\n\t\tcase 'boxDraw':\r\n\t\t\tconst box = BoxDrawing(forceDesignObj);\r\n\t\t\tsequence.push(box);\r\n\t\t\treturn;\r\n\t\tcase 'mandalaDraw':\r\n\t\t\tconst mandala = MandalaDrawing(forceDesignObj);\r\n\t\t\tsequence.push(mandala);\r\n\t\t\treturn;\r\n\t\tdefault:\r\n\t\t\tconst random = RandomDrawing(forceDesignObj);\r\n\t\t\tsequence.push(random);\r\n\t\t\treturn;\r\n\t}\r\n};\r\n\r\nexport { randomDraw, getSequence };\r\n","import React, { useState, useEffect } from 'react';\nimport Nav from './components/Nav';\nimport CodeInjector from './components/CodeInjector';\nimport Controls from './components/Controls';\nimport MainDisplay from './components/MainDisplay';\n\nimport { randomDraw } from './randomDraw.js';\n\nfunction App() {\n\t// let forceDesignObj = {\n\t// \t\ttypeOfDrawer: 'random',\n\t// \t\t\tdimensions: {\n\t// \t\t\t\twidth: null,\n\t// \t\t\t\theight: null,\n\t// \t\t\t},\n\t// \t\ttestStr: '',\n\t// \t\tboxDrawObj: {},\n\t// \t\tmandalaDrawObj: {},\n\t// };\n\t// let forceDesignObj = {};\n\tconst [designState, setDesignState] = useState({});\n\n\tuseEffect(() => {\n\t\t//reset default values\n\t\tif (designState.dimensions) {\n\t\t\tif (designState.dimensions.width === 500) {\n\t\t\t\tsetDesignState({\n\t\t\t\t\t...designState,\n\t\t\t\t\tdimensions: {\n\t\t\t\t\t\t...designState.dimensions,\n\t\t\t\t\t\twidth: null,\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t}\n\t\t\tif (designState.dimensions.height === 500) {\n\t\t\t\tsetDesignState({\n\t\t\t\t\t...designState,\n\t\t\t\t\tdimensions: {\n\t\t\t\t\t\t...designState.dimensions,\n\t\t\t\t\t\theight: null,\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}, [designState]);\n\n\tconst adjustState = (key, value) => {\n\t\tsetDesignState({\n\t\t\t...designState,\n\t\t\t[key]: value,\n\t\t});\n\t};\n\n\tconst adjustDimensions = (key, value) => {\n\t\tsetDesignState({\n\t\t\t...designState,\n\t\t\tdimensions: {\n\t\t\t\t...designState.dimensions,\n\t\t\t\t[key]: value,\n\t\t\t},\n\t\t});\n\t};\n\n\tconst draw = () => {\n\t\trandomDraw(designState);\n\t};\n\n\treturn (\n\t\t<div className='App'>\n\t\t\t<Nav />\n\t\t\t<CodeInjector state={designState} />\n\t\t\t<main>\n\t\t\t\t<Controls\n\t\t\t\t\tdraw={draw}\n\t\t\t\t\tstate={designState}\n\t\t\t\t\tadjustState={adjustState}\n\t\t\t\t\tadjustDimensions={adjustDimensions}\n\t\t\t\t/>\n\t\t\t\t<MainDisplay />\n\t\t\t</main>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './scss/main.scss';\nimport App from './App';\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\n"],"sourceRoot":""}