{"version":3,"sources":["codeBank/utilities.js","codeBank/mandalaDrawing/functionPool/_getDrawType.js","components/Nav.js","functions/functions.js","components/CodeInjector.js","components/DropDownMarkUp.js","components/Controls.js","components/MainDisplay.js","codeBank/boxDrawing/boxDrawingUtilities.js","codeBank/boxDrawing/singles/clone.js","codeBank/boxDrawing/specials/fullClone.js","codeBank/boxDrawing/singles/rotate.js","codeBank/boxDrawing/specials/fullRotate.js","codeBank/boxDrawing/singles/reflect.js","codeBank/boxDrawing/specials/fullReflect.js","codeBank/boxDrawing/specials/halfReflect.js","codeBank/boxDrawing/specials/noPattern.js","codeBank/boxDrawing/specials/specials.js","codeBank/boxDrawing/singles/singles.js","codeBank/boxDrawing/doubles/doubles.js","codeBank/boxDrawing/BoxDrawing.js","codeBank/mandalaDrawing/functionPool/_getStrokeWidth.js","codeBank/mandalaDrawing/functionPool/_getColorType.js","codeBank/mandalaDrawing/functionPool/_checkIndividualSwitches.js","codeBank/mandalaDrawing/functionPool/draw/drawLine.js","codeBank/mandalaDrawing/functionPool/draw/clearLoop.js","codeBank/mandalaDrawing/functionPool/draw/fillLoop.js","codeBank/mandalaDrawing/functionPool/draw/strokeLoop.js","codeBank/mandalaDrawing/special/loop.js","codeBank/mandalaDrawing/functionPool/draw/clearDrawingArea.js","codeBank/mandalaDrawing/functionPool/_getBackgroundLoopStats.js","codeBank/mandalaDrawing/functionPool/_checkLoopSwitches.js","codeBank/mandalaDrawing/functionPool/_checkShapeSpacing.js","codeBank/mandalaDrawing/functionPool/_getFollowingLoopStats.js","codeBank/mandalaDrawing/functionPool/draw/drawSquare.js","codeBank/mandalaDrawing/functionPool/draw/drawEllipse.js","codeBank/mandalaDrawing/functionPool/_getShapeFunction.js","codeBank/mandalaDrawing/functionPool/_getShapeArr.js","codeBank/mandalaDrawing/functionPool/_checkBackgroundSwitches.js","codeBank/mandalaDrawing/initMandalaDraw.js","codeBank/mandalaDrawing/mandalaDrawingUtilities.js","codeBank/mandalaDrawing/functionPool/_getBlendMode.js","codeBank/mandalaDrawing/functionPool/_getInputStats.js","codeBank/mandalaDrawing/MandalaDrawing.js","codeBank/randomInterface.js","codeBank/randomDrawing.js","randomDraw.js","App.js","index.js"],"names":["roll","range","Math","floor","random","rollRange","min","max","coinFlip","createCanvasTemplate","width","height","old","document","querySelector","remove","canvasTemplate","createElement","id","ctx","getContext","createCanvasDraw","parentSpace","innerHTML","canvasDraw","ctx2","appendChild","clear","inputObj","matrix","clearRect","canvasWidth","canvasHeight","randomColor","randomR","randomG","randomB","lightColor","shapeCount","randomL","randomH","randomS","darkColor","getDrawType","inputs","forceType","loopCycle","word","eval","chaos","fillSwitch","strokeSwitch","strokeOnly","clearIndividual","strokeAll","custom","fillOnly","clearAll","fillAll","fillAndStroke","individual","fillIndividual","fillColorIndividual","strokeIndividual","strokeColorIndividual","strokeWidthIndividual","outline","customBackgroundSwitch","customBackgroundColor","customStrokeColor","blendMode","maxShapeCount","customShape","strokeColorAll","strokeWidthAll","dice","console","log","Nav","className","cloneObj","obj","JSON","parse","stringify","writeInputCode","clearEmpties","key","Object","keys","length","undefined","CodeInjector","state","displayState","initialState","boxCount","choosePrimaryColor","chooseSecondaryColor","chooseBackgroundColor","DropDownMarkUp","adjustBoxState","useState","input","setInput","useEffect","handleChange","event","value","target","keyName","Number","handleBtns","primaryToggle","primaryColor","secondaryToggle","secondaryColor","backgroundToggle","backgroundColor","handleStyleBtns","innerText","convertedWord","charAt","toLowerCase","replace","slice","drawStyle","class","name","type","step","onChange","onClick","initialInputState","Controls","draw","dropDownMarkUp","adjustState","adjustDimensions","dropDown","setDropDown","whichDropDown","setWhichDropDown","handleBtnClick","typeOfDrawer","MainDisplay","boxDraw","boxDrawObj","xCoord","yCoord","usingMatrix","matrixRow","matrixColumn","pixel","calcX","xStart","calcY","yStart","fillStyle","color","fillRect","pixelWidth","pixelHeight","strokeStyle","strokeRect","PixelNode","this","InputNode","whatToPlace","rollColor","createPixelMap","patternOverride","newMatrix","y","row","x","push","drawSectionHeight","drawSectionWidth","combineMatrixTopHalf","matrix1","matrix2","combinedMatrix","i","combine","combineMatrixLeftHalf","clone","xOffset","yOffset","xPos","yPos","tempMatrix","rowArr","newPixel","fullClone","cloneMatrix1","cloneMatrix2","cloneMatrix3","inputNode","rotateClockwise","useMatrix","column","rotateCounterClockwise","fullRotate","rotatedMatrix1","rotatedMatrix2","rotatedMatrix3","reflectVerticalAxis","reflectHorizontalAxis","fullReflect","adjustedMatrix","reflectedMatrix","halfReflect","clonedMatrix","noPattern","getMatrix","specials","singles","quadrantDice","order","quadrantArray","test","includes","quadrant","findQuadrantOrder","forEach","number","index","doubles","styleDice","doubleDice","quadrantDouble","rotatedMatrix","BoxDrawing","forceDesignObj","dimensions","inputColor","alert","toDataURL","getStrokeWidth","getColorType","clearSwitch","checkIndividualSwitches","fillColor","strokeColor","strokeWidth","starburst","save","moveTo","pathRadius","shapeSize","lineTo","restore","slant","clearLoop","shapeFunction","shapeArr","currentLoop","clearShape","globalCompositeOperation","beginPath","fill","closePath","rotate","PI","fillLoop","fillShape","strokeLoop","strokeShape","lineWidth","stroke","loop","translate","halfWidth","halfHeight","clearDrawingArea","getBackgroundStats","minShapeCount","maxPathRadius","maxFullPath","backgroundLoopSwitch","checkLoopSwitches","clearRandomLoops","FillRandomLoops","fillColorRandomLoops","strokeRandomLoops","strokeColorRandomLoops","strokeWidthRandomLoops","checkShapeSpacing","newPath","improperSpacing","minPathRadius","getFollowingLoopStats","maxShapeSize","percent","square","rect","diamond","circle","arc","oval","ellipse","getShapeFunction","forceNumber","getShapeArr","loopCount","shapeStyleDice","sameShape","checkResetBackgroundSwitches","fillColorAll","initMandalaDraw","inputStats","ceil","useHalfSize","getBackgroundLoopStats","checkBackgroundSwitches","findHypotenuse","hypotenuse","sqrt","pow","round","getBlendMode","blend","getInputStats","mandalaDrawObj","initLoopSwitch","drawType","fillRandomLoops","useSize","MandalaDrawing","randomInterface","RandomDrawing","returnRandomDrawing","sequence","randomDraw","box","mandala","App","designState","setDesignState","resetDefaults","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.497e4206.chunk.js","sourcesContent":["const roll = (range) => {\r\n\t// 1 - range\r\n\treturn Math.floor(Math.random() * range + 1);\r\n};\r\nconst rollRange = (min, max) => {\r\n\tconst answer = Math.floor(Math.random() * (max - min + 1)) + min;\r\n\treturn answer;\r\n};\r\n\r\nconst coinFlip = () => {\r\n\tconst coin = roll(2);\r\n\tconst face = coin === 1 ? true : false;\r\n\treturn face;\r\n};\r\nconst createCanvasTemplate = (width, height) => {\r\n\t//remove old canvas\r\n\tconst old = document.querySelector('#canvasTemplate');\r\n\tif (old) {\r\n\t\told.remove();\r\n\t}\r\n\t//create new canvas\r\n\tlet canvasTemplate = document.createElement('canvas');\r\n\tcanvasTemplate.id = 'canvasTemplate';\r\n\tcanvasTemplate.width = width;\r\n\tcanvasTemplate.height = height;\r\n\tconst ctx = canvasTemplate.getContext('2d');\r\n\r\n\treturn [canvasTemplate, ctx];\r\n};\r\nconst createCanvasDraw = (width, height) => {\r\n\t//find user defined space for canvas\r\n\tconst parentSpace =\r\n\t\tdocument.querySelector('.randomDraw') ||\r\n\t\tdocument.querySelector('#randomDraw');\r\n\t//remove old canvas\r\n\tparentSpace.innerHTML = '';\r\n\t//create new canvas\r\n\tlet canvasDraw = document.createElement('canvas');\r\n\tcanvasDraw.id = 'canvasDraw';\r\n\tcanvasDraw.width = width;\r\n\tcanvasDraw.height = height;\r\n\tconst ctx2 = canvasDraw.getContext('2d');\r\n\r\n\t//place canvas\r\n\tparentSpace.appendChild(canvasDraw);\r\n\r\n\treturn [canvasDraw, ctx2];\r\n};\r\n\r\nconst clear = (inputObj) => {\r\n\tinputObj.matrix = [];\r\n\tinputObj.ctx &&\r\n\t\tinputObj.ctx.clearRect(\r\n\t\t\t0,\r\n\t\t\t0,\r\n\t\t\tinputObj.canvasWidth,\r\n\t\t\tinputObj.canvasHeight\r\n\t\t);\r\n\tinputObj.ctx2 &&\r\n\t\tinputObj.ctx2.clearRect(\r\n\t\t\t0,\r\n\t\t\t0,\r\n\t\t\tinputObj.canvasWidth,\r\n\t\t\tinputObj.canvasHeight\r\n\t\t);\r\n\treturn inputObj.matrix;\r\n};\r\n\r\nconst randomColor = () => {\r\n\tconst randomR = roll(256);\r\n\tconst randomG = roll(256);\r\n\tconst randomB = roll(256);\r\n\treturn `rgb(${randomR},${randomG},${randomB})`;\r\n};\r\n\r\nconst lightColor = (shapeCount) => {\r\n\tconst randomH = rollRange(0, 360);\r\n\tconst randomS = rollRange(0, 100);\r\n\tlet randomL;\r\n\tif (shapeCount > 150) {\r\n\t\trandomL = 99;\r\n\t} else if (shapeCount > 100) {\r\n\t\trandomL = rollRange(95, 99); //0=black 50=normal 100=white\r\n\t} else if (shapeCount > 50) {\r\n\t\trandomL = rollRange(90, 99); //0=black 50=normal 100=white\r\n\t} else {\r\n\t\trandomL = rollRange(80, 99); //0=black 50=normal 100=white\r\n\t}\r\n\treturn `hsl(${randomH},${randomS}%,${randomL}%)`;\r\n};\r\n\r\nconst darkColor = (shapeCount) => {\r\n\tconst randomH = rollRange(0, 360);\r\n\tconst randomS = rollRange(0, 100);\r\n\tlet randomL;\r\n\t// debugger;\r\n\tif (shapeCount > 150) {\r\n\t\trandomL = 1;\r\n\t} else if (shapeCount > 100) {\r\n\t\trandomL = rollRange(5, 1); //0=black 50=normal 100=white\r\n\t} else if (shapeCount > 50) {\r\n\t\trandomL = rollRange(10, 1); //0=black 50=normal 100=white\r\n\t} else {\r\n\t\trandomL = rollRange(20, 1); //0=black 50=normal 100=white\r\n\t}\r\n\treturn `hsl(${randomH},${randomS}%,${randomL}%)`;\r\n};\r\n\r\n//rotate image functions\r\n//rotate image functions\r\n//rotate image functions\r\n//rotate image functions\r\n\r\n// const img = new Image();\r\n// img.src = \"https://i.stack.imgur.com/C7qq2.png?s=328&g=1\";\r\n// img.onload = () => { requestAnimationFrame(mainLoop) } // start when loaded\r\n// const ctx = canvas.getContext(\"2d\");\r\n\r\n// function drawImageRotated(img, x, y, scale, rot) {\r\n//   ctx.setTransform(scale, 0, 0, scale, x, y);\r\n//   ctx.rotate(rot);\r\n//   ctx.drawImage(img, -img.width / 2, -img.height / 2);\r\n//   ctx.setTransform(1, 0, 0, 1, 0, 0);\r\n// }\r\n\r\n// function mainLoop(time) {\r\n//   ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n//   drawImageRotated(img,canvas.width / 2, canvas.height / 2, 0.5, time / 500);\r\n//   requestAnimationFrame(mainLoop);\r\n// }\r\n\r\n//rotate image functions\r\n//rotate image functions\r\n//rotate image functions\r\n//rotate image functions\r\n\r\nexport {\r\n\troll,\r\n\trollRange,\r\n\tcoinFlip,\r\n\tcreateCanvasTemplate,\r\n\tcreateCanvasDraw,\r\n\tclear,\r\n\trandomColor,\r\n\tlightColor,\r\n\tdarkColor,\r\n};\r\n","import { roll, coinFlip } from '../../utilities.js';\r\n\r\nconst getDrawType = (inputs, forceType) => {\r\n\tconst loopCycle = (word) => {\r\n\t\teval(`inputs.${word}All = ${coinFlip()}`);\r\n\r\n\t\tif (!eval(`inputs.${word}All`)) {\r\n\t\t\teval(`inputs.${word}RandomLoops = ${coinFlip()}`);\r\n\t\t} else {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (!eval(`inputs.${word}RandomLoops`)) {\r\n\t\t\teval(`inputs.${word}Individual = ${coinFlip()}`);\r\n\t\t} else {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (!eval(`inputs.${word}Individual`)) {\r\n\t\t\tloopCycle(word);\r\n\t\t} else {\r\n\t\t\treturn;\r\n\t\t}\r\n\t};\r\n\r\n\tconst chaos = () => {\r\n\t\tinputs.fillSwitch = true;\r\n\t\tinputs.strokeSwitch = true;\r\n\t\tloopCycle('clear');\r\n\t\tloopCycle('fill');\r\n\t\tloopCycle('fillColor');\r\n\t\tloopCycle('stroke');\r\n\t\tloopCycle('strokeColor');\r\n\t\tloopCycle('strokeWidth');\r\n\t};\r\n\tconst strokeOnly = () => {\r\n\t\tinputs.fillSwitch = true;\r\n\t\tinputs.strokeSwitch = true;\r\n\t\t// loopCycle('clear');\r\n\t\tinputs.clearIndividual = true;\r\n\t\tinputs.strokeAll = true;\r\n\t\tloopCycle('strokeColor');\r\n\t\tloopCycle('strokeWidth');\r\n\t};\r\n\tconst custom = () => {};\r\n\tconst fillOnly = () => {\r\n\t\tinputs.fillSwitch = true;\r\n\t\tinputs.clearAll = true;\r\n\t\tinputs.fillAll = true;\r\n\t\tloopCycle('fillColor');\r\n\t\t// fillColorRandomLoops = true;\r\n\t};\r\n\tconst fillAndStroke = () => {\r\n\t\tinputs.fillSwitch = true;\r\n\t\tinputs.strokeSwitch = true;\r\n\t\tinputs.fillAll = true;\r\n\t\tinputs.strokeAll = true;\r\n\t\tloopCycle('clear');\r\n\t\tloopCycle('strokeColor');\r\n\t\tloopCycle('fillColor');\r\n\t};\r\n\tconst individual = () => {\r\n\t\tinputs.fillSwitch = true;\r\n\t\tinputs.strokeSwitch = true;\r\n\t\tinputs.clearIndividual = true;\r\n\t\tinputs.fillIndividual = true;\r\n\t\tinputs.fillColorIndividual = true;\r\n\t\tinputs.strokeIndividual = true;\r\n\t\tinputs.strokeColorIndividual = true;\r\n\t\tinputs.strokeWidthIndividual = true;\r\n\t};\r\n\tconst outline = () => {\r\n\t\tinputs.customBackgroundSwitch = true;\r\n\t\tinputs.customBackgroundColor = '#fff';\r\n\t\tinputs.customStrokeColor = '#000';\r\n\t\tinputs.blendMode = 'source-over';\r\n\t\tinputs.maxShapeCount = 50;\r\n\t\tinputs.customShape = 'noLine';\r\n\r\n\t\tinputs.strokeSwitch = true;\r\n\t\tinputs.fillSwitch = false;\r\n\t\tinputs.strokeAll = true;\r\n\t\tinputs.clearAll = true;\r\n\t\t// inputs.clearRandomLoops = true;\r\n\t\tinputs.strokeColorAll = true;\r\n\t\tinputs.strokeWidthAll = true;\r\n\t};\r\n\r\n\t// debugger;\r\n\tif (forceType) {\r\n\t\teval(`${forceType}()`);\r\n\t} else {\r\n\t\tconst dice = roll(5);\r\n\t\tswitch (dice) {\r\n\t\t\tcase 1:\r\n\t\t\t\tstrokeOnly();\r\n\t\t\t\tbreak;\r\n\t\t\tcase 2:\r\n\t\t\t\tfillOnly();\r\n\t\t\t\tbreak;\r\n\t\t\tcase 3:\r\n\t\t\t\tfillAndStroke();\r\n\t\t\t\tbreak;\r\n\t\t\tcase 4:\r\n\t\t\t\tindividual();\r\n\t\t\t\tbreak;\r\n\t\t\tcase 5:\r\n\t\t\t\tchaos();\r\n\t\t\t\tbreak;\r\n\t\t\t// case 6:\r\n\t\t\t// \toutline();\r\n\t\t\t// \tbreak;\r\n\t\t\t// case 7:\r\n\t\t\t// \tcustom();\r\n\t\t\t// \tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tconsole.log('error in getDrawType');\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n\treturn inputs;\r\n};\r\n\r\nexport default getDrawType;\r\n","import React from 'react';\r\n\r\nconst Nav = () => {\r\n\treturn (\r\n\t\t<header>\r\n\t\t\t<h1>randomDraw</h1>\r\n\t\t\t<button id='sequence' className='btn'>\r\n\t\t\t\tsequence\r\n\t\t\t</button>\r\n\t\t\t<img id='randomDrawSequence' />\r\n\t\t</header>\r\n\t);\r\n};\r\n\r\nexport default Nav;\r\n","const cloneObj = (obj) => {\r\n\treturn JSON.parse(JSON.stringify(obj));\r\n};\r\nconst clearEmpties = (obj) => {\r\n\tfor (let key in obj) {\r\n\t\tif (!obj[key] || typeof obj[key] !== 'object') {\r\n\t\t\t//remove strings null and undefined\r\n\t\t\tif (\r\n\t\t\t\tobj[key] === undefined ||\r\n\t\t\t\tobj[key] === null ||\r\n\t\t\t\tobj[key] === ''\r\n\t\t\t) {\r\n\t\t\t\tdelete obj[key];\r\n\t\t\t}\r\n\t\t\tcontinue; // If null or not an object, skip to the next iteration\r\n\t\t}\r\n\t\t// The property is an object\r\n\t\tclearEmpties(obj[key]); // <-- Make a recursive call on the nested object\r\n\t\tif (Object.keys(obj[key]).length === 0) {\r\n\t\t\tdelete obj[key]; // The object had no properties, so delete that property\r\n\t\t}\r\n\t}\r\n\treturn obj;\r\n};\r\nconst writeInputCode = (obj) => {\r\n\tclearEmpties(obj);\r\n\tconst tab = `  `;\r\n\tlet html = `randomDraw(${JSON.stringify(obj, null, tab)});`;\r\n\treturn html;\r\n};\r\n\r\nconst resetDefaults = (\r\n\tstate,\r\n\tadjustState,\r\n\tadjustDimensions,\r\n\tadjustBoxState\r\n) => {\r\n\t// ======= dimensions adjustments\r\n\t// ~~~~~~~~~~~~~~~ reset default values of width and height\r\n\tif (state.dimensions) {\r\n\t\tif (state.dimensions.width === 500) {\r\n\t\t\tadjustDimensions({ width: null });\r\n\t\t}\r\n\t\tif (state.dimensions.height === 500) {\r\n\t\t\tadjustDimensions({ height: null });\r\n\t\t}\r\n\t}\r\n\t// ~~~~~~~~~~~~~~~ reset default values of width and height\r\n\t// ======= dimensions adjustments\r\n\t// ======= boxDrawObj adjustments\r\n\tif (state.boxDrawObj) {\r\n\t\t// ~~~~~~~~~~~~~~~ off 'choose' toggle remove color value\r\n\t\tif (state.boxDrawObj.primaryToggle) {\r\n\t\t\tif (\r\n\t\t\t\tstate.boxDrawObj.primaryToggle === 'default' ||\r\n\t\t\t\tstate.boxDrawObj.primaryToggle === 'random'\r\n\t\t\t) {\r\n\t\t\t\t//remove toggle\r\n\t\t\t\tif (state.boxDrawObj.primaryToggle === 'default') {\r\n\t\t\t\t\tadjustBoxState({ primaryToggle: null });\r\n\t\t\t\t}\r\n\t\t\t\t//remove color\r\n\t\t\t\tif (state.boxDrawObj.primaryColor) {\r\n\t\t\t\t\tadjustBoxState({ primaryColor: null });\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (state.boxDrawObj.secondaryToggle) {\r\n\t\t\tif (\r\n\t\t\t\tstate.boxDrawObj.secondaryToggle === 'default' ||\r\n\t\t\t\tstate.boxDrawObj.secondaryToggle === 'random'\r\n\t\t\t) {\r\n\t\t\t\t//remove toggle\r\n\t\t\t\tif (state.boxDrawObj.secondaryToggle === 'default') {\r\n\t\t\t\t\tadjustBoxState({ secondaryToggle: null });\r\n\t\t\t\t}\r\n\t\t\t\t//remove color\r\n\t\t\t\tif (state.boxDrawObj.secondaryColor) {\r\n\t\t\t\t\tadjustBoxState({ secondaryColor: null });\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (state.boxDrawObj.backgroundToggle) {\r\n\t\t\tif (\r\n\t\t\t\tstate.boxDrawObj.backgroundToggle === 'default' ||\r\n\t\t\t\tstate.boxDrawObj.backgroundToggle === 'random'\r\n\t\t\t) {\r\n\t\t\t\t//remove toggle\r\n\t\t\t\tif (state.boxDrawObj.backgroundToggle === 'default') {\r\n\t\t\t\t\tadjustBoxState({ backgroundToggle: null });\r\n\t\t\t\t}\r\n\t\t\t\t//remove color\r\n\t\t\t\tif (state.boxDrawObj.backgroundColor) {\r\n\t\t\t\t\tadjustBoxState({ backgroundColor: null });\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t// ~~~~~~~~~~~~~~~ off 'choose' toggle remove color value\r\n\t\t// ~~~~~~~~~~~~~~~ if color is same as default, remove property\r\n\t\tif (\r\n\t\t\tstate.boxDrawObj.primaryColor &&\r\n\t\t\tstate.boxDrawObj.primaryColor === '#000000'\r\n\t\t) {\r\n\t\t\tadjustBoxState({ primaryColor: null });\r\n\t\t}\r\n\t\tif (\r\n\t\t\tstate.boxDrawObj.secondaryColor &&\r\n\t\t\tstate.boxDrawObj.secondaryColor === '#8C00FF'\r\n\t\t) {\r\n\t\t\tadjustBoxState({ secondaryColor: null });\r\n\t\t}\r\n\t\tif (\r\n\t\t\tstate.boxDrawObj.backgroundColor &&\r\n\t\t\tstate.boxDrawObj.backgroundColor === '#8C00FF'\r\n\t\t) {\r\n\t\t\tadjustBoxState({ backgroundColor: null });\r\n\t\t}\r\n\t\t// ~~~~~~~~~~~~~~~ if color is same as default, remove property\r\n\t\t// ~~~~~~~~~~~~~~~ reset drawStyle default\r\n\t\tif (state.boxDrawObj.drawStyle === 'random') {\r\n\t\t\tadjustBoxState({ drawStyle: null });\r\n\t\t}\r\n\r\n\t\t// ======= boxDrawObj adjustments\r\n\t}\r\n};\r\n\r\nexport { cloneObj, clearEmpties, writeInputCode, resetDefaults };\r\n","import React from 'react';\r\nimport { cloneObj, writeInputCode } from '../functions/functions.js';\r\n\r\nconst CodeInjector = ({ state }) => {\r\n\t//get code\r\n\tlet displayState = cloneObj(state);\r\n\t// clearEmpties(displayState);\r\n\tdisplayState = writeInputCode(displayState);\r\n\t// console.log(displayState);\r\n\r\n\treturn (\r\n\t\t<section className='codeInjectionContainer'>\r\n\t\t\t<pre>\r\n\t\t\t\t<code className='codeInjection'>{displayState}</code>\r\n\t\t\t</pre>\r\n\t\t</section>\r\n\t);\r\n};\r\n\r\nexport default CodeInjector;\r\n","import React, { Fragment, useState, useEffect } from 'react';\r\n\r\nconst initialState = {\r\n\tboxCount: 10,\r\n\tchoosePrimaryColor: '#000000',\r\n\tchooseSecondaryColor: '#8C00FF',\r\n\tchooseBackgroundColor: '#FFFFFF00',\r\n};\r\n\r\nconst DropDownMarkUp = ({ adjustBoxState }) => {\r\n\tconst [input, setInput] = useState(initialState);\r\n\r\n\tuseEffect(() => {\r\n\t\tconsole.log('refresh dropdown');\r\n\t\t//prevent input state refreshing component,\r\n\t}, []);\r\n\r\n\tconst handleChange = (event) => {\r\n\t\t// debugger;\r\n\t\tlet value = event.target.value;\r\n\t\tlet keyName = event.target.id;\r\n\t\tif (keyName === 'boxCount') {\r\n\t\t\tvalue = Number(value);\r\n\t\t\tadjustBoxState({ [keyName]: value });\r\n\t\t}\r\n\t\tsetInput({\r\n\t\t\t...input,\r\n\t\t\t[keyName]: value,\r\n\t\t});\r\n\t};\r\n\r\n\tconst handleBtns = (event) => {\r\n\t\t// adjustBoxState([event.target.name], event.target.value);\r\n\t\tconst id = event.target.id;\r\n\t\t// let colorInput = null;\r\n\t\tswitch (id) {\r\n\t\t\tcase 'defaultPrimaryColorBtn':\r\n\t\t\t\tadjustBoxState({ primaryToggle: 'default' });\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'randomPrimaryColorBtn':\r\n\t\t\t\tadjustBoxState({ primaryToggle: 'random' });\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'choosePrimaryColorBtn':\r\n\t\t\t\tadjustBoxState({\r\n\t\t\t\t\tprimaryToggle: 'choose',\r\n\t\t\t\t\tprimaryColor: input.choosePrimaryColor,\r\n\t\t\t\t});\r\n\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'defaultSecondaryColorBtn':\r\n\t\t\t\tadjustBoxState({ secondaryToggle: 'default' });\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'randomSecondaryColorBtn':\r\n\t\t\t\tadjustBoxState({ secondaryToggle: 'random' });\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'chooseSecondaryColorBtn':\r\n\t\t\t\tadjustBoxState({\r\n\t\t\t\t\tsecondaryToggle: 'choose',\r\n\t\t\t\t\tsecondaryColor: input.chooseSecondaryColor,\r\n\t\t\t\t});\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'defaultBackgroundColorBtn':\r\n\t\t\t\tadjustBoxState({ backgroundToggle: 'default' });\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'randomBackgroundColorBtn':\r\n\t\t\t\tadjustBoxState({ backgroundToggle: 'random' });\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'chooseBackgroundColorBtn':\r\n\t\t\t\tadjustBoxState({\r\n\t\t\t\t\tbackgroundToggle: 'choose',\r\n\t\t\t\t\tbackgroundColor: input.chooseBackgroundColor,\r\n\t\t\t\t});\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tconsole.log('error in handleBtns');\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t};\r\n\r\n\tconst handleStyleBtns = (event) => {\r\n\t\tconst word = event.target.innerText;\r\n\t\t// let colorInput = null;\r\n\t\tconst convertedWord =\r\n\t\t\tword.charAt(0).toLowerCase() + word.replace(/\\s/g, '').slice(1);\r\n\t\tadjustBoxState({ drawStyle: convertedWord });\r\n\t};\r\n\r\n\treturn (\r\n\t\t<Fragment>\r\n\t\t\t<div class='separatorContainer'>\r\n\t\t\t\t<div class='separators'>\r\n\t\t\t\t\t<p>\r\n\t\t\t\t\t\tBox Count:\r\n\t\t\t\t\t\t<input\r\n\t\t\t\t\t\t\tid='boxCount'\r\n\t\t\t\t\t\t\tclass='inputField'\r\n\t\t\t\t\t\t\tname='boxCount'\r\n\t\t\t\t\t\t\ttype='number'\r\n\t\t\t\t\t\t\tvalue={input.boxCount}\r\n\t\t\t\t\t\t\tmin='2'\r\n\t\t\t\t\t\t\tstep='2'\r\n\t\t\t\t\t\t\tonChange={handleChange}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</p>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div class='separators'>\r\n\t\t\t\t\t<p>Primary Color:</p>\r\n\t\t\t\t\t<div class='primaryColorContainer btnContainer'>\r\n\t\t\t\t\t\t<button\r\n\t\t\t\t\t\t\tid='defaultPrimaryColorBtn'\r\n\t\t\t\t\t\t\tclass='btns active'\r\n\t\t\t\t\t\t\tonClick={handleBtns}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\tDefault\r\n\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t<button\r\n\t\t\t\t\t\t\tid='randomPrimaryColorBtn'\r\n\t\t\t\t\t\t\tclass='btns'\r\n\t\t\t\t\t\t\tonClick={handleBtns}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\tRandom\r\n\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t<button\r\n\t\t\t\t\t\t\tid='choosePrimaryColorBtn'\r\n\t\t\t\t\t\t\tclass='btns'\r\n\t\t\t\t\t\t\tonClick={handleBtns}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\tChoose\r\n\t\t\t\t\t\t\t<input\r\n\t\t\t\t\t\t\t\tid='choosePrimaryColor'\r\n\t\t\t\t\t\t\t\tname='choosePrimaryColor'\r\n\t\t\t\t\t\t\t\ttype='color'\r\n\t\t\t\t\t\t\t\tvalue={input.choosePrimaryColor}\r\n\t\t\t\t\t\t\t\tonChange={handleChange}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t</button>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div class='separators'>\r\n\t\t\t\t\t<p>Secondary Color:</p>\r\n\t\t\t\t\t<div class='secondaryColorContainer btnContainer'>\r\n\t\t\t\t\t\t<button\r\n\t\t\t\t\t\t\tid='defaultSecondaryColorBtn'\r\n\t\t\t\t\t\t\tclass='btns active'\r\n\t\t\t\t\t\t\tonClick={handleBtns}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\tDefault Random\r\n\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t<button\r\n\t\t\t\t\t\t\tid='chooseSecondaryColorBtn'\r\n\t\t\t\t\t\t\tclass='btns'\r\n\t\t\t\t\t\t\tonClick={handleBtns}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\tChoose\r\n\t\t\t\t\t\t\t<input\r\n\t\t\t\t\t\t\t\tid='chooseSecondaryColor'\r\n\t\t\t\t\t\t\t\ttype='color'\r\n\t\t\t\t\t\t\t\tvalue={input.chooseSecondaryColor}\r\n\t\t\t\t\t\t\t\tonChange={handleChange}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t</button>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div class='separators'>\r\n\t\t\t\t\t<p>Background Color:</p>\r\n\t\t\t\t\t<div class='backgroundColorContainer btnContainer'>\r\n\t\t\t\t\t\t<button\r\n\t\t\t\t\t\t\tid='defaultBackgroundColorBtn'\r\n\t\t\t\t\t\t\tclass='btns active'\r\n\t\t\t\t\t\t\tonClick={handleBtns}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\tDefault\r\n\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t<button\r\n\t\t\t\t\t\t\tid='randomBackgroundColorBtn'\r\n\t\t\t\t\t\t\tclass='btns'\r\n\t\t\t\t\t\t\tonClick={handleBtns}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\tRandom\r\n\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t<button\r\n\t\t\t\t\t\t\tid='chooseBackgroundColorBtn'\r\n\t\t\t\t\t\t\tclass='btns'\r\n\t\t\t\t\t\t\tonClick={handleBtns}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\tChoose\r\n\t\t\t\t\t\t\t<input\r\n\t\t\t\t\t\t\t\tid='chooseBackgroundColor'\r\n\t\t\t\t\t\t\t\ttype='color'\r\n\t\t\t\t\t\t\t\tvalue={input.chooseBackgroundColor}\r\n\t\t\t\t\t\t\t\tonChange={handleChange}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t</button>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t<div class='styleContainer btnContainer'>\r\n\t\t\t\t<p>Styles</p>\r\n\t\t\t\t<div class='btnContainer'>\r\n\t\t\t\t\t<button\r\n\t\t\t\t\t\tid='randomBtn'\r\n\t\t\t\t\t\tclass='btns boxPatternBtns active'\r\n\t\t\t\t\t\tonClick={handleStyleBtns}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\tRandom\r\n\t\t\t\t\t</button>\r\n\t\t\t\t\t<button\r\n\t\t\t\t\t\tid='fullCloneBtn'\r\n\t\t\t\t\t\tclass='btns boxPatternBtns'\r\n\t\t\t\t\t\tonClick={handleStyleBtns}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\tFull Clone\r\n\t\t\t\t\t</button>\r\n\t\t\t\t\t<button\r\n\t\t\t\t\t\tid='fullReflectBtn'\r\n\t\t\t\t\t\tclass='btns boxPatternBtns'\r\n\t\t\t\t\t\tonClick={handleStyleBtns}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\tFull Reflect\r\n\t\t\t\t\t</button>\r\n\t\t\t\t\t<button\r\n\t\t\t\t\t\tid='fullRotateBtn'\r\n\t\t\t\t\t\tclass='btns boxPatternBtns'\r\n\t\t\t\t\t\tonClick={handleStyleBtns}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\tFull Rotate\r\n\t\t\t\t\t</button>\r\n\t\t\t\t\t<button\r\n\t\t\t\t\t\tid='halfReflectBtn'\r\n\t\t\t\t\t\tclass='btns boxPatternBtns'\r\n\t\t\t\t\t\tonClick={handleStyleBtns}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\tHalf Reflect\r\n\t\t\t\t\t</button>\r\n\t\t\t\t\t<button\r\n\t\t\t\t\t\tid='noPatternBtn'\r\n\t\t\t\t\t\tclass='btns boxPatternBtns'\r\n\t\t\t\t\t\tonClick={handleStyleBtns}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\tNo Pattern\r\n\t\t\t\t\t</button>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</Fragment>\r\n\t);\r\n};\r\n\r\nexport default DropDownMarkUp;\r\n","import React, { useState, Fragment } from 'react';\r\nimport DropDownMarkUp from './DropDownMarkUp';\r\n// import { randomDraw } from '../../randomDraw';\r\n\r\nconst initialInputState = {\r\n\twidth: 500,\r\n\theight: 500,\r\n};\r\n\r\nconst Controls = ({\r\n\tdraw,\r\n\tstate,\r\n\tadjustState,\r\n\tadjustDimensions,\r\n\tadjustBoxState,\r\n}) => {\r\n\tconst [input, setInput] = useState(initialInputState);\r\n\tconst [dropDown, setDropDown] = useState(false);\r\n\tconst [whichDropDown, setWhichDropDown] = useState(''); //'draw', 'mandala'\r\n\r\n\tconst handleBtnClick = (event) => {\r\n\t\tlet id = event.target.id;\r\n\t\tswitch (id) {\r\n\t\t\tcase 'boxDrawerBtn':\r\n\t\t\t\tadjustState({ typeOfDrawer: 'boxDraw' });\r\n\t\t\t\tsetDropDown(true);\r\n\t\t\t\tsetWhichDropDown('box');\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'mandalaDrawerBtn':\r\n\t\t\t\tadjustState({ typeOfDrawer: 'mandalaDraw' });\r\n\t\t\t\tsetDropDown(true);\r\n\t\t\t\tsetWhichDropDown('mandala');\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tsetDropDown(false);\r\n\t\t\t\tconsole.log('error in handleBtnClick', id);\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t};\r\n\tconst handleChange = (event) => {\r\n\t\tsetInput({\r\n\t\t\t...input,\r\n\t\t\t[event.target.name]: event.target.value,\r\n\t\t});\r\n\t\tadjustDimensions({ [event.target.name]: Number(event.target.value) });\r\n\t};\r\n\r\n\tlet dropDownMarkUp;\r\n\tswitch (whichDropDown) {\r\n\t\tcase 'box':\r\n\t\t\tdropDownMarkUp = <DropDownMarkUp adjustBoxState={adjustBoxState} />;\r\n\t\t\tbreak;\r\n\t\tcase 'mandala':\r\n\t\t\t// dropDownMarkUp = <DropDownMarkUp />;\r\n\t\t\tbreak;\r\n\t\tdefault:\r\n\t\t\tdropDownMarkUp = null;\r\n\t\t\tbreak;\r\n\t}\r\n\r\n\treturn (\r\n\t\t<section className='controls'>\r\n\t\t\t<div className='mainControls'>\r\n\t\t\t\t<div className='drawerContainer btnContainer'>\r\n\t\t\t\t\t<button\r\n\t\t\t\t\t\tid='randomDrawerBtn'\r\n\t\t\t\t\t\tclassName='btns'\r\n\t\t\t\t\t\tonClick={handleBtnClick}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\tRandom Draw\r\n\t\t\t\t\t</button>\r\n\t\t\t\t\t<button\r\n\t\t\t\t\t\tid='boxDrawerBtn'\r\n\t\t\t\t\t\tclassName='btns'\r\n\t\t\t\t\t\tonClick={handleBtnClick}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\tBox Draw\r\n\t\t\t\t\t</button>\r\n\t\t\t\t\t<button\r\n\t\t\t\t\t\tid='mandalaDrawerBtn'\r\n\t\t\t\t\t\tclassName='btns'\r\n\t\t\t\t\t\tonClick={handleBtnClick}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\tMandala Draw\r\n\t\t\t\t\t</button>\r\n\t\t\t\t</div>\r\n\t\t\t\t<p>\r\n\t\t\t\t\tDimensions:\r\n\t\t\t\t\t<input\r\n\t\t\t\t\t\tid='dimensionWidth'\r\n\t\t\t\t\t\tname='width'\r\n\t\t\t\t\t\tclassName='inputField'\r\n\t\t\t\t\t\ttype='number'\r\n\t\t\t\t\t\tvalue={input.width}\r\n\t\t\t\t\t\tmin='2'\r\n\t\t\t\t\t\tstep='2'\r\n\t\t\t\t\t\tonChange={handleChange}\r\n\t\t\t\t\t/>\r\n\t\t\t\t\tx\r\n\t\t\t\t\t<input\r\n\t\t\t\t\t\tid='dimensionHeight'\r\n\t\t\t\t\t\tname='height'\r\n\t\t\t\t\t\tclassName='inputField'\r\n\t\t\t\t\t\ttype='number'\r\n\t\t\t\t\t\tvalue={input.height}\r\n\t\t\t\t\t\tmin='2'\r\n\t\t\t\t\t\tstep='2'\r\n\t\t\t\t\t\tonChange={handleChange}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</p>\r\n\t\t\t</div>\r\n\t\t\t<div className='subControls'>\r\n\t\t\t\t{dropDown ? dropDownMarkUp : null}\r\n\t\t\t</div>\r\n\t\t</section>\r\n\t);\r\n};\r\nexport default Controls;\r\n","import React from 'react';\r\n\r\nconst MainDisplay = () => {\r\n\treturn <section className='randomDraw'>Drawing will go here</section>;\r\n};\r\nexport default MainDisplay;\r\n","import { roll } from '../utilities.js';\r\n\r\nconst boxDraw = (boxDrawObj, xCoord = 0, yCoord = 0) => {\r\n\tconst usingMatrix = boxDrawObj.matrix;\r\n\r\n\tif (xCoord === null && yCoord === null) {\r\n\t\tfor (let matrixRow = 0; matrixRow < usingMatrix.length; matrixRow++) {\r\n\t\t\tfor (\r\n\t\t\t\tlet matrixColumn = 0;\r\n\t\t\t\tmatrixColumn < usingMatrix[matrixRow].length;\r\n\t\t\t\tmatrixColumn++\r\n\t\t\t) {\r\n\t\t\t\tconst pixel = usingMatrix[matrixRow][matrixColumn];\r\n\t\t\t\tconst calcX = pixel.xStart + xCoord;\r\n\t\t\t\tconst calcY = pixel.yStart + yCoord;\r\n\r\n\t\t\t\tboxDrawObj.ctx.fillStyle = pixel.color;\r\n\t\t\t\tboxDrawObj.ctx.fillRect(\r\n\t\t\t\t\tcalcX,\r\n\t\t\t\t\tcalcY,\r\n\t\t\t\t\tboxDrawObj.pixelWidth,\r\n\t\t\t\t\tboxDrawObj.pixelHeight\r\n\t\t\t\t);\r\n\t\t\t\tboxDrawObj.ctx.strokeStyle = `rgb(255, 255, 255)`;\r\n\t\t\t\tboxDrawObj.ctx.strokeRect(\r\n\t\t\t\t\tcalcX,\r\n\t\t\t\t\tcalcY,\r\n\t\t\t\t\tboxDrawObj.pixelWidth,\r\n\t\t\t\t\tboxDrawObj.pixelHeight\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn;\r\n\t}\r\n\tfor (let matrixRow = 0; matrixRow < usingMatrix.length; matrixRow++) {\r\n\t\tfor (\r\n\t\t\tlet matrixColumn = 0;\r\n\t\t\tmatrixColumn < usingMatrix[matrixRow].length;\r\n\t\t\tmatrixColumn++\r\n\t\t) {\r\n\t\t\tconst pixel = usingMatrix[matrixRow][matrixColumn];\r\n\t\t\tconst calcX = pixel.xStart + xCoord;\r\n\t\t\tconst calcY = pixel.yStart + yCoord;\r\n\r\n\t\t\tif (xCoord === null && yCoord === null) {\r\n\t\t\t\tboxDrawObj.ctx.fillStyle = pixel.color;\r\n\t\t\t\tboxDrawObj.ctx.fillRect(\r\n\t\t\t\t\tcalcX,\r\n\t\t\t\t\tcalcY,\r\n\t\t\t\t\tboxDrawObj.pixelWidth,\r\n\t\t\t\t\tboxDrawObj.pixelHeight\r\n\t\t\t\t);\r\n\t\t\t\tboxDrawObj.ctx.strokeStyle = `rgb(255, 255, 255)`;\r\n\t\t\t\tboxDrawObj.ctx.strokeRect(\r\n\t\t\t\t\tcalcX,\r\n\t\t\t\t\tcalcY,\r\n\t\t\t\t\tboxDrawObj.pixelWidth,\r\n\t\t\t\t\tboxDrawObj.pixelHeight\r\n\t\t\t\t);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tboxDrawObj.ctx2.fillStyle = pixel.color;\r\n\t\t\tboxDrawObj.ctx2.fillRect(\r\n\t\t\t\tcalcX,\r\n\t\t\t\tcalcY,\r\n\t\t\t\tboxDrawObj.pixelWidth,\r\n\t\t\t\tboxDrawObj.pixelHeight\r\n\t\t\t);\r\n\t\t\tboxDrawObj.ctx2.strokeStyle = `rgb(255, 255, 255)`;\r\n\t\t\tboxDrawObj.ctx2.strokeRect(\r\n\t\t\t\tcalcX,\r\n\t\t\t\tcalcY,\r\n\t\t\t\tboxDrawObj.pixelWidth,\r\n\t\t\t\tboxDrawObj.pixelHeight\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n\treturn usingMatrix;\r\n};\r\nclass PixelNode {\r\n\tconstructor(xStart, yStart, color = '#020') {\r\n\t\tthis.xStart = xStart;\r\n\t\tthis.yStart = yStart;\r\n\t\tthis.color = color;\r\n\t}\r\n}\r\nclass InputNode {\r\n\tconstructor(ctx, ctx2, matrix, pixelWidth, pixelHeight) {\r\n\t\tthis.ctx = ctx;\r\n\t\tthis.ctx2 = ctx2;\r\n\t\tthis.matrix = matrix;\r\n\t\tthis.pixelWidth = pixelWidth;\r\n\t\tthis.pixelHeight = pixelHeight;\r\n\t}\r\n}\r\n\r\nconst whatToPlace = (boxDrawObj, xStart, yStart) => {\r\n\tconst rollColor = roll(3);\r\n\tlet pixel = new PixelNode(xStart, yStart);\r\n\tswitch (rollColor) {\r\n\t\tcase 1:\r\n\t\t\tpixel.color = boxDrawObj.backgroundColor;\r\n\t\t\tbreak;\r\n\t\tcase 2:\r\n\t\t\tpixel.color = boxDrawObj.primaryColor;\r\n\t\t\tbreak;\r\n\t\tcase 3:\r\n\t\t\tpixel.color = boxDrawObj.secondaryColor;\r\n\t\t\tbreak;\r\n\t\tdefault:\r\n\t\t\tconsole.log('error, sorry');\r\n\t}\r\n\treturn pixel;\r\n};\r\n\r\nconst createPixelMap = (boxDrawObj, patternOverride) => {\r\n\tconst newMatrix = [];\r\n\tif (patternOverride === 'noPattern') {\r\n\t\t//this will cycle through y axis on pixel height\r\n\t\tfor (\r\n\t\t\tlet y = 0;\r\n\t\t\ty < boxDrawObj.canvasHeight;\r\n\t\t\ty += boxDrawObj.pixelHeight\r\n\t\t) {\r\n\t\t\tlet row = [];\r\n\t\t\t//this will cycle through x axis on pixel width\r\n\t\t\tfor (\r\n\t\t\t\tlet x = 0;\r\n\t\t\t\tx < boxDrawObj.canvasWidth;\r\n\t\t\t\tx += boxDrawObj.pixelWidth\r\n\t\t\t) {\r\n\t\t\t\t// console.log(`${x} starting pixel draw,`);\r\n\t\t\t\tconst pixel = whatToPlace(boxDrawObj, x, y);\r\n\t\t\t\trow.push(pixel);\r\n\t\t\t}\r\n\t\t\tnewMatrix.push(row);\r\n\t\t}\r\n\t} else {\r\n\t\t//this will cycle through y axis on pixel height\r\n\t\tfor (\r\n\t\t\tlet y = 0;\r\n\t\t\ty < boxDrawObj.drawSectionHeight;\r\n\t\t\ty += boxDrawObj.pixelHeight\r\n\t\t) {\r\n\t\t\tlet row = [];\r\n\t\t\t//this will cycle through x axis on pixel width\r\n\t\t\tfor (\r\n\t\t\t\tlet x = 0;\r\n\t\t\t\tx < boxDrawObj.drawSectionWidth;\r\n\t\t\t\tx += boxDrawObj.pixelWidth\r\n\t\t\t) {\r\n\t\t\t\t// console.log(`${x} starting pixel draw,`);\r\n\t\t\t\tconst pixel = whatToPlace(boxDrawObj, x, y);\r\n\t\t\t\trow.push(pixel);\r\n\t\t\t}\r\n\t\t\tnewMatrix.push(row);\r\n\t\t}\r\n\t}\r\n\treturn newMatrix;\r\n};\r\n\r\nconst combineMatrixTopHalf = (matrix1, matrix2) => {\r\n\tlet combinedMatrix = [];\r\n\tfor (let i = 0; i < matrix1.length; i++) {\r\n\t\tconst combine = [...matrix1[i], ...matrix2[i]];\r\n\t\tcombinedMatrix.push(combine);\r\n\t}\r\n\treturn combinedMatrix;\r\n};\r\nconst combineMatrixLeftHalf = (matrix1, matrix2) => {\r\n\treturn [...matrix1, ...matrix2];\r\n};\r\n\r\nconst findQuadrantOrder = (boxDrawObj) => {\r\n\t// console.log(boxDrawObj);\r\n\tlet order = [];\r\n\tlet quadrantArray = [];\r\n\r\n\twhile (order.length < 4) {\r\n\t\tlet test = roll(4);\r\n\t\tif (!order.includes(test)) {\r\n\t\t\tlet quadrant = {};\r\n\t\t\tswitch (test) {\r\n\t\t\t\tcase 1:\r\n\t\t\t\t\tquadrant.x = 0;\r\n\t\t\t\t\tquadrant.y = 0;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 2:\r\n\t\t\t\t\tquadrant.x = boxDrawObj.drawSectionWidth;\r\n\t\t\t\t\tquadrant.y = 0;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 3:\r\n\t\t\t\t\tquadrant.x = boxDrawObj.drawSectionWidth;\r\n\t\t\t\t\tquadrant.y = boxDrawObj.drawSectionHeight;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 4:\r\n\t\t\t\t\tquadrant.x = 0;\r\n\t\t\t\t\tquadrant.y = boxDrawObj.drawSectionHeight;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tconsole.log('error in findQuadrantOrder');\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\torder.push(test);\r\n\t\t\tquadrantArray.push(quadrant);\r\n\t\t}\r\n\t}\r\n\treturn quadrantArray;\r\n};\r\n\r\nexport {\r\n\tboxDraw,\r\n\tPixelNode,\r\n\tInputNode,\r\n\tcreatePixelMap,\r\n\tcombineMatrixTopHalf,\r\n\tcombineMatrixLeftHalf,\r\n\tfindQuadrantOrder,\r\n};\r\n","import { PixelNode } from '../boxDrawingUtilities.js';\r\n\r\nconst clone = (boxDrawObj, xOffset = 0, yOffset = 0) => {\r\n\tconst usingMatrix = boxDrawObj.matrix;\r\n\tlet xPos = xOffset;\r\n\tlet yPos = yOffset;\r\n\tlet tempMatrix = [];\r\n\r\n\tfor (let matrixRow = 0; matrixRow < usingMatrix.length; matrixRow++) {\r\n\t\tlet rowArr = [];\r\n\t\tfor (\r\n\t\t\tlet matrixColumn = 0;\r\n\t\t\tmatrixColumn < usingMatrix[matrixRow].length;\r\n\t\t\tmatrixColumn++\r\n\t\t) {\r\n\t\t\tconst pixel = usingMatrix[matrixRow][matrixColumn];\r\n\t\t\tconst newPixel = new PixelNode(xPos, yPos, pixel.color);\r\n\r\n\t\t\trowArr.push(newPixel);\r\n\t\t\txPos += boxDrawObj.pixelWidth;\r\n\t\t}\r\n\t\ttempMatrix.push(rowArr);\r\n\t\txPos = xOffset;\r\n\t\tyPos += boxDrawObj.pixelHeight;\r\n\t}\r\n\tyPos = yOffset;\r\n\r\n\treturn tempMatrix;\r\n};\r\n\r\nexport default clone;\r\n","import { boxDraw, InputNode } from '../boxDrawingUtilities.js';\r\nimport clone from '../singles/clone.js';\r\n\r\nconst fullClone = (boxDrawObj) => {\r\n\tlet cloneMatrix1 = [];\r\n\tlet cloneMatrix2 = [];\r\n\tlet cloneMatrix3 = [];\r\n\r\n\tlet inputNode = new InputNode(\r\n\t\tboxDrawObj.ctx,\r\n\t\tboxDrawObj.ctx2,\r\n\t\tboxDrawObj.matrix,\r\n\t\tboxDrawObj.pixelWidth,\r\n\t\tboxDrawObj.pixelHeight\r\n\t);\r\n\r\n\tboxDraw(boxDrawObj);\r\n\r\n\tcloneMatrix1 = clone(boxDrawObj, boxDrawObj.drawSectionWidth, 0);\r\n\r\n\tinputNode.matrix = cloneMatrix1;\r\n\r\n\tboxDraw(inputNode);\r\n\r\n\tcloneMatrix2 = clone(\r\n\t\tboxDrawObj,\r\n\t\tboxDrawObj.drawSectionWidth,\r\n\t\tboxDrawObj.drawSectionHeight\r\n\t);\r\n\r\n\tinputNode.matrix = cloneMatrix2;\r\n\r\n\tboxDraw(inputNode);\r\n\r\n\tcloneMatrix3 = clone(boxDrawObj, 0, boxDrawObj.drawSectionHeight);\r\n\r\n\tinputNode.matrix = cloneMatrix3;\r\n\r\n\tboxDraw(inputNode);\r\n};\r\n\r\nexport default fullClone;\r\n","import { PixelNode } from '../boxDrawingUtilities.js';\r\n\r\nconst rotateClockwise = (boxDrawObj, xOffset = 0, yOffset = 0) => {\r\n\tconst useMatrix = boxDrawObj.matrix;\r\n\tlet xPos = xOffset;\r\n\tlet yPos = yOffset;\r\n\tlet tempMatrix = [];\r\n\tlet rotatedMatrix = [];\r\n\r\n\tfor (let column = 0; column < useMatrix[0].length; column++) {\r\n\t\tlet rowArr = [];\r\n\r\n\t\tfor (let row = useMatrix.length - 1; row >= 0; row--) {\r\n\t\t\tconst pixel = useMatrix[row][column];\r\n\t\t\tconst newPixel = new PixelNode(xPos, yPos, pixel.color);\r\n\r\n\t\t\trowArr.push(newPixel);\r\n\t\t\txPos += boxDrawObj.pixelWidth;\r\n\t\t}\r\n\t\ttempMatrix.push(rowArr);\r\n\t\txPos = xOffset;\r\n\t\tyPos += boxDrawObj.pixelHeight;\r\n\t}\r\n\tyPos = yOffset;\r\n\trotatedMatrix = [...tempMatrix];\r\n\r\n\treturn rotatedMatrix;\r\n};\r\n\r\nconst rotateCounterClockwise = (boxDrawObj, xOffset = 0, yOffset = 0) => {\r\n\tconst useMatrix = boxDrawObj.matrix;\r\n\t//loop columns reverse\r\n\t//loop over rows in order\r\n\tlet xPos = xOffset;\r\n\tlet yPos = yOffset;\r\n\tlet tempMatrix = [];\r\n\tlet rotatedMatrix = [];\r\n\r\n\tfor (let column = useMatrix[0].length - 1; column >= 0; column--) {\r\n\t\tlet rowArr = [];\r\n\r\n\t\tfor (let row = 0; row < useMatrix.length; row++) {\r\n\t\t\tconst pixel = useMatrix[row][column];\r\n\t\t\tconst newPixel = new PixelNode(xPos, yPos, pixel.color);\r\n\r\n\t\t\trowArr.push(newPixel);\r\n\t\t\txPos += boxDrawObj.pixelWidth;\r\n\t\t}\r\n\t\ttempMatrix.push(rowArr);\r\n\t\txPos = xOffset;\r\n\t\tyPos += boxDrawObj.pixelHeight;\r\n\t}\r\n\tyPos = yOffset;\r\n\trotatedMatrix = [...tempMatrix];\r\n\r\n\treturn rotatedMatrix;\r\n};\r\n\r\nexport { rotateClockwise, rotateCounterClockwise };\r\n","import { rotateClockwise } from '../singles/rotate.js';\r\nimport { boxDraw, InputNode } from '../boxDrawingUtilities.js';\r\n\r\nconst fullRotate = (boxDrawObj) => {\r\n\tlet rotatedMatrix1 = [];\r\n\tlet rotatedMatrix2 = [];\r\n\tlet rotatedMatrix3 = [];\r\n\r\n\tboxDraw(boxDrawObj);\r\n\r\n\tlet inputNode = new InputNode(\r\n\t\tboxDrawObj.ctx,\r\n\t\tboxDrawObj.ctx2,\r\n\t\tboxDrawObj.matrix,\r\n\t\tboxDrawObj.pixelWidth,\r\n\t\tboxDrawObj.pixelHeight\r\n\t);\r\n\r\n\trotatedMatrix1 = rotateClockwise(boxDrawObj);\r\n\r\n\tinputNode.matrix = rotatedMatrix1;\r\n\r\n\tboxDraw(inputNode, boxDrawObj.drawSectionWidth, 0);\r\n\r\n\trotatedMatrix2 = rotateClockwise(inputNode);\r\n\r\n\tinputNode.matrix = rotatedMatrix2;\r\n\r\n\tboxDraw(\r\n\t\tinputNode,\r\n\t\tboxDrawObj.drawSectionWidth,\r\n\t\tboxDrawObj.drawSectionHeight\r\n\t);\r\n\r\n\trotatedMatrix3 = rotateClockwise(inputNode);\r\n\r\n\tinputNode.matrix = rotatedMatrix3;\r\n\r\n\tboxDraw(inputNode, 0, boxDrawObj.drawSectionHeight);\r\n};\r\n\r\nexport default fullRotate;\r\n","import { PixelNode } from '../boxDrawingUtilities.js';\r\n\r\nconst reflectVerticalAxis = (boxDrawObj, xOffset = 0, yOffset = 0) => {\r\n\tconst useMatrix = boxDrawObj.matrix;\r\n\tlet xPos = xOffset;\r\n\tlet yPos = yOffset;\r\n\tlet tempMatrix = [];\r\n\tfor (let row = 0; row < useMatrix.length; row++) {\r\n\t\tlet rowArr = [];\r\n\t\tfor (let column = useMatrix[row].length - 1; column >= 0; column--) {\r\n\t\t\tconst pixel = useMatrix[row][column];\r\n\t\t\tconst newPixel = new PixelNode(xPos, yPos, pixel.color);\r\n\r\n\t\t\trowArr.push(newPixel);\r\n\t\t\txPos += boxDrawObj.pixelWidth;\r\n\t\t}\r\n\t\ttempMatrix.push(rowArr);\r\n\t\txPos = xOffset;\r\n\t\tyPos += boxDrawObj.pixelHeight;\r\n\t}\r\n\tyPos = yOffset;\r\n\r\n\treturn tempMatrix;\r\n};\r\n\r\nconst reflectHorizontalAxis = (boxDrawObj, xOffset = 0, yOffset = 0) => {\r\n\tconst useMatrix = boxDrawObj.matrix;\r\n\tlet xPos = xOffset;\r\n\tlet yPos = yOffset;\r\n\tlet tempMatrix = [];\r\n\tfor (let row = useMatrix.length - 1; row >= 0; row--) {\r\n\t\tlet rowArr = [];\r\n\t\tfor (let column = 0; column < useMatrix[row].length; column++) {\r\n\t\t\tconst pixel = useMatrix[row][column];\r\n\t\t\tconst newPixel = new PixelNode(xPos, yPos, pixel.color);\r\n\r\n\t\t\trowArr.push(newPixel);\r\n\t\t\txPos += boxDrawObj.pixelWidth;\r\n\t\t}\r\n\t\ttempMatrix.push(rowArr);\r\n\t\txPos = xOffset;\r\n\t\tyPos += boxDrawObj.pixelHeight;\r\n\t}\r\n\tyPos = yOffset;\r\n\r\n\treturn tempMatrix;\r\n};\r\n\r\nexport { reflectVerticalAxis, reflectHorizontalAxis };\r\n","import {\r\n\treflectVerticalAxis,\r\n\treflectHorizontalAxis,\r\n} from '../singles/reflect.js';\r\nimport {\r\n\tboxDraw,\r\n\tInputNode,\r\n\tcombineMatrixTopHalf,\r\n} from '../boxDrawingUtilities.js';\r\n\r\nconst fullReflect = (boxDrawObj) => {\r\n\tlet adjustedMatrix = [];\r\n\tlet combinedMatrix = [];\r\n\tlet reflectedMatrix = [];\r\n\r\n\tlet inputNode = new InputNode(\r\n\t\tboxDrawObj.ctx,\r\n\t\tboxDrawObj.ctx2,\r\n\t\tboxDrawObj.matrix,\r\n\t\tboxDrawObj.pixelWidth,\r\n\t\tboxDrawObj.pixelHeight\r\n\t);\r\n\r\n\tboxDraw(inputNode);\r\n\r\n\tadjustedMatrix = reflectVerticalAxis(\r\n\t\tboxDrawObj,\r\n\t\tboxDrawObj.drawSectionWidth,\r\n\t\t0\r\n\t);\r\n\r\n\tinputNode.matrix = adjustedMatrix;\r\n\r\n\tboxDraw(inputNode);\r\n\r\n\tcombinedMatrix = combineMatrixTopHalf(boxDrawObj.matrix, adjustedMatrix);\r\n\r\n\tinputNode.matrix = combinedMatrix;\r\n\r\n\treflectedMatrix = reflectHorizontalAxis(\r\n\t\tinputNode,\r\n\t\t0,\r\n\t\tboxDrawObj.drawSectionHeight\r\n\t);\r\n\r\n\tinputNode.matrix = reflectedMatrix;\r\n\r\n\tboxDraw(inputNode);\r\n};\r\n\r\nexport default fullReflect;\r\n","import { roll } from '../../utilities.js';\r\nimport {\r\n\tboxDraw,\r\n\tInputNode,\r\n\tcombineMatrixLeftHalf,\r\n\tcombineMatrixTopHalf,\r\n} from '../boxDrawingUtilities.js';\r\nimport clone from '../singles/clone.js';\r\nimport {\r\n\treflectVerticalAxis,\r\n\treflectHorizontalAxis,\r\n} from '../singles/reflect.js';\r\n\r\nconst halfReflect = (boxDrawObj) => {\r\n\tboxDraw(boxDrawObj);\r\n\tlet clonedMatrix = [];\r\n\tlet combinedMatrix = [];\r\n\tlet reflectedMatrix = [];\r\n\r\n\tlet inputNode = new InputNode(\r\n\t\tboxDrawObj.ctx,\r\n\t\tboxDrawObj.ctx2,\r\n\t\tboxDrawObj.matrix,\r\n\t\tboxDrawObj.pixelWidth,\r\n\t\tboxDrawObj.pixelHeight\r\n\t);\r\n\r\n\tconst quadrantDice = roll(2);\r\n\tswitch (quadrantDice) {\r\n\t\tcase 1:\r\n\t\t\t//horizontal reflect\r\n\t\t\tclonedMatrix = clone(boxDrawObj, boxDrawObj.drawSectionWidth, 0);\r\n\r\n\t\t\tinputNode.matrix = clonedMatrix;\r\n\r\n\t\t\tboxDraw(inputNode);\r\n\r\n\t\t\tcombinedMatrix = combineMatrixTopHalf(\r\n\t\t\t\tboxDrawObj.matrix,\r\n\t\t\t\tclonedMatrix\r\n\t\t\t);\r\n\r\n\t\t\tinputNode.matrix = combinedMatrix;\r\n\r\n\t\t\treflectedMatrix = reflectHorizontalAxis(\r\n\t\t\t\tinputNode,\r\n\t\t\t\t0,\r\n\t\t\t\tboxDrawObj.drawSectionHeight\r\n\t\t\t);\r\n\r\n\t\t\tinputNode.matrix = reflectedMatrix;\r\n\r\n\t\t\tboxDraw(inputNode);\r\n\r\n\t\t\tbreak;\r\n\t\tcase 2:\r\n\t\t\t//vertical reflect\r\n\t\t\tclonedMatrix = clone(boxDrawObj, 0, boxDrawObj.drawSectionHeight);\r\n\r\n\t\t\tinputNode.matrix = clonedMatrix;\r\n\r\n\t\t\tboxDraw(inputNode);\r\n\r\n\t\t\tcombinedMatrix = combineMatrixLeftHalf(\r\n\t\t\t\tboxDrawObj.matrix,\r\n\t\t\t\tclonedMatrix\r\n\t\t\t);\r\n\r\n\t\t\tinputNode.matrix = combinedMatrix;\r\n\r\n\t\t\treflectedMatrix = reflectVerticalAxis(\r\n\t\t\t\tinputNode,\r\n\t\t\t\tboxDrawObj.drawSectionWidth,\r\n\t\t\t\t0\r\n\t\t\t);\r\n\r\n\t\t\tinputNode.matrix = reflectedMatrix;\r\n\r\n\t\t\tboxDraw(inputNode);\r\n\t\t\tbreak;\r\n\t\tdefault:\r\n\t\t\tconsole.log('error in halfReflect switch');\r\n\t\t\tbreak;\r\n\t}\r\n};\r\n\r\nexport default halfReflect;\r\n","import { boxDraw, InputNode, createPixelMap } from '../boxDrawingUtilities.js';\r\n\r\nconst noPattern = (boxDrawObj) => {\r\n\tlet inputNode = new InputNode(\r\n\t\tboxDrawObj.ctx,\r\n\t\tboxDrawObj.ctx2,\r\n\t\tboxDrawObj.matrix,\r\n\t\tboxDrawObj.pixelWidth,\r\n\t\tboxDrawObj.pixelHeight\r\n\t);\r\n\r\n\tlet getMatrix = createPixelMap(boxDrawObj, 'noPattern');\r\n\tinputNode.matrix = getMatrix;\r\n\r\n\tboxDraw(inputNode);\r\n};\r\n\r\nexport default noPattern;\r\n","import { roll } from '../../utilities.js';\r\nimport fullClone from './fullClone.js';\r\nimport fullRotate from './fullRotate.js';\r\nimport fullReflect from './fullReflect.js';\r\nimport halfReflect from './halfReflect.js';\r\nimport noPattern from './noPattern.js';\r\n\r\nconst specials = (boxDrawObj) => {\r\n\tif (!boxDrawObj.drawStyle || boxDrawObj.drawStyle === 'random') {\r\n\t\tconst dice = roll(5);\r\n\t\tswitch (dice) {\r\n\t\t\tcase 1:\r\n\t\t\t\tfullClone(boxDrawObj);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 2:\r\n\t\t\t\tfullRotate(boxDrawObj);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 3:\r\n\t\t\t\tfullReflect(boxDrawObj);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 4:\r\n\t\t\t\thalfReflect(boxDrawObj);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 5:\r\n\t\t\t\tnoPattern(boxDrawObj);\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tconsole.log('error in layout variable');\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t} else {\r\n\t\tswitch (boxDrawObj.drawStyle) {\r\n\t\t\tcase 'fullClone':\r\n\t\t\t\tfullClone(boxDrawObj);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'fullReflect':\r\n\t\t\t\tfullReflect(boxDrawObj);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'fullRotate':\r\n\t\t\t\tfullRotate(boxDrawObj);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'halfReflect':\r\n\t\t\t\thalfReflect(boxDrawObj);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'noPattern':\r\n\t\t\t\tnoPattern(boxDrawObj);\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tconsole.log('error in forcedraw of specials');\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n};\r\n\r\nexport default specials;\r\n","import { roll } from '../../utilities.js';\r\nimport {\r\n\tfindQuadrantOrder,\r\n\tboxDraw,\r\n\tInputNode,\r\n} from '../boxDrawingUtilities.js';\r\nimport clone from './clone.js';\r\nimport { reflectVerticalAxis, reflectHorizontalAxis } from './reflect.js';\r\nimport { rotateClockwise, rotateCounterClockwise } from './rotate.js';\r\n\r\nconst singles = (boxDrawObj) => {\r\n\tconst quadrantDice = findQuadrantOrder(boxDrawObj);\r\n\tconst styleDice = [1, roll(3), roll(3), roll(3)];\r\n\r\n\tstyleDice.forEach((number, index) => {\r\n\t\tconst xPos = quadrantDice[index].x;\r\n\t\tconst yPos = quadrantDice[index].y;\r\n\t\tlet adjustedMatrix = [];\r\n\r\n\t\tlet inputNode = new InputNode(\r\n\t\t\tboxDrawObj.ctx,\r\n\t\t\tboxDrawObj.ctx2,\r\n\t\t\tboxDrawObj.matrix,\r\n\t\t\tboxDrawObj.pixelWidth,\r\n\t\t\tboxDrawObj.pixelHeight\r\n\t\t);\r\n\r\n\t\tswitch (number) {\r\n\t\t\tcase 1:\r\n\t\t\t\t//clone\r\n\t\t\t\tadjustedMatrix = clone(boxDrawObj, xPos, yPos);\r\n\r\n\t\t\t\tinputNode.matrix = adjustedMatrix;\r\n\r\n\t\t\t\tboxDraw(inputNode);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 2:\r\n\t\t\t\t//reflect\r\n\t\t\t\tconst directionDiceReflect = roll(2); // 1 = vertical axis reflect. 2 = horizontal axis reflect\r\n\r\n\t\t\t\tdirectionDiceReflect === 1\r\n\t\t\t\t\t? (adjustedMatrix = reflectVerticalAxis(\r\n\t\t\t\t\t\t\tboxDrawObj,\r\n\t\t\t\t\t\t\txPos,\r\n\t\t\t\t\t\t\tyPos\r\n\t\t\t\t\t  ))\r\n\t\t\t\t\t: (adjustedMatrix = reflectHorizontalAxis(\r\n\t\t\t\t\t\t\tboxDrawObj,\r\n\t\t\t\t\t\t\txPos,\r\n\t\t\t\t\t\t\tyPos\r\n\t\t\t\t\t  ));\r\n\r\n\t\t\t\tinputNode.matrix = adjustedMatrix;\r\n\r\n\t\t\t\tboxDraw(inputNode);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 3:\r\n\t\t\t\t//rotate\r\n\t\t\t\tconst directionDiceRotate = roll(2); // 1 = clockwise rotate. 2 = counter clockwise rotate\r\n\r\n\t\t\t\tdirectionDiceRotate === 1\r\n\t\t\t\t\t? (adjustedMatrix = rotateClockwise(boxDrawObj, xPos, yPos))\r\n\t\t\t\t\t: (adjustedMatrix = rotateCounterClockwise(\r\n\t\t\t\t\t\t\tboxDrawObj,\r\n\t\t\t\t\t\t\txPos,\r\n\t\t\t\t\t\t\tyPos\r\n\t\t\t\t\t  ));\r\n\r\n\t\t\t\tinputNode.matrix = adjustedMatrix;\r\n\r\n\t\t\t\tboxDraw(inputNode);\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tconsole.log('error in number variable');\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t});\r\n};\r\n\r\nexport default singles;\r\n","import { roll } from '../../utilities.js';\r\nimport { InputNode } from '../boxDrawingUtilities.js';\r\nimport {\r\n\tboxDraw,\r\n\tcombineMatrixTopHalf,\r\n\tcombineMatrixLeftHalf,\r\n} from '../boxDrawingUtilities.js';\r\nimport clone from '../singles/clone.js';\r\nimport {\r\n\treflectHorizontalAxis,\r\n\treflectVerticalAxis,\r\n} from '../singles/reflect.js';\r\nimport { rotateClockwise, rotateCounterClockwise } from '../singles/rotate.js';\r\n\r\nconst doubles = (boxDrawObj) => {\r\n\tboxDraw(boxDrawObj);\r\n\tconst quadrantDice = roll(2); // 1 = q2. 2 = q3\r\n\tconst styleDice = roll(3); // 1= clone, 2= rotate, 3= reflect\r\n\tconst doubleDice = roll(3); // 1= clone, 2= rotate x2, 3= reflect\r\n\tlet directionDice = 0;\r\n\tlet adjustedMatrix = [];\r\n\r\n\tconst quadrant =\r\n\t\tquadrantDice === 1\r\n\t\t\t? { x: boxDrawObj.drawSectionWidth, y: 0 }\r\n\t\t\t: { x: 0, y: boxDrawObj.drawSectionHeight };\r\n\tconst quadrantDouble =\r\n\t\tquadrantDice === 1\r\n\t\t\t? { x: 0, y: boxDrawObj.drawSectionHeight }\r\n\t\t\t: { x: boxDrawObj.drawSectionWidth, y: 0 };\r\n\r\n\tlet inputNode = new InputNode(\r\n\t\tboxDrawObj.ctx,\r\n\t\tboxDrawObj.ctx2,\r\n\t\tboxDrawObj.matrix,\r\n\t\tboxDrawObj.pixelWidth,\r\n\t\tboxDrawObj.pixelHeight\r\n\t);\r\n\r\n\tswitch (styleDice) {\r\n\t\tcase 1:\r\n\t\t\t//clone\r\n\t\t\tadjustedMatrix = clone(boxDrawObj, quadrant.x, quadrant.y);\r\n\r\n\t\t\tinputNode.matrix = adjustedMatrix;\r\n\r\n\t\t\tboxDraw(inputNode);\r\n\t\t\tbreak;\r\n\t\tcase 2:\r\n\t\t\t//rotate\r\n\t\t\tdirectionDice = roll(2); // 1 = clockwise. 2 = counter clockwise\r\n\t\t\tdirectionDice === 1\r\n\t\t\t\t? (adjustedMatrix = rotateClockwise(\r\n\t\t\t\t\t\tinputNode,\r\n\t\t\t\t\t\tquadrant.x,\r\n\t\t\t\t\t\tquadrant.y\r\n\t\t\t\t  ))\r\n\t\t\t\t: (adjustedMatrix = rotateCounterClockwise(\r\n\t\t\t\t\t\tinputNode,\r\n\t\t\t\t\t\tquadrant.x,\r\n\t\t\t\t\t\tquadrant.y\r\n\t\t\t\t  ));\r\n\r\n\t\t\tinputNode.matrix = adjustedMatrix;\r\n\r\n\t\t\tboxDraw(inputNode);\r\n\t\t\tbreak;\r\n\t\tcase 3:\r\n\t\t\t//reflect\r\n\r\n\t\t\tdirectionDice = roll(2); // 1 = vertical axis reflect. 2 = horizontal axis reflect\r\n\t\t\tdirectionDice === 1\r\n\t\t\t\t? (adjustedMatrix = reflectVerticalAxis(\r\n\t\t\t\t\t\tinputNode,\r\n\t\t\t\t\t\tquadrant.x,\r\n\t\t\t\t\t\tquadrant.y\r\n\t\t\t\t  ))\r\n\t\t\t\t: (adjustedMatrix = reflectHorizontalAxis(\r\n\t\t\t\t\t\tinputNode,\r\n\t\t\t\t\t\tquadrant.x,\r\n\t\t\t\t\t\tquadrant.y\r\n\t\t\t\t  ));\r\n\r\n\t\t\tinputNode.matrix = adjustedMatrix;\r\n\r\n\t\t\tboxDraw(inputNode);\r\n\t\t\tbreak;\r\n\t\tdefault:\r\n\t\t\tconsole.log('error in style dice variable');\r\n\t\t\tbreak;\r\n\t}\r\n\r\n\tlet combinedMatrix = [];\r\n\tquadrantDice === 1\r\n\t\t? (combinedMatrix = combineMatrixTopHalf(\r\n\t\t\t\tboxDrawObj.matrix,\r\n\t\t\t\tadjustedMatrix\r\n\t\t  ))\r\n\t\t: (combinedMatrix = combineMatrixLeftHalf(\r\n\t\t\t\tboxDrawObj.matrix,\r\n\t\t\t\tadjustedMatrix\r\n\t\t  ));\r\n\tlet rotatedMatrix = [];\r\n\tlet reflectedMatrix = [];\r\n\r\n\tinputNode.matrix = combinedMatrix;\r\n\r\n\tswitch (doubleDice) {\r\n\t\tcase 1:\r\n\t\t\t//clone\r\n\r\n\t\t\tboxDraw(inputNode, quadrantDouble.x, quadrantDouble.y);\r\n\t\t\tbreak;\r\n\t\tcase 2: //quadrantDice === 1, combine top\r\n\t\t\t//rotate\r\n\r\n\t\t\trotatedMatrix = rotateClockwise(inputNode);\r\n\t\t\tinputNode.matrix = rotatedMatrix;\r\n\t\t\trotatedMatrix = rotateClockwise(\r\n\t\t\t\tinputNode,\r\n\t\t\t\tquadrantDouble.x,\r\n\t\t\t\tquadrantDouble.y\r\n\t\t\t); // rotate twice\r\n\r\n\t\t\tinputNode.matrix = rotatedMatrix;\r\n\r\n\t\t\tboxDraw(inputNode);\r\n\t\t\tbreak;\r\n\t\tcase 3: // quadrantDice === 1, reflect horizontal : reflect vertical\r\n\t\t\t//reflect\r\n\t\t\treflectedMatrix =\r\n\t\t\t\tquadrantDice === 1\r\n\t\t\t\t\t? reflectHorizontalAxis(\r\n\t\t\t\t\t\t\tinputNode,\r\n\t\t\t\t\t\t\tquadrantDouble.x,\r\n\t\t\t\t\t\t\tquadrantDouble.y\r\n\t\t\t\t\t  )\r\n\t\t\t\t\t: reflectVerticalAxis(\r\n\t\t\t\t\t\t\tinputNode,\r\n\t\t\t\t\t\t\tquadrantDouble.x,\r\n\t\t\t\t\t\t\tquadrantDouble.y\r\n\t\t\t\t\t  );\r\n\r\n\t\t\tinputNode.matrix = reflectedMatrix;\r\n\r\n\t\t\tboxDraw(inputNode);\r\n\r\n\t\t\tbreak;\r\n\r\n\t\tdefault:\r\n\t\t\tconsole.log('error in style dice variable');\r\n\t\t\tbreak;\r\n\t}\r\n};\r\n\r\nexport default doubles;\r\n","import specials from './specials/specials.js';\r\nimport singles from './singles/singles.js';\r\nimport doubles from './doubles/doubles.js';\r\nimport { roll, clear, randomColor } from '../utilities.js';\r\nimport { boxDraw, createPixelMap } from './boxDrawingUtilities.js';\r\n\r\nimport { createCanvasTemplate, createCanvasDraw } from '../utilities.js';\r\n\r\nconst BoxDrawing = (forceDesignObj) => {\r\n\t// if(forceDesignObj)\r\n\tlet { dimensions, boxDrawObj } = forceDesignObj;\r\n\tlet width, height;\r\n\tif (dimensions) {\r\n\t\twidth = dimensions.width;\r\n\t\theight = dimensions.height;\r\n\t}\r\n\r\n\tconst canvasWidth = width ? width : 500;\r\n\tconst canvasHeight = height ? height : 500;\r\n\tconst matrix = [];\r\n\tconst boxCount = boxDrawObj.boxCount || 10;\r\n\tconst pixelWidth = canvasWidth / boxCount || 250;\r\n\tconst pixelHeight = canvasHeight / boxCount || 250;\r\n\tconst drawSectionWidth = Math.floor(canvasWidth / 2);\r\n\tconst drawSectionHeight = Math.floor(canvasHeight / 2);\r\n\r\n\tconst primaryToggle = boxDrawObj.primaryToggle || 'default';\r\n\tconst secondaryToggle = boxDrawObj.secondaryToggle || 'default';\r\n\tconst backgroundToggle = boxDrawObj.backgroundToggle || 'default';\r\n\r\n\tconst [canvasTemplate, ctx] = createCanvasTemplate(\r\n\t\tdrawSectionWidth,\r\n\t\tdrawSectionHeight\r\n\t);\r\n\tconst [canvasDraw, ctx2] = createCanvasDraw(canvasWidth, canvasHeight);\r\n\r\n\tswitch (primaryToggle) {\r\n\t\tcase 'default':\r\n\t\t\tboxDrawObj.primaryColor = '#000000';\r\n\t\t\tbreak;\r\n\t\tcase 'random':\r\n\t\t\tboxDrawObj.primaryColor = randomColor();\r\n\t\t\tbreak;\r\n\t\tcase 'choose':\r\n\t\t\tlet inputColor;\r\n\t\t\tif (!boxDrawObj.primaryColor) {\r\n\t\t\t\tinputColor = '#000000';\r\n\t\t\t} else {\r\n\t\t\t\tinputColor = boxDrawObj.primaryColor;\r\n\t\t\t}\r\n\t\t\tboxDrawObj.primaryColor = inputColor;\r\n\t\t\tbreak;\r\n\t\tdefault:\r\n\t\t\tconsole.log('error in primarytoggle');\r\n\t\t\tboxDrawObj.primaryColor = '#000000';\r\n\t\t\tbreak;\r\n\t}\r\n\r\n\tswitch (secondaryToggle) {\r\n\t\tcase 'default':\r\n\t\tcase 'random':\r\n\t\t\tboxDrawObj.secondaryColor = randomColor(); //new color seed on refresh;\r\n\t\t\tbreak;\r\n\t\tcase 'choose':\r\n\t\t\tlet inputColor;\r\n\t\t\tif (!boxDrawObj.secondaryColor) {\r\n\t\t\t\tinputColor = '#8C00FF';\r\n\t\t\t} else {\r\n\t\t\t\tinputColor = boxDrawObj.secondaryColor;\r\n\t\t\t}\r\n\t\t\tboxDrawObj.secondaryColor = inputColor;\r\n\t\t\tbreak;\r\n\t\tdefault:\r\n\t\t\tconsole.log('error in secondaryToggle');\r\n\t\t\tboxDrawObj.secondaryColor = randomColor();\r\n\t\t\tbreak;\r\n\t}\r\n\r\n\tswitch (backgroundToggle) {\r\n\t\tcase 'default':\r\n\t\t\tboxDrawObj.backgroundColor = '#ffffff00';\r\n\t\t\tbreak;\r\n\t\tcase 'random':\r\n\t\t\tboxDrawObj.backgroundColor = randomColor();\r\n\t\t\tbreak;\r\n\t\tcase 'choose':\r\n\t\t\tlet inputColor;\r\n\t\t\tif (!boxDrawObj.backgroundColor) {\r\n\t\t\t\tinputColor = '#ffffff00';\r\n\t\t\t} else {\r\n\t\t\t\tinputColor = boxDrawObj.backgroundColor;\r\n\t\t\t}\r\n\t\t\tboxDrawObj.backgroundColor = inputColor;\r\n\t\t\tbreak;\r\n\t\tdefault:\r\n\t\t\tconsole.log('error in backgroundToggle');\r\n\t\t\tboxDrawObj.backgroundColor = '#ffffff00';\r\n\t\t\tbreak;\r\n\t}\r\n\t//build up input obj\r\n\tboxDrawObj = {\r\n\t\t...boxDrawObj,\r\n\t\tcanvasWidth,\r\n\t\tcanvasHeight,\r\n\t\tmatrix,\r\n\t\tboxCount,\r\n\t\tpixelWidth,\r\n\t\tpixelHeight,\r\n\t\tdrawSectionWidth,\r\n\t\tdrawSectionHeight,\r\n\t\tcanvasTemplate,\r\n\t\tctx,\r\n\t\tcanvasDraw,\r\n\t\tctx2,\r\n\t};\r\n\r\n\tif (boxDrawObj.canvasDraw.getContext) {\r\n\t\t//clear previous matrix\r\n\t\tboxDrawObj.matrix = clear(boxDrawObj);\r\n\t\t//create new matrix\r\n\t\tboxDrawObj.matrix = [...createPixelMap(boxDrawObj)];\r\n\r\n\t\tboxDraw(boxDrawObj); // draw on ctx not ctx2\r\n\r\n\t\tswitch (boxDrawObj.drawStyle || 'random') {\r\n\t\t\tcase 'random':\r\n\t\t\t\tlet dice = roll(3);\r\n\t\t\t\tswitch (dice) {\r\n\t\t\t\t\tcase 1:\r\n\t\t\t\t\t\tspecials(boxDrawObj);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 2:\r\n\t\t\t\t\t\tsingles(boxDrawObj);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 3:\r\n\t\t\t\t\t\tdoubles(boxDrawObj);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\tconsole.log('error in layout variable no dice');\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tspecials(boxDrawObj);\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t} else {\r\n\t\talert('You need Safari or Firefox 1.5+ to see this demo.');\r\n\t}\r\n\t//convert canvas to an image\r\n\t//return image\r\n\t// return ctx2;\r\n\r\n\tconst dataURL = boxDrawObj.canvasDraw.toDataURL('image/png');\r\n\treturn dataURL;\r\n};\r\n\r\nexport { BoxDrawing };\r\n","import { roll } from '../../utilities.js';\r\nconst getStrokeWidth = (shapeCount) => {\r\n    let dice;\r\n    switch (shapeCount) {\r\n        case shapeCount > 100:\r\n            dice = 1;\r\n            break;\r\n        case shapeCount > 90:\r\n            dice = roll(2);\r\n            break;\r\n        case shapeCount > 60:\r\n            dice = roll(3);\r\n            break;\r\n        case shapeCount > 40:\r\n            dice = roll(4);\r\n            break;\r\n        default:\r\n            dice = roll(5);\r\n            break;\r\n    }\r\n    return dice;\r\n};\r\n\r\nexport default getStrokeWidth;\r\n","import { randomColor, lightColor, darkColor } from '../../utilities.js';\r\n\r\nconst getColorType = (inputs) => {\r\n    if (inputs.clearSwitch) {\r\n        return randomColor();\r\n    }\r\n\r\n    if (inputs.blendMode === 'screen') {\r\n        return darkColor(inputs.shapeCount);\r\n    } else if (inputs.blendMode === 'multiply') {\r\n        return lightColor(inputs.shapeCount);\r\n    } else {\r\n        return randomColor();\r\n    }\r\n    // return inputs;\r\n};\r\nexport default getColorType;\r\n","import { coinFlip } from '../../utilities.js';\r\nimport getStrokeWidth from './_getStrokeWidth.js';\r\nimport getColorType from './_getColorType.js';\r\n\r\nconst checkIndividualSwitches = (type, inputs) => {\r\n    if (!type) {\r\n        console.log('error in checkIndividual switch, no type');\r\n        return inputs;\r\n    }\r\n    if (type === 'clear') {\r\n        if (inputs.clearIndividual) {\r\n            inputs.clearSwitch = coinFlip();\r\n        }\r\n    }\r\n    if (type === 'fill') {\r\n        // if (inputs.fillIndividual) {\r\n        //     inputs.fillSwitch = coinFlip();\r\n        // }\r\n        if (inputs.fillSwitch) {\r\n            if (inputs.fillColorIndividual) {\r\n                inputs.fillColor = getColorType(inputs);\r\n            }\r\n        }\r\n    }\r\n    if (type === 'stroke') {\r\n        // if (inputs.strokeIndividual) {\r\n        //     inputs.strokeSwitch = coinFlip();\r\n        // }\r\n        if (inputs.strokeSwitch) {\r\n            if (inputs.strokeColorIndividual) {\r\n                inputs.strokeColor = getColorType(inputs);\r\n            }\r\n            if (inputs.strokeWidthIndividual) {\r\n                inputs.strokeWidth = getStrokeWidth(inputs.shapeCount);\r\n            }\r\n        }\r\n    }\r\n\r\n    return inputs;\r\n};\r\nexport default checkIndividualSwitches;\r\n","// import { ctx2 } from '../../MandalaDrawing.js';\r\n// import { roll } from '../../../utilities.js';\r\n\r\nconst starburst = (inputs) => {\r\n\t//starburst\r\n\tinputs.ctx2.save();\r\n\tinputs.ctx2.moveTo(inputs.pathRadius - inputs.shapeSize, 0);\r\n\tinputs.ctx2.lineTo(inputs.shapeSize, 0);\r\n\tinputs.ctx2.restore();\r\n\t//starburst\r\n};\r\nconst slant = (inputs) => {\r\n\t//slant\r\n\tinputs.ctx2.save();\r\n\tinputs.ctx2.moveTo(\r\n\t\tinputs.pathRadius - inputs.shapeSize,\r\n\t\tinputs.pathRadius - inputs.shapeSize\r\n\t);\r\n\tinputs.ctx2.lineTo(-inputs.shapeSize / 2, inputs.shapeSize / 2);\r\n\tinputs.ctx2.restore();\r\n\t// ctx2.stroke();\r\n\t//slant\r\n};\r\n\r\nexport { starburst, slant };\r\n","// import { ctx2 } from '../../mandalaDrawing.js';\r\nimport checkIndividualSwitches from '../_checkIndividualSwitches.js';\r\nimport { slant, starburst } from './drawLine.js';\r\n\r\nconst clearLoop = (inputs) => {\r\n\tconst shapeFunction = inputs.shapeArr[inputs.currentLoop - 1];\r\n\tif (shapeFunction === slant || shapeFunction === starburst) return;\r\n\r\n\tfor (let clearShape = 1; clearShape <= inputs.shapeCount; clearShape++) {\r\n\t\tinputs = checkIndividualSwitches('clear', inputs);\r\n\r\n\t\tinputs.ctx2.globalCompositeOperation = 'destination-out';\r\n\t\tinputs.ctx2.beginPath();\r\n\t\tshapeFunction(inputs);\r\n\t\tinputs.ctx2.fillStyle = inputs.color;\r\n\t\tinputs.ctx2.fill();\r\n\t\tinputs.ctx2.closePath();\r\n\t\tinputs.ctx2.globalCompositeOperation = 'source-over';\r\n\t\tinputs.ctx2.rotate((2 * Math.PI) / inputs.shapeCount);\r\n\t}\r\n};\r\n\r\nexport default clearLoop;\r\n","// import { ctx2 } from '../../mandalaDrawing.js';\r\nimport checkIndividualSwitches from '../_checkIndividualSwitches.js';\r\nimport { slant, starburst } from './drawLine.js';\r\n\r\nconst fillLoop = (inputs) => {\r\n\tconst shapeFunction = inputs.shapeArr[inputs.currentLoop - 1];\r\n\tif (shapeFunction === slant || shapeFunction === starburst) return;\r\n\tfor (let fillShape = 1; fillShape <= inputs.shapeCount; fillShape++) {\r\n\t\tinputs = checkIndividualSwitches('fill', inputs);\r\n\r\n\t\tinputs.ctx2.globalCompositeOperation = inputs.blendMode; // great for clear first\r\n\t\t// ctx2.globalCompositeOperation = 'multiply'; // great for clear first\r\n\t\t// ctx2.globalCompositeOperation = 'screen'; // also good option for both\r\n\t\t// ctx2.globalCompositeOperation = 'difference'; // cool chaos option both ways\r\n\t\t// ctx2.globalCompositeOperation = inputs.blendMode || 'source-over';\r\n\t\t// ctx2.globalCompositeOperation = 'source-over';\r\n\t\tinputs.ctx2.beginPath();\r\n\t\tshapeFunction(inputs);\r\n\t\tinputs.ctx2.fillStyle = inputs.fillColor;\r\n\t\tinputs.ctx2.fill();\r\n\t\tinputs.ctx2.closePath();\r\n\t\tinputs.ctx2.globalCompositeOperation = 'source-over';\r\n\t\tinputs.ctx2.rotate((2 * Math.PI) / inputs.shapeCount);\r\n\t}\r\n};\r\n\r\nexport default fillLoop;\r\n","// import { ctx2 } from '../../mandalaDrawing.js';\r\nimport checkIndividualSwitches from '../_checkIndividualSwitches.js';\r\n\r\nconst strokeLoop = (inputs) => {\r\n\tconst shapeFunction = inputs.shapeArr[inputs.currentLoop - 1];\r\n\r\n\tfor (let strokeShape = 1; strokeShape <= inputs.shapeCount; strokeShape++) {\r\n\t\tinputs = checkIndividualSwitches('stroke', inputs);\r\n\r\n\t\tinputs.ctx2.globalCompositeOperation = 'source-over';\r\n\t\tinputs.ctx2.beginPath();\r\n\t\tshapeFunction(inputs);\r\n\r\n\t\tinputs.ctx2.lineWidth = inputs.strokeWidth;\r\n\t\tinputs.ctx2.strokeStyle = inputs.strokeColor;\r\n\t\tinputs.ctx2.stroke();\r\n\t\tinputs.ctx2.closePath();\r\n\t\tinputs.ctx2.globalCompositeOperation = 'source-over';\r\n\t\tinputs.ctx2.rotate((2 * Math.PI) / inputs.shapeCount);\r\n\t}\r\n};\r\n// ctx2.beginPath();\r\n// drawCircle(shapeSize, pathRadius);\r\n// ctx2.lineWidth = 1;\r\n// ctx2.strokeStyle = randomColorValue;\r\n// ctx2.stroke();\r\n// ctx2.closePath();\r\n// ctx2.rotate((2 * Math.PI) / inputs.shapeCount);\r\n\r\nexport default strokeLoop;\r\n","import { roll, rollRange, randomColor, lightColor } from '../../utilities.js';\r\n\r\nimport checkIndividualSwitches from '../functionPool/_checkIndividualSwitches.js';\r\n\r\n// import { ctx2, halfWidth, halfHeight } from '../mandalaDrawing.js';\r\n\r\nimport clearLoop from '../functionPool/draw/clearLoop.js';\r\nimport fillLoop from '../functionPool/draw/fillLoop.js';\r\nimport strokeLoop from '../functionPool/draw/strokeLoop.js';\r\n\r\nconst loop = (inputs) => {\r\n\t//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ check clear fill stroke ~~~~~~~~~~~\r\n\r\n\tinputs.ctx2.save();\r\n\tinputs.ctx2.translate(inputs.halfWidth, inputs.halfHeight); // move to center\r\n\r\n\tinputs.clearSwitch && clearLoop(inputs);\r\n\r\n\tinputs.fillSwitch && fillLoop(inputs);\r\n\r\n\tinputs.strokeSwitch && strokeLoop(inputs);\r\n\r\n\tinputs.ctx2.restore();\r\n\t//******MOVE CENTER POINT BACK*********** */\r\n\t//******ENDING DRAW*********** */\r\n\t//******ENDING DRAW*********** */\r\n\t//******ENDING DRAW*********** */\r\n\t//******ENDING DRAW*********** */\r\n\treturn inputs;\r\n};\r\n\r\nexport default loop;\r\n","// import { ctx2, width, height } from '../../mandalaDrawing.js';\r\n\r\nconst clearDrawingArea = (inputs) => {\r\n\tinputs.ctx2.clearRect(0, 0, inputs.width, inputs.height);\r\n};\r\n\r\nexport default clearDrawingArea;\r\n","import { rollRange } from '../../utilities.js';\r\nimport getColorType from './_getColorType.js';\r\n\r\nconst getBackgroundStats = (inputs) => {\r\n    inputs.shapeCount = rollRange(inputs.minShapeCount, inputs.maxShapeCount);\r\n    inputs.pathRadius = rollRange(inputs.maxPathRadius, inputs.maxFullPath);\r\n    inputs.shapeSize = inputs.pathRadius;\r\n    // //****************INSIDE FIRST ROLL****************\r\n    // //****************INSIDE FIRST ROLL****************\r\n    // console.log(inputs);\r\n    // debugger;\r\n\r\n    if (inputs.customBackgroundSwitch) {\r\n        inputs.fillColor = inputs.customBackgroundColor;\r\n        inputs.strokeColor = inputs.customStrokeColor;\r\n    } else {\r\n        inputs.fillColor = getColorType(inputs);\r\n        inputs.strokeColor = getColorType(inputs);\r\n    }\r\n\r\n    inputs.fillSwitch = true;\r\n    inputs.backgroundLoopSwitch = false; // switch off\r\n    return inputs;\r\n};\r\nexport default getBackgroundStats;\r\n","import { lightColor, coinFlip, roll } from '../../utilities.js';\r\nimport getStrokeWidth from './_getStrokeWidth.js';\r\nimport getColorType from './_getColorType.js';\r\n\r\nconst checkLoopSwitches = (inputs) => {\r\n    //clear\r\n    if (inputs.clearRandomLoops) {\r\n        inputs.clearSwitch = coinFlip();\r\n    }\r\n    //clear\r\n    //fill\r\n    if (inputs.FillRandomLoops) {\r\n        inputs.fillSwitch = coinFlip();\r\n    }\r\n    if (inputs.fillSwitch) {\r\n        if (inputs.fillColorRandomLoops) {\r\n            inputs.fillColor = getColorType(inputs);\r\n        }\r\n    }\r\n    //fill\r\n    //stroke\r\n    if (inputs.strokeRandomLoops) {\r\n        inputs.strokeSwitch = coinFlip();\r\n    }\r\n    if (inputs.strokeSwitch) {\r\n        if (inputs.strokeColorRandomLoops) {\r\n            inputs.strokeColor = getColorType(inputs);\r\n            //chance for randomIndividual color to be a single loop choice\r\n            inputs.strokeColorIndividual = roll(10) === 1 ? true : false;\r\n        }\r\n        if (inputs.strokeWidthRandomLoops) {\r\n            inputs.strokeWidth = getStrokeWidth(inputs.shapeCount);\r\n            //chance for randomIndividual width to be a single loop choice\r\n            inputs.strokeWidthIndividual = roll(10) === 1 ? true : false;\r\n        }\r\n    }\r\n    //stroke\r\n    //individual\r\n    if (inputs.strokeIndividual) {\r\n        inputs.strokeSwitch = true;\r\n    }\r\n    if (inputs.fillIndividual) {\r\n        inputs.fillSwitch = true;\r\n    }\r\n    //individual\r\n\r\n    return inputs;\r\n};\r\nexport default checkLoopSwitches;\r\n","import { rollRange } from '../../utilities.js';\r\n\r\nconst checkShapeSpacing = (inputs) => {\r\n    let newPath = inputs.pathRadius;\r\n    let improperSpacing = inputs.shapeSize - inputs.pathRadius;\r\n\r\n    while (improperSpacing >= -5 && improperSpacing <= 5) {\r\n        console.log('improperspacing while loop, changing pathRadius variable');\r\n\r\n        newPath = rollRange(inputs.minPathRadius, inputs.maxPathRadius);\r\n        improperSpacing = newPath - inputs.pathRadius;\r\n    }\r\n    inputs.pathRadius = newPath;\r\n    return inputs;\r\n};\r\n\r\nexport default checkShapeSpacing;\r\n","import { rollRange, lightColor, coinFlip } from '../../utilities.js';\r\nimport checkLoopSwitches from './_checkLoopSwitches.js';\r\n\r\nimport checkShapeSpacing from './_checkShapeSpacing.js';\r\n\r\nconst getFollowingLoopStats = (inputs) => {\r\n    //****************INSIDE OTHER ROLLS****************\r\n    //          things changing per loop\r\n    //****************INSIDE OTHER ROLLS****************\r\n\r\n    inputs.pathRadius = rollRange(inputs.minPathRadius, inputs.maxPathRadius);\r\n    inputs.shapeSize = inputs.maxShapeSize * inputs.percent;\r\n    inputs.shapeCount = rollRange(inputs.minShapeCount, inputs.maxShapeCount);\r\n    inputs = checkShapeSpacing(inputs);\r\n\r\n    //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ check clear fill stroke ~~~~~~~~~~~\r\n    inputs = checkLoopSwitches(inputs);\r\n    //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ check clear fill stroke ~~~~~~~~~~~\r\n    if (inputs.customBackgroundSwitch) {\r\n        inputs.fillColor = inputs.customBackgroundColor;\r\n        inputs.strokeColor = inputs.customStrokeColor;\r\n    }\r\n\r\n    return inputs;\r\n};\r\n\r\nexport default getFollowingLoopStats;\r\n","// import { ctx2 } from '../../MandalaDrawing.js';\r\n\r\nconst square = (inputs) => {\r\n\t// ctx.rect(x, y, width, height);\r\n\tinputs.ctx2.rect(\r\n\t\tinputs.shapeSize / 2,\r\n\t\tinputs.pathRadius,\r\n\t\t-inputs.shapeSize,\r\n\t\t-inputs.shapeSize\r\n\t);\r\n};\r\nconst diamond = (inputs) => {\r\n\tinputs.ctx2.save();\r\n\tinputs.ctx2.rotate(Math.PI / 4);\r\n\tinputs.ctx2.rect(\r\n\t\tinputs.pathRadius,\r\n\t\tinputs.pathRadius,\r\n\t\t-inputs.shapeSize,\r\n\t\t-inputs.shapeSize\r\n\t);\r\n\tinputs.ctx2.restore();\r\n};\r\n\r\nexport { square, diamond };\r\n","// import { ctx2 } from '../../MandalaDrawing.js';\r\n\r\nconst circle = (inputs) => {\r\n\tinputs.ctx2.arc(\r\n\t\t0,\r\n\t\tinputs.pathRadius,\r\n\t\tinputs.shapeSize,\r\n\t\t0,\r\n\t\t2 * Math.PI,\r\n\t\tfalse\r\n\t);\r\n};\r\n\r\nconst oval = (inputs) => {\r\n\t// ctx.ellipse(x, y, radiusX, radiusY, rotation, startAngle, endAngle [, anticlockwise]);\r\n\tinputs.ctx2.ellipse(\r\n\t\t0,\r\n\t\tinputs.pathRadius,\r\n\t\tinputs.shapeSize / 5,\r\n\t\tinputs.shapeSize,\r\n\t\t0,\r\n\t\t0,\r\n\t\t2 * Math.PI\r\n\t);\r\n};\r\n\r\nexport { circle, oval };\r\n","import { roll } from '../../utilities.js';\r\nimport { slant, starburst } from './draw/drawLine.js';\r\nimport { square, diamond } from './draw/drawSquare.js';\r\nimport { circle, oval } from './draw/drawEllipse.js';\r\n\r\nconst getShapeFunction = (customShape, forceNumber) => {\r\n\tconst diceRange = 3; // length of cases when ready\r\n\tlet dice;\r\n\t//forceNumber should increment, lets the invoke call the case\r\n\tif (forceNumber) {\r\n\t\twhile (forceNumber && forceNumber > diceRange) {\r\n\t\t\tforceNumber = forceNumber - diceRange;\r\n\t\t}\r\n\t\tdice = forceNumber;\r\n\t} else if (customShape === 'noLine') {\r\n\t\tdice = roll(2);\r\n\t} else {\r\n\t\tdice = roll(3);\r\n\t}\r\n\tswitch (dice) {\r\n\t\tcase 1: // draw ellipse\r\n\t\t\tconst ellipseDice = roll(2);\r\n\t\t\t// ellipseDice = 2;\r\n\t\t\tswitch (ellipseDice) {\r\n\t\t\t\tcase 1:\r\n\t\t\t\t\treturn circle;\r\n\t\t\t\tcase 2:\r\n\t\t\t\t\treturn oval;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tconsole.log('error in getShapeFunction ellipse');\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t// return drawCircle;\r\n\t\tcase 2: // draw square\r\n\t\t\tlet squareDice = roll(2);\r\n\t\t\tswitch (squareDice) {\r\n\t\t\t\tcase 1:\r\n\t\t\t\t\treturn square;\r\n\t\t\t\tcase 2:\r\n\t\t\t\t\treturn diamond;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tconsole.log('error in getShapeFunction square');\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\tcase 3: // draw line\r\n\t\t\tlet lineDice = roll(2);\r\n\t\t\tswitch (lineDice) {\r\n\t\t\t\tcase 1:\r\n\t\t\t\t\treturn starburst;\r\n\t\t\t\tcase 2:\r\n\t\t\t\t\treturn slant;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tconsole.log('error in getShapeFunction line');\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\tdefault:\r\n\t\t\tconsole.log('error in getShapeType');\r\n\t\t\treturn;\r\n\t}\r\n};\r\nexport default getShapeFunction;\r\n","import { roll } from '../../utilities.js';\r\nimport getShapeFunction from './_getShapeFunction.js';\r\n\r\nconst getShapeArr = (loopCount, customShape, forceNumber) => {\r\n\tlet shapeStyleDice;\r\n\r\n\tif (forceNumber) {\r\n\t\tif (forceNumber === 'random') shapeStyleDice = 1;\r\n\t\tif (forceNumber === 'same') shapeStyleDice = 2;\r\n\t\tif (forceNumber === 'increment') shapeStyleDice = 3;\r\n\t} else {\r\n\t\tshapeStyleDice = roll(3);\r\n\t}\r\n\tlet shapeArr = [];\r\n\tswitch (shapeStyleDice) {\r\n\t\tcase 1:\r\n\t\t\tfor (let loop = 0; loop < loopCount; loop++) {\r\n\t\t\t\tshapeArr.push(getShapeFunction(customShape));\r\n\t\t\t}\r\n\t\t\tbreak;\r\n\t\tcase 2:\r\n\t\t\tconst sameShape = getShapeFunction(customShape);\r\n\t\t\tfor (let loop = 0; loop < loopCount; loop++) {\r\n\t\t\t\tshapeArr.push(sameShape);\r\n\t\t\t}\r\n\t\t\tbreak;\r\n\t\tcase 3:\r\n\t\t\tfor (let loop = 0; loop < loopCount; loop++) {\r\n\t\t\t\tshapeArr.push(getShapeFunction(customShape, loop + 1));\r\n\t\t\t}\r\n\t\t\tbreak;\r\n\t\tdefault:\r\n\t\t\tconsole.log('error in getShapeArr');\r\n\t\t\tbreak;\r\n\t}\r\n\treturn shapeArr;\r\n};\r\n\r\nexport default getShapeArr;\r\n","import getColorType from './_getColorType.js';\r\n\r\nconst checkResetBackgroundSwitches = (inputs) => {\r\n    if (inputs.clearAll) {\r\n        inputs.clearSwitch = true;\r\n    } else {\r\n        inputs.clearSwitch = false;\r\n    }\r\n    if (inputs.fillAll) {\r\n        inputs.fillSwitch = true;\r\n\r\n        if (inputs.fillColorAll) {\r\n            inputs.fillColor = getColorType(inputs);\r\n        }\r\n    } else {\r\n        inputs.fillSwitch = false;\r\n    }\r\n    if (inputs.strokeAll) {\r\n        inputs.strokeSwitch = true;\r\n\r\n        if (inputs.strokeColorAll) {\r\n            inputs.strokeColor = getColorType(inputs);\r\n        }\r\n        if (inputs.strokeWidthAll) {\r\n            inputs.strokeWidth = 1;\r\n            //stroke all needs 1 because some loops may have high shape count\r\n        }\r\n    } else {\r\n        inputs.strokeSwitch = false;\r\n    }\r\n\r\n    return inputs;\r\n};\r\nexport default checkResetBackgroundSwitches;\r\n","import loop from './special/loop.js';\r\n// import getInputStats from './functionPool/_getInputStats.js';\r\nimport clearDrawingArea from './functionPool/draw/clearDrawingArea.js';\r\nimport getBackgroundLoopStats from './functionPool/_getBackgroundLoopStats.js';\r\n// import getInitLoopStats from '../functionPool/_getInitLoopStats.js';\r\nimport getFollowingLoopStats from './functionPool/_getFollowingLoopStats.js';\r\nimport getShapeArr from './functionPool/_getShapeArr.js';\r\n// import getDrawType from './functionPool/_getDrawType.js';\r\nimport checkBackgroundSwitches from './functionPool/_checkBackgroundSwitches.js';\r\n// import getBlendMode from './functionPool/_getBlendMode.js';\r\n\r\nconst initMandalaDraw = (inputStats) => {\r\n\t// clear canvas\r\n\tclearDrawingArea(inputStats);\r\n\t// clear canvas\r\n\t//|||||||||||||||||||||||||||||||||stats|||||||||||||||||||\r\n\t//init stats\r\n\r\n\t// let inputStats = getInputStats();\r\n\r\n\t//'strokeOnly','fillOnly','fillAndStroke','individual','chaos','outline'\r\n\t// inputStats = getBlendMode(inputStats);\r\n\t//overrides\r\n\t// inputStats = getDrawType(inputStats, 'outline');\r\n\t// inputStats = getDrawType(inputStats);\r\n\t//build arr\r\n\t// inputStats.shapeArr = getShapeArr(inputStats);\r\n\r\n\t//start looping\r\n\tfor (\r\n\t\tlet currentLoop = inputStats.loopCount;\r\n\t\tcurrentLoop > 0;\r\n\t\tcurrentLoop--\r\n\t) {\r\n\t\tinputStats.currentLoop = currentLoop;\r\n\t\tinputStats.percent = currentLoop / inputStats.loopCount;\r\n\t\tif (!inputStats.customShape) {\r\n\t\t\tinputStats.maxShapeCount = Math.ceil(\r\n\t\t\t\tinputStats.useHalfSize * inputStats.percent\r\n\t\t\t);\r\n\t\t}\r\n\t\tif (inputStats.backgroundLoopSwitch) {\r\n\t\t\tinputStats = getBackgroundLoopStats(inputStats);\r\n\t\t\t// } else if (inputStats.initLoopSwitch) {\r\n\t\t\t//     inputStats = getInitLoopStats(inputStats);\r\n\t\t} else {\r\n\t\t\tinputStats = getFollowingLoopStats(inputStats);\r\n\t\t}\r\n\t\t//call loop\r\n\t\t// console.log({ ...inputStats });\r\n\t\t// console.log(inputStats.pathRadius, inputStats.shapeSize);\r\n\t\t// debugger;\r\n\t\tinputStats = loop(inputStats);\r\n\t\t//reset loop stats\r\n\t\tif (inputStats.percent === 1) {\r\n\t\t\tinputStats = checkBackgroundSwitches(inputStats);\r\n\t\t}\r\n\t}\r\n};\r\n\r\nexport default initMandalaDraw;\r\n","// #################################### idea ######################################\r\n// stacking effect when you use rollRange(0, threshRadius50) for every pass\r\n\r\n// move this to edges for one of the effects being on the sides off center\r\n// ctx2.translate(halfWidth, halfHeight)\r\n\r\n// outer circle\r\n// ctx2.translate(halfWidth, halfHeight);\r\n// drawCircle(width, halfHeight);\r\n// drawCircle(halfWidth, height);\r\n//\r\n// top left is center inside begin path, bot right web outside of beginpath\r\n// ctx2.translate(0, 0);\r\n// drawCircle(width, height);\r\n// #################################### idea ######################################\r\n\r\nclass PointNode {\r\n\tconstructor(x, y) {\r\n\t\tthis.x = x;\r\n\t\tthis.y = y;\r\n\t}\r\n}\r\n\r\n// const randomStartingPoint = () => {\r\n// \tconst dice = roll(halfWidth);\r\n// \treturn new PointNode(dice, halfWidth);\r\n// };\r\n\r\nconst findHypotenuse = (width, height) => {\r\n\tconst hypotenuse = Math.sqrt(Math.pow(width, 2) + Math.pow(height, 2));\r\n\treturn Math.round(hypotenuse);\r\n};\r\n\r\n// const mandalaDraw = () => {\r\n// \t// const mandalaType = roll(5);\r\n// \tconst mandalaType = 1;\r\n// \tswitch (mandalaType) {\r\n// \t\tcase 1:\r\n// \t\t\tspecialShape();\r\n// \t\t\tbreak;\r\n// \t\tcase 2:\r\n// \t\t\toneShape();\r\n// \t\t\tbreak;\r\n// \t\tcase 3:\r\n// \t\t\tmultiShapes();\r\n// \t\t\tbreak;\r\n// \t\tdefault:\r\n// \t\t\tbreak;\r\n// \t}\r\n\r\n// };\r\n\r\nexport {\r\n\tPointNode,\r\n\t// mandalaDraw,\r\n\tfindHypotenuse,\r\n};\r\n","import { roll } from '../../utilities.js';\r\n\r\nconst getBlendMode = () => {\r\n\t// debugger;\r\n\t// const blends = ['source-over', 'screen', 'difference', 'multiply'];\r\n\t// if (inputs.blendMode && blends.includes(inputs.blendMode)) return;\r\n\r\n\tlet blend;\r\n\tconst dice = roll(3);\r\n\tswitch (dice) {\r\n\t\tcase 1:\r\n\t\t\tblend = 'difference';\r\n\t\t\tbreak;\r\n\t\tcase 2:\r\n\t\t\tblend = 'screen';\r\n\t\t\tbreak;\r\n\t\tcase 3:\r\n\t\t\tblend = 'multiply';\r\n\t\t\tbreak;\r\n\t\t// case 4:\r\n\t\t//     blend = 'source-over';\r\n\t\t//     break;\r\n\t\tdefault:\r\n\t\t\tconsole.log('error in getBlendMode');\r\n\t\t\tbreak;\r\n\t}\r\n\r\n\treturn blend;\r\n};\r\n\r\nexport default getBlendMode;\r\n","// import { roll, randomColor, lightColor } from '../../utilities.js';\r\n// import { halfWidth, halfHeight, height, width } from '../mandalaDrawing.js';\r\nimport { findHypotenuse } from '../mandalaDrawingUtilities.js';\r\nimport getBlendMode from './_getBlendMode.js';\r\nimport getShapeArr from './_getShapeArr.js';\r\n\r\nconst getInputStats = (mandalaDrawObj) => {\r\n\t//|||||||||||||||||||||||||||||||||stats|||||||||||||||||||\r\n\t// console.log(mandalaDrawObj);\r\n\tconst { canvasWidth, canvasHeight } = mandalaDrawObj;\r\n\tlet inputObj = {\r\n\t\twidth: canvasWidth || 500,\r\n\t\theight: canvasHeight || 500,\r\n\t\thalfWidth: Math.floor(canvasWidth / 2) || 250,\r\n\t\thalfHeight: Math.floor(canvasHeight / 2) || 250,\r\n\r\n\t\tloopCount: 5, //roll(5)\r\n\t\tcurrentLoop: null,\r\n\t\tpercent: null, // created in loop\r\n\r\n\t\tbackgroundLoopSwitch: true,\r\n\t\tinitLoopSwitch: false,\r\n\r\n\t\tcustomBackgroundSwitch: false,\r\n\t\tcustomBackgroundColor: null,\r\n\t\tcustomStrokeColor: null,\r\n\t\tcustomShape: null,\r\n\r\n\t\tclearSwitch: false,\r\n\t\tclearAll: false,\r\n\t\tclearRandomLoops: false,\r\n\t\tclearIndividual: false,\r\n\r\n\t\tdrawType: null,\r\n\r\n\t\tfillSwitch: false,\r\n\t\tfillAll: false,\r\n\t\tfillRandomLoops: false,\r\n\t\tfillIndividual: false,\r\n\t\tfillColor: null,\r\n\t\tfillColorAll: false,\r\n\t\tfillColorRandomLoops: false,\r\n\t\tfillColorIndividual: false,\r\n\r\n\t\tstrokeSwitch: false,\r\n\t\tstrokeAll: false,\r\n\t\tstrokeRandomLoops: false,\r\n\t\tstrokeIndividual: false,\r\n\t\tstrokeColor: null,\r\n\t\tstrokeColorAll: false,\r\n\t\tstrokeColorRandomLoops: false,\r\n\t\tstrokeColorIndividual: false,\r\n\t\tstrokeWidth: 1,\r\n\t\tstrokeWidthAll: false,\r\n\t\tstrokeWidthRandomLoops: false,\r\n\t\tstrokeWidthIndividual: false,\r\n\r\n\t\tuseSize: canvasWidth > canvasHeight ? canvasWidth : canvasHeight,\r\n\t\tuseHalfSize: null,\r\n\t\tmaxFullPath: findHypotenuse(canvasWidth, canvasHeight),\r\n\r\n\t\tpathRadius: null,\r\n\t\tminPathRadius: 20,\r\n\t\tmaxPathRadius: null,\r\n\t\tminShapeCount: 4,\r\n\t\tmaxShapeCount: 200,\r\n\t\tmaxShapeSize: 200,\r\n\r\n\t\tshapeCount: null, // default, randomize\r\n\t\tshapeSize: null, //default, shape size needs to be adjusted based on path\r\n\t\tshapeArr: null,\r\n\r\n\t\tblendMode: getBlendMode(), // have to find in loop\r\n\r\n\t\t...mandalaDrawObj, // override input stats\r\n\t};\r\n\tinputObj.useHalfSize = inputObj.useSize / 2;\r\n\tinputObj.maxPathRadius = findHypotenuse(\r\n\t\tinputObj.halfWidth,\r\n\t\tinputObj.halfHeight\r\n\t);\r\n\tinputObj.shapeArr = getShapeArr(inputObj.loopCount, inputObj.customShape);\r\n\r\n\t// console.log(inputObj.shapeArr);\r\n\t// debugger;\r\n\treturn inputObj;\r\n};\r\n\r\nexport default getInputStats;\r\n","import { createCanvasDraw } from '../utilities.js';\r\nimport initMandalaDraw from './initMandalaDraw.js';\r\nimport getInputStats from './functionPool/_getInputStats.js';\r\nimport getDrawType from './functionPool/_getDrawType.js';\r\n\r\nconst MandalaDrawing = (forceDesignObj) => {\r\n\tlet { dimensions, mandalaDrawObj } = forceDesignObj;\r\n\tlet width, height;\r\n\tif (dimensions) {\r\n\t\twidth = dimensions.width;\r\n\t\theight = dimensions.height;\r\n\t}\r\n\r\n\tconst canvasWidth = width ? width : 500;\r\n\tconst canvasHeight = height ? height : 500;\r\n\tconst [canvasDraw, ctx2] = createCanvasDraw(canvasWidth, canvasHeight);\r\n\r\n\tmandalaDrawObj = {\r\n\t\t...mandalaDrawObj,\r\n\t\tcanvasWidth,\r\n\t\tcanvasHeight,\r\n\t\tcanvasDraw,\r\n\t\tctx2,\r\n\t};\r\n\t//get and place stats\r\n\tlet inputStats = getInputStats(mandalaDrawObj);\r\n\t//build arr\r\n\tinputStats = getDrawType(inputStats);\r\n\r\n\tinitMandalaDraw(inputStats);\r\n\r\n\t//convert canvas to an image\r\n\t//return image\r\n\t// return ctx2;\r\n\tconst dataURL = mandalaDrawObj.canvasDraw.toDataURL('image/png');\r\n\treturn dataURL;\r\n};\r\n\r\nexport { MandalaDrawing };\r\n","import RandomDrawing from './randomDrawing.js';\r\nimport { BoxDrawing } from './boxDrawing/BoxDrawing.js';\r\nimport { MandalaDrawing } from './mandalaDrawing/MandalaDrawing.js';\r\n\r\nconst randomInterface = {\r\n    RandomDrawing,\r\n    BoxDrawing,\r\n    MandalaDrawing,\r\n};\r\n\r\nexport default randomInterface;\r\n","import { roll } from './utilities.js';\r\nimport { BoxDrawing } from './boxDrawing/BoxDrawing.js';\r\nimport { MandalaDrawing } from './mandalaDrawing/MandalaDrawing.js';\r\n\r\nconst RandomDrawing = (forceDesignObj) => {\r\n\tconst dice = roll(2);\r\n\tlet returnRandomDrawing;\r\n\tswitch (dice) {\r\n\t\tcase 1:\r\n\t\t\treturnRandomDrawing = BoxDrawing;\r\n\t\t\tbreak;\r\n\t\tcase 2:\r\n\t\t\treturnRandomDrawing = MandalaDrawing;\r\n\t\t\tbreak;\r\n\t\tdefault:\r\n\t\t\tconsole.log('error in randomDraw random dice');\r\n\t\t\tbreak;\r\n\t}\r\n\treturn returnRandomDrawing(forceDesignObj);\r\n};\r\n\r\nexport default RandomDrawing;\r\n","import randomInterface from './codeBank/randomInterface.js';\r\n\r\nconst BoxDrawing = randomInterface.BoxDrawing;\r\nconst MandalaDrawing = randomInterface.MandalaDrawing;\r\nconst RandomDrawing = randomInterface.RandomDrawing;\r\n\r\nlet sequence = [];\r\n\r\nconst getSequence = (length) => {\r\n\tif (sequence.length > length) {\r\n\t\tsequence.shift();\r\n\t}\r\n\tconst image = sequence[sequence.length - 1];\r\n\tconsole.log(image);\r\n\treturn image;\r\n};\r\n\r\nconst randomDraw = (forceDesignObj = {}) => {\r\n\tconst { typeOfDrawer } = forceDesignObj;\r\n\tif (!forceDesignObj.boxDrawObj) {\r\n\t\tforceDesignObj.boxDrawObj = {};\r\n\t}\r\n\tif (!forceDesignObj.mandalaDrawObj) {\r\n\t\tforceDesignObj.mandalaDrawObj = {};\r\n\t}\r\n\tswitch (typeOfDrawer) {\r\n\t\tcase 'boxDraw':\r\n\t\t\tconst box = BoxDrawing(forceDesignObj);\r\n\t\t\tsequence.push(box);\r\n\t\t\treturn;\r\n\t\tcase 'mandalaDraw':\r\n\t\t\tconst mandala = MandalaDrawing(forceDesignObj);\r\n\t\t\tsequence.push(mandala);\r\n\t\t\treturn;\r\n\t\tdefault:\r\n\t\t\tconst random = RandomDrawing(forceDesignObj);\r\n\t\t\tsequence.push(random);\r\n\t\t\treturn;\r\n\t}\r\n};\r\n\r\nexport { randomDraw, getSequence };\r\n","import React, { useState, useEffect } from 'react';\nimport Nav from './components/Nav';\nimport CodeInjector from './components/CodeInjector';\nimport Controls from './components/Controls';\nimport MainDisplay from './components/MainDisplay';\n\nimport { randomDraw } from './randomDraw.js';\nimport { cloneObj, resetDefaults } from './functions/functions.js';\n\nfunction App() {\n\t// let forceDesignObj = {\n\t// \t\ttypeOfDrawer: 'random',\n\t// \t\t\tdimensions: {\n\t// \t\t\t\twidth: null,\n\t// \t\t\t\theight: null,\n\t// \t\t\t},\n\t// \t\ttestStr: '',\n\t// \t\tboxDrawObj: {},\n\t// \t\tmandalaDrawObj: {},\n\t// };\n\t// let forceDesignObj = {};\n\tconst [designState, setDesignState] = useState({});\n\n\tuseEffect(() => {\n\t\t//reset defaults\n\t\tresetDefaults(\n\t\t\tdesignState,\n\t\t\tadjustState,\n\t\t\tadjustDimensions,\n\t\t\tadjustBoxState\n\t\t);\n\n\t\t//clone state\n\t\tconst inputObj = cloneObj(designState);\n\t\t//draw\n\t\trandomDraw(inputObj);\n\t}, [designState]);\n\n\tconst adjustState = (obj) => {\n\t\tsetDesignState({\n\t\t\t...designState,\n\t\t\t...obj,\n\t\t});\n\t};\n\n\tconst adjustDimensions = (obj) => {\n\t\tsetDesignState({\n\t\t\t...designState,\n\t\t\tdimensions: {\n\t\t\t\t...designState.dimensions,\n\t\t\t\t...obj,\n\t\t\t},\n\t\t});\n\t};\n\tconst adjustBoxState = (obj) => {\n\t\t// \tdebugger;\n\t\t// \tconsole.log(designState);\n\t\tsetDesignState({\n\t\t\t...designState,\n\t\t\tboxDrawObj: {\n\t\t\t\t...designState.boxDrawObj,\n\t\t\t\t...obj,\n\t\t\t},\n\t\t});\n\t\t// \tconsole.log(designState);\n\t};\n\n\tconst draw = () => {\n\t\trandomDraw(designState);\n\t};\n\n\treturn (\n\t\t<div className='App'>\n\t\t\t<Nav />\n\t\t\t<CodeInjector state={designState} />\n\t\t\t<main>\n\t\t\t\t<Controls\n\t\t\t\t\tdraw={draw}\n\t\t\t\t\tstate={designState}\n\t\t\t\t\tadjustState={adjustState}\n\t\t\t\t\tadjustDimensions={adjustDimensions}\n\t\t\t\t\tadjustBoxState={adjustBoxState}\n\t\t\t\t/>\n\t\t\t\t<MainDisplay />\n\t\t\t</main>\n\t\t</div>\n\t);\n}\n\nexport default App;\n\n//maybe add fractals\n//maybe add pixel trails\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './scss/main.scss';\nimport App from './App';\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\n"],"sourceRoot":""}