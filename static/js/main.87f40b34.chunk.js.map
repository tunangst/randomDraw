{"version":3,"sources":["codeBank/utilities.js","codeBank/mandalaDrawing/functionPool/_getDrawType.js","components/Nav.js","functions/functions.js","components/CodeInjector.js","components/BoxDropDownMarkUp.js","components/MandalaCustomDrawOptions.js","components/MandalaDropDownMarkUp.js","components/Controls.js","components/MainDisplay.js","codeBank/boxDrawing/boxDrawingUtilities.js","codeBank/boxDrawing/singles/clone.js","codeBank/boxDrawing/specials/fullClone.js","codeBank/boxDrawing/singles/rotate.js","codeBank/boxDrawing/specials/fullRotate.js","codeBank/boxDrawing/singles/reflect.js","codeBank/boxDrawing/specials/fullReflect.js","codeBank/boxDrawing/specials/halfReflect.js","codeBank/boxDrawing/specials/noPattern.js","codeBank/boxDrawing/specials/specials.js","codeBank/boxDrawing/singles/singles.js","codeBank/boxDrawing/doubles/doubles.js","codeBank/boxDrawing/BoxDrawing.js","codeBank/mandalaDrawing/functionPool/_getStrokeWidth.js","codeBank/mandalaDrawing/functionPool/_getColorType.js","codeBank/mandalaDrawing/functionPool/_checkIndividualSwitches.js","codeBank/mandalaDrawing/functionPool/draw/drawLine.js","codeBank/mandalaDrawing/functionPool/draw/clearLoop.js","codeBank/mandalaDrawing/functionPool/draw/fillLoop.js","codeBank/mandalaDrawing/functionPool/draw/strokeLoop.js","codeBank/mandalaDrawing/special/loop.js","codeBank/mandalaDrawing/functionPool/draw/clearDrawingArea.js","codeBank/mandalaDrawing/functionPool/_getBackgroundLoopStats.js","codeBank/mandalaDrawing/functionPool/_checkLoopSwitches.js","codeBank/mandalaDrawing/functionPool/_checkShapeSpacing.js","codeBank/mandalaDrawing/functionPool/_getFollowingLoopStats.js","codeBank/mandalaDrawing/functionPool/draw/drawSquare.js","codeBank/mandalaDrawing/functionPool/draw/drawEllipse.js","codeBank/mandalaDrawing/functionPool/_getShapeFunction.js","codeBank/mandalaDrawing/functionPool/_getShapeArr.js","codeBank/mandalaDrawing/functionPool/_checkBackgroundSwitches.js","codeBank/mandalaDrawing/initMandalaDraw.js","codeBank/mandalaDrawing/mandalaDrawingUtilities.js","codeBank/mandalaDrawing/functionPool/_getBlendMode.js","codeBank/mandalaDrawing/functionPool/_getInputStats.js","codeBank/mandalaDrawing/MandalaDrawing.js","codeBank/randomInterface.js","codeBank/randomDrawing.js","randomDraw.js","App.js","index.js"],"names":["roll","range","Math","floor","random","rollRange","min","max","coinFlip","createCanvasTemplate","width","height","old","document","querySelector","remove","canvasTemplate","createElement","id","ctx","getContext","createCanvasDraw","parentSpace","innerHTML","canvasDraw","ctx2","appendChild","clear","inputObj","matrix","clearRect","canvasWidth","canvasHeight","randomColor","randomR","randomG","randomB","lightColor","shapeCount","randomL","randomH","randomS","darkColor","getDrawType","inputs","forceType","loopCycle","word","eval","chaos","fillSwitch","strokeSwitch","strokeOnly","clearIndividual","strokeAll","custom","fillOnly","clearAll","fillAll","fillAndStroke","individual","fillIndividual","fillColorIndividual","strokeIndividual","strokeColorIndividual","strokeWidthIndividual","outline","customBackgroundSwitch","customBackgroundColor","customStrokeColor","blendMode","maxShapeCount","customShape","strokeColorAll","strokeWidthAll","dice","console","log","Nav","className","cloneObj","obj","JSON","parse","stringify","writeInputCode","clearEmpties","key","Object","keys","length","undefined","CodeInjector","state","displayState","initialState","boxCount","choosePrimaryColor","chooseSecondaryColor","chooseBackgroundColor","BoxDropDownMarkUp","adjustBoxState","useState","input","setInput","activePrimary","setActivePrimary","activeSecondary","setActiveSecondary","activeBackground","setActiveBackground","activeStyle","setActiveStyle","handleChange","event","value","target","keyName","Number","handleBtns","primaryToggle","primaryColor","secondaryToggle","secondaryColor","backgroundToggle","backgroundColor","handleStyleBtns","innerText","convertedWord","charAt","toLowerCase","replace","slice","drawStyle","name","type","step","onChange","onClick","loopCount","minShapeSize","maxShapeSize","minShapeCount","minPathRadius","maxPathRadius","MandalaCustomDrawOptions","adjustMandalaState","checked","MandalaDropDownMarkUp","showDrawOptions","setShowDrawOptions","selection","selectedOptions","initialInputState","Controls","draw","dropDownMarkUp","adjustState","adjustDimensions","active","setActive","dropDown","setDropDown","whichDropDown","setWhichDropDown","handleBtnClick","typeOfDrawer","MainDisplay","boxDraw","boxDrawObj","xCoord","yCoord","usingMatrix","matrixRow","matrixColumn","pixel","calcX","xStart","calcY","yStart","fillStyle","color","fillRect","pixelWidth","pixelHeight","strokeStyle","strokeRect","PixelNode","this","InputNode","whatToPlace","rollColor","createPixelMap","patternOverride","newMatrix","y","row","x","push","drawSectionHeight","drawSectionWidth","combineMatrixTopHalf","matrix1","matrix2","combinedMatrix","i","combine","combineMatrixLeftHalf","clone","xOffset","yOffset","xPos","yPos","tempMatrix","rowArr","newPixel","fullClone","cloneMatrix1","cloneMatrix2","cloneMatrix3","inputNode","rotateClockwise","useMatrix","column","rotateCounterClockwise","fullRotate","rotatedMatrix1","rotatedMatrix2","rotatedMatrix3","reflectVerticalAxis","reflectHorizontalAxis","fullReflect","adjustedMatrix","reflectedMatrix","halfReflect","clonedMatrix","noPattern","getMatrix","specials","singles","quadrantDice","order","quadrantArray","test","includes","quadrant","findQuadrantOrder","forEach","number","index","doubles","styleDice","doubleDice","quadrantDouble","rotatedMatrix","BoxDrawing","forceDesignObj","dimensions","inputColor","alert","toDataURL","getStrokeWidth","getColorType","clearSwitch","checkIndividualSwitches","fillColor","strokeColor","strokeWidth","starburst","save","moveTo","pathRadius","shapeSize","lineTo","restore","slant","clearLoop","shapeFunction","shapeArr","currentLoop","clearShape","globalCompositeOperation","beginPath","fill","closePath","rotate","PI","fillLoop","fillShape","strokeLoop","strokeShape","lineWidth","stroke","loop","translate","halfWidth","halfHeight","clearDrawingArea","getBackgroundStats","maxFullPath","backgroundLoopSwitch","checkLoopSwitches","clearRandomLoops","FillRandomLoops","fillColorRandomLoops","strokeRandomLoops","strokeColorRandomLoops","strokeWidthRandomLoops","checkShapeSpacing","newPath","improperSpacing","getFollowingLoopStats","percent","square","rect","diamond","circle","arc","oval","ellipse","getShapeFunction","forceNumber","getShapeArr","shapeStyleDice","sameShape","checkResetBackgroundSwitches","fillColorAll","initMandalaDraw","inputStats","ceil","useHalfSize","getBackgroundLoopStats","checkBackgroundSwitches","findHypotenuse","hypotenuse","sqrt","pow","round","getBlendMode","blend","getInputStats","mandalaDrawObj","initLoopSwitch","drawType","fillRandomLoops","useSize","MandalaDrawing","randomInterface","RandomDrawing","returnRandomDrawing","sequence","randomDraw","box","mandala","App","designState","setDesignState","useEffect","resetDefaults","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.87f40b34.chunk.js","sourcesContent":["const roll = (range) => {\r\n\t// 1 - range\r\n\treturn Math.floor(Math.random() * range + 1);\r\n};\r\nconst rollRange = (min, max) => {\r\n\tconst answer = Math.floor(Math.random() * (max - min + 1)) + min;\r\n\treturn answer;\r\n};\r\n\r\nconst coinFlip = () => {\r\n\tconst coin = roll(2);\r\n\tconst face = coin === 1 ? true : false;\r\n\treturn face;\r\n};\r\nconst createCanvasTemplate = (width, height) => {\r\n\t//remove old canvas\r\n\tconst old = document.querySelector('#canvasTemplate');\r\n\tif (old) {\r\n\t\told.remove();\r\n\t}\r\n\t//create new canvas\r\n\tlet canvasTemplate = document.createElement('canvas');\r\n\tcanvasTemplate.id = 'canvasTemplate';\r\n\tcanvasTemplate.width = width;\r\n\tcanvasTemplate.height = height;\r\n\tconst ctx = canvasTemplate.getContext('2d');\r\n\r\n\treturn [canvasTemplate, ctx];\r\n};\r\nconst createCanvasDraw = (width, height) => {\r\n\t//find user defined space for canvas\r\n\tconst parentSpace =\r\n\t\tdocument.querySelector('.randomDraw') ||\r\n\t\tdocument.querySelector('#randomDraw');\r\n\t//remove old canvas\r\n\tparentSpace.innerHTML = '';\r\n\t//create new canvas\r\n\tlet canvasDraw = document.createElement('canvas');\r\n\tcanvasDraw.id = 'canvasDraw';\r\n\tcanvasDraw.width = width;\r\n\tcanvasDraw.height = height;\r\n\tconst ctx2 = canvasDraw.getContext('2d');\r\n\r\n\t//place canvas\r\n\tparentSpace.appendChild(canvasDraw);\r\n\r\n\treturn [canvasDraw, ctx2];\r\n};\r\n\r\nconst clear = (inputObj) => {\r\n\tinputObj.matrix = [];\r\n\tinputObj.ctx &&\r\n\t\tinputObj.ctx.clearRect(\r\n\t\t\t0,\r\n\t\t\t0,\r\n\t\t\tinputObj.canvasWidth,\r\n\t\t\tinputObj.canvasHeight\r\n\t\t);\r\n\tinputObj.ctx2 &&\r\n\t\tinputObj.ctx2.clearRect(\r\n\t\t\t0,\r\n\t\t\t0,\r\n\t\t\tinputObj.canvasWidth,\r\n\t\t\tinputObj.canvasHeight\r\n\t\t);\r\n\treturn inputObj.matrix;\r\n};\r\n\r\nconst randomColor = () => {\r\n\tconst randomR = roll(256);\r\n\tconst randomG = roll(256);\r\n\tconst randomB = roll(256);\r\n\treturn `rgb(${randomR},${randomG},${randomB})`;\r\n};\r\n\r\nconst lightColor = (shapeCount) => {\r\n\tconst randomH = rollRange(0, 360);\r\n\tconst randomS = rollRange(0, 100);\r\n\tlet randomL;\r\n\tif (shapeCount > 150) {\r\n\t\trandomL = 99;\r\n\t} else if (shapeCount > 100) {\r\n\t\trandomL = rollRange(95, 99); //0=black 50=normal 100=white\r\n\t} else if (shapeCount > 50) {\r\n\t\trandomL = rollRange(90, 99); //0=black 50=normal 100=white\r\n\t} else {\r\n\t\trandomL = rollRange(80, 99); //0=black 50=normal 100=white\r\n\t}\r\n\treturn `hsl(${randomH},${randomS}%,${randomL}%)`;\r\n};\r\n\r\nconst darkColor = (shapeCount) => {\r\n\tconst randomH = rollRange(0, 360);\r\n\tconst randomS = rollRange(0, 100);\r\n\tlet randomL;\r\n\t// debugger;\r\n\tif (shapeCount > 150) {\r\n\t\trandomL = 1;\r\n\t} else if (shapeCount > 100) {\r\n\t\trandomL = rollRange(5, 1); //0=black 50=normal 100=white\r\n\t} else if (shapeCount > 50) {\r\n\t\trandomL = rollRange(10, 1); //0=black 50=normal 100=white\r\n\t} else {\r\n\t\trandomL = rollRange(20, 1); //0=black 50=normal 100=white\r\n\t}\r\n\treturn `hsl(${randomH},${randomS}%,${randomL}%)`;\r\n};\r\n\r\n//rotate image functions\r\n//rotate image functions\r\n//rotate image functions\r\n//rotate image functions\r\n\r\n// const img = new Image();\r\n// img.src = \"https://i.stack.imgur.com/C7qq2.png?s=328&g=1\";\r\n// img.onload = () => { requestAnimationFrame(mainLoop) } // start when loaded\r\n// const ctx = canvas.getContext(\"2d\");\r\n\r\n// function drawImageRotated(img, x, y, scale, rot) {\r\n//   ctx.setTransform(scale, 0, 0, scale, x, y);\r\n//   ctx.rotate(rot);\r\n//   ctx.drawImage(img, -img.width / 2, -img.height / 2);\r\n//   ctx.setTransform(1, 0, 0, 1, 0, 0);\r\n// }\r\n\r\n// function mainLoop(time) {\r\n//   ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n//   drawImageRotated(img,canvas.width / 2, canvas.height / 2, 0.5, time / 500);\r\n//   requestAnimationFrame(mainLoop);\r\n// }\r\n\r\n//rotate image functions\r\n//rotate image functions\r\n//rotate image functions\r\n//rotate image functions\r\n\r\nexport {\r\n\troll,\r\n\trollRange,\r\n\tcoinFlip,\r\n\tcreateCanvasTemplate,\r\n\tcreateCanvasDraw,\r\n\tclear,\r\n\trandomColor,\r\n\tlightColor,\r\n\tdarkColor,\r\n};\r\n","import { roll, coinFlip } from '../../utilities.js';\r\n\r\nconst getDrawType = (inputs, forceType) => {\r\n\tconst loopCycle = (word) => {\r\n\t\teval(`inputs.${word}All = ${coinFlip()}`);\r\n\r\n\t\tif (!eval(`inputs.${word}All`)) {\r\n\t\t\teval(`inputs.${word}RandomLoops = ${coinFlip()}`);\r\n\t\t} else {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (!eval(`inputs.${word}RandomLoops`)) {\r\n\t\t\teval(`inputs.${word}Individual = ${coinFlip()}`);\r\n\t\t} else {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (!eval(`inputs.${word}Individual`)) {\r\n\t\t\tloopCycle(word);\r\n\t\t} else {\r\n\t\t\treturn;\r\n\t\t}\r\n\t};\r\n\r\n\tconst chaos = () => {\r\n\t\tinputs.fillSwitch = true;\r\n\t\tinputs.strokeSwitch = true;\r\n\t\tloopCycle('clear');\r\n\t\tloopCycle('fill');\r\n\t\tloopCycle('fillColor');\r\n\t\tloopCycle('stroke');\r\n\t\tloopCycle('strokeColor');\r\n\t\tloopCycle('strokeWidth');\r\n\t};\r\n\tconst strokeOnly = () => {\r\n\t\tinputs.fillSwitch = true;\r\n\t\tinputs.strokeSwitch = true;\r\n\t\t// loopCycle('clear');\r\n\t\tinputs.clearIndividual = true;\r\n\t\tinputs.strokeAll = true;\r\n\t\tloopCycle('strokeColor');\r\n\t\tloopCycle('strokeWidth');\r\n\t};\r\n\tconst custom = () => {};\r\n\tconst fillOnly = () => {\r\n\t\tinputs.fillSwitch = true;\r\n\t\tinputs.clearAll = true;\r\n\t\tinputs.fillAll = true;\r\n\t\tloopCycle('fillColor');\r\n\t\t// fillColorRandomLoops = true;\r\n\t};\r\n\tconst fillAndStroke = () => {\r\n\t\tinputs.fillSwitch = true;\r\n\t\tinputs.strokeSwitch = true;\r\n\t\tinputs.fillAll = true;\r\n\t\tinputs.strokeAll = true;\r\n\t\tloopCycle('clear');\r\n\t\tloopCycle('strokeColor');\r\n\t\tloopCycle('fillColor');\r\n\t};\r\n\tconst individual = () => {\r\n\t\tinputs.fillSwitch = true;\r\n\t\tinputs.strokeSwitch = true;\r\n\t\tinputs.clearIndividual = true;\r\n\t\tinputs.fillIndividual = true;\r\n\t\tinputs.fillColorIndividual = true;\r\n\t\tinputs.strokeIndividual = true;\r\n\t\tinputs.strokeColorIndividual = true;\r\n\t\tinputs.strokeWidthIndividual = true;\r\n\t};\r\n\tconst outline = () => {\r\n\t\tinputs.customBackgroundSwitch = true;\r\n\t\tinputs.customBackgroundColor = '#fff';\r\n\t\tinputs.customStrokeColor = '#000';\r\n\t\tinputs.blendMode = 'source-over';\r\n\t\tinputs.maxShapeCount = 50;\r\n\t\tinputs.customShape = 'noLine';\r\n\r\n\t\tinputs.strokeSwitch = true;\r\n\t\tinputs.fillSwitch = false;\r\n\t\tinputs.strokeAll = true;\r\n\t\tinputs.clearAll = true;\r\n\t\t// inputs.clearRandomLoops = true;\r\n\t\tinputs.strokeColorAll = true;\r\n\t\tinputs.strokeWidthAll = true;\r\n\t};\r\n\r\n\t// debugger;\r\n\tif (forceType) {\r\n\t\teval(`${forceType}()`);\r\n\t} else {\r\n\t\tconst dice = roll(5);\r\n\t\tswitch (dice) {\r\n\t\t\tcase 1:\r\n\t\t\t\tstrokeOnly();\r\n\t\t\t\tbreak;\r\n\t\t\tcase 2:\r\n\t\t\t\tfillOnly();\r\n\t\t\t\tbreak;\r\n\t\t\tcase 3:\r\n\t\t\t\tfillAndStroke();\r\n\t\t\t\tbreak;\r\n\t\t\tcase 4:\r\n\t\t\t\tindividual();\r\n\t\t\t\tbreak;\r\n\t\t\tcase 5:\r\n\t\t\t\tchaos();\r\n\t\t\t\tbreak;\r\n\t\t\t// case 6:\r\n\t\t\t// \toutline();\r\n\t\t\t// \tbreak;\r\n\t\t\t// case 7:\r\n\t\t\t// \tcustom();\r\n\t\t\t// \tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tconsole.log('error in getDrawType');\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n\treturn inputs;\r\n};\r\n\r\nexport default getDrawType;\r\n","import React from 'react';\r\n\r\nconst Nav = () => {\r\n\treturn (\r\n\t\t<header>\r\n\t\t\t<h1>randomDraw</h1>\r\n\t\t\t<button id='sequence' className='btn'>\r\n\t\t\t\tsequence\r\n\t\t\t</button>\r\n\t\t\t<img id='randomDrawSequence' />\r\n\t\t</header>\r\n\t);\r\n};\r\n\r\nexport default Nav;\r\n","const cloneObj = (obj) => {\r\n\treturn JSON.parse(JSON.stringify(obj));\r\n};\r\nconst clearEmpties = (obj) => {\r\n\tfor (let key in obj) {\r\n\t\tif (!obj[key] || typeof obj[key] !== 'object') {\r\n\t\t\t//remove strings null and undefined\r\n\t\t\tif (\r\n\t\t\t\tobj[key] === undefined ||\r\n\t\t\t\tobj[key] === null ||\r\n\t\t\t\tobj[key] === ''\r\n\t\t\t) {\r\n\t\t\t\tdelete obj[key];\r\n\t\t\t}\r\n\t\t\tcontinue; // If null or not an object, skip to the next iteration\r\n\t\t}\r\n\t\t// The property is an object\r\n\t\tclearEmpties(obj[key]); // <-- Make a recursive call on the nested object\r\n\t\tif (Object.keys(obj[key]).length === 0) {\r\n\t\t\tdelete obj[key]; // The object had no properties, so delete that property\r\n\t\t}\r\n\t}\r\n\treturn obj;\r\n};\r\nconst writeInputCode = (obj) => {\r\n\tclearEmpties(obj);\r\n\tconst tab = `  `;\r\n\tlet html = `randomDraw(${JSON.stringify(obj, null, tab)});`;\r\n\treturn html;\r\n};\r\n\r\nconst resetDefaults = (\r\n\tstate,\r\n\tadjustState,\r\n\tadjustDimensions,\r\n\tadjustBoxState,\r\n\tadjustMandalaState\r\n) => {\r\n\tconsole.log('in resetDefaults');\r\n\tconsole.log('testing for infinite loop');\r\n\t// ======= dimensions adjustments\r\n\t// ~~~~~~~~~~~~~~~ reset default values of typeOfDrawer\r\n\tif (state.typeOfDrawer && state.typeOfDrawer === 'random') {\r\n\t\tadjustState({ typeOfDrawer: null });\r\n\t}\r\n\t// ~~~~~~~~~~~~~~~ reset default values of typeOfDrawer\r\n\t// ~~~~~~~~~~~~~~~ reset default values of width and height\r\n\tif (state.dimensions) {\r\n\t\tif (state.dimensions.width === 500) {\r\n\t\t\tadjustDimensions({ width: null });\r\n\t\t}\r\n\t\tif (state.dimensions.height === 500) {\r\n\t\t\tadjustDimensions({ height: null });\r\n\t\t}\r\n\t}\r\n\t// ~~~~~~~~~~~~~~~ reset default values of width and height\r\n\t// ======= dimensions adjustments\r\n\t// ======= boxDrawObj adjustments\r\n\tif (state.boxDrawObj) {\r\n\t\t// ~~~~~~~~~~~~~~~ off 'choose' toggle remove color value\r\n\t\tif (state.boxDrawObj.primaryToggle) {\r\n\t\t\tif (\r\n\t\t\t\tstate.boxDrawObj.primaryToggle === 'default' ||\r\n\t\t\t\tstate.boxDrawObj.primaryToggle === 'random'\r\n\t\t\t) {\r\n\t\t\t\t//remove toggle\r\n\t\t\t\tif (state.boxDrawObj.primaryToggle === 'default') {\r\n\t\t\t\t\tadjustBoxState({ primaryToggle: null });\r\n\t\t\t\t}\r\n\t\t\t\t//remove color\r\n\t\t\t\tif (state.boxDrawObj.primaryColor) {\r\n\t\t\t\t\tadjustBoxState({ primaryColor: null });\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (state.boxDrawObj.secondaryToggle) {\r\n\t\t\tif (\r\n\t\t\t\tstate.boxDrawObj.secondaryToggle === 'default' ||\r\n\t\t\t\tstate.boxDrawObj.secondaryToggle === 'random'\r\n\t\t\t) {\r\n\t\t\t\t//remove toggle\r\n\t\t\t\tif (state.boxDrawObj.secondaryToggle === 'default') {\r\n\t\t\t\t\tadjustBoxState({ secondaryToggle: null });\r\n\t\t\t\t}\r\n\t\t\t\t//remove color\r\n\t\t\t\tif (state.boxDrawObj.secondaryColor) {\r\n\t\t\t\t\tadjustBoxState({ secondaryColor: null });\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (state.boxDrawObj.backgroundToggle) {\r\n\t\t\tif (\r\n\t\t\t\tstate.boxDrawObj.backgroundToggle === 'default' ||\r\n\t\t\t\tstate.boxDrawObj.backgroundToggle === 'random'\r\n\t\t\t) {\r\n\t\t\t\t//remove toggle\r\n\t\t\t\tif (state.boxDrawObj.backgroundToggle === 'default') {\r\n\t\t\t\t\tadjustBoxState({ backgroundToggle: null });\r\n\t\t\t\t}\r\n\t\t\t\t//remove color\r\n\t\t\t\tif (state.boxDrawObj.backgroundColor) {\r\n\t\t\t\t\tadjustBoxState({ backgroundColor: null });\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t// ~~~~~~~~~~~~~~~ off 'choose' toggle remove color value\r\n\t\t// ~~~~~~~~~~~~~~~ if color is same as default, remove property\r\n\t\tif (\r\n\t\t\tstate.boxDrawObj.primaryColor &&\r\n\t\t\tstate.boxDrawObj.primaryColor === '#000000'\r\n\t\t) {\r\n\t\t\tadjustBoxState({ primaryColor: null });\r\n\t\t}\r\n\t\tif (\r\n\t\t\tstate.boxDrawObj.secondaryColor &&\r\n\t\t\tstate.boxDrawObj.secondaryColor === '#8C00FF'\r\n\t\t) {\r\n\t\t\tadjustBoxState({ secondaryColor: null });\r\n\t\t}\r\n\t\tif (\r\n\t\t\tstate.boxDrawObj.backgroundColor &&\r\n\t\t\tstate.boxDrawObj.backgroundColor === '#FFFFFF00'\r\n\t\t) {\r\n\t\t\tadjustBoxState({ backgroundColor: null });\r\n\t\t}\r\n\t\t// ~~~~~~~~~~~~~~~ if color is same as default, remove property\r\n\t\t// ~~~~~~~~~~~~~~~ reset drawStyle default\r\n\t\tif (state.boxDrawObj.drawStyle === 'random') {\r\n\t\t\tadjustBoxState({ drawStyle: null });\r\n\t\t}\r\n\r\n\t\t// ======= boxDrawObj adjustments\r\n\t}\r\n\t// ======= mandalaDrawObj adjustments\r\n\tif (state.mandalaDrawObj) {\r\n\t\t// ~~~~~~~~~~~~~~~ reset drawType\r\n\t\tif (state.mandalaDrawObj.drawType) {\r\n\t\t\tif (state.mandalaDrawObj.drawType === 'random') {\r\n\t\t\t\tadjustMandalaState({ drawType: null });\r\n\t\t\t}\r\n\t\t\tif (state.mandalaDrawObj.drawType !== 'custom') {\r\n\t\t\t\t//delete all mods in <MandalaCustomDrawOptions />\r\n\t\t\t\tstate.mandalaDrawObj.loopCount &&\r\n\t\t\t\t\tadjustMandalaState({ loopCount: null });\r\n\t\t\t\tstate.mandalaDrawObj.minShapeSize &&\r\n\t\t\t\t\tadjustMandalaState({ minShapeSize: null });\r\n\t\t\t\tstate.mandalaDrawObj.maxShapeSize &&\r\n\t\t\t\t\tadjustMandalaState({ maxShapeSize: null });\r\n\t\t\t\tstate.mandalaDrawObj.minShapeCount &&\r\n\t\t\t\t\tadjustMandalaState({ minShapeCount: null });\r\n\t\t\t\tstate.mandalaDrawObj.maxShapeCount &&\r\n\t\t\t\t\tadjustMandalaState({ maxShapeCount: null });\r\n\t\t\t\tstate.mandalaDrawObj.minPathRadius &&\r\n\t\t\t\t\tadjustMandalaState({ minPathRadius: null });\r\n\t\t\t\tstate.mandalaDrawObj.maxPathRadius &&\r\n\t\t\t\t\tadjustMandalaState({ maxPathRadius: null });\r\n\t\t\t\tstate.mandalaDrawObj.blendMode &&\r\n\t\t\t\t\tadjustMandalaState({ blendMode: null });\r\n\t\t\t\tstate.mandalaDrawObj.customBackgroundSwitch &&\r\n\t\t\t\t\tadjustMandalaState({ customBackgroundSwitch: null });\r\n\t\t\t\tstate.mandalaDrawObj.chooseBackgroundColor &&\r\n\t\t\t\t\tadjustMandalaState({ chooseBackgroundColor: null });\r\n\t\t\t}\r\n\t\t\t// ~~~~~~~~~~~~~~~ reset drawType\r\n\t\t\t// ~~~~~~~~~~~~~~~ reset drawType insides\r\n\t\t\tif (state.mandalaDrawObj.drawType === 'custom') {\r\n\t\t\t\tif (state.mandalaDrawObj.customBackgroundSwitch === false) {\r\n\t\t\t\t\tadjustMandalaState({\r\n\t\t\t\t\t\tcustomBackgroundSwitch: null,\r\n\t\t\t\t\t\tchooseBackgroundColor: null,\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// ~~~~~~~~~~~~~~~ reset drawType insides\r\n\t\t}\r\n\r\n\t\t// ~~~~~~~~~~~~~~~ reset loopCount\r\n\r\n\t\t// ======= mandalaDrawObj adjustments\r\n\t}\r\n};\r\n\r\nexport { cloneObj, clearEmpties, writeInputCode, resetDefaults };\r\n","import React from 'react';\r\nimport { cloneObj, writeInputCode } from '../functions/functions.js';\r\n\r\nconst CodeInjector = ({ state }) => {\r\n\t//get code\r\n\tlet displayState = cloneObj(state);\r\n\t// clearEmpties(displayState);\r\n\tdisplayState = writeInputCode(displayState);\r\n\t// console.log(displayState);\r\n\r\n\treturn (\r\n\t\t<section className='codeInjectionContainer'>\r\n\t\t\t<pre>\r\n\t\t\t\t<code className='codeInjection'>{displayState}</code>\r\n\t\t\t</pre>\r\n\t\t</section>\r\n\t);\r\n};\r\n\r\nexport default CodeInjector;\r\n","import React, { Fragment, useState, useEffect } from 'react';\r\n\r\nconst initialState = {\r\n\tboxCount: 10,\r\n\tchoosePrimaryColor: '#000000',\r\n\tchooseSecondaryColor: '#8C00FF',\r\n\tchooseBackgroundColor: '#FFFFFF00',\r\n};\r\n\r\nconst BoxDropDownMarkUp = ({ adjustBoxState }) => {\r\n\tconst [input, setInput] = useState(initialState);\r\n\tconst [activePrimary, setActivePrimary] = useState(\r\n\t\t'defaultPrimaryColorBtn'\r\n\t);\r\n\tconst [activeSecondary, setActiveSecondary] = useState(\r\n\t\t'defaultSecondaryColorBtn'\r\n\t);\r\n\tconst [activeBackground, setActiveBackground] = useState(\r\n\t\t'defaultBackgroundColorBtn'\r\n\t);\r\n\tconst [activeStyle, setActiveStyle] = useState('random');\r\n\r\n\t// useEffect(() => {\r\n\t// \tconsole.log('refresh dropdown');\r\n\t// \t//prevent input state refreshing component,\r\n\t// }, []);\r\n\r\n\tconst handleChange = (event) => {\r\n\t\t// debugger;\r\n\t\tlet value = event.target.value;\r\n\t\tlet keyName = event.target.id;\r\n\t\tif (keyName === 'boxCount') {\r\n\t\t\tvalue = Number(value);\r\n\t\t\tadjustBoxState({ [keyName]: value });\r\n\t\t}\r\n\t\tsetInput({\r\n\t\t\t...input,\r\n\t\t\t[keyName]: value,\r\n\t\t});\r\n\t};\r\n\r\n\tconst handleBtns = (event) => {\r\n\t\t// adjustBoxState([event.target.name], event.target.value);\r\n\t\tconst id = event.target.id;\r\n\t\t// let colorInput = null;\r\n\t\tswitch (id) {\r\n\t\t\tcase 'defaultPrimaryColorBtn':\r\n\t\t\t\tsetActivePrimary(id);\r\n\t\t\t\tadjustBoxState({ primaryToggle: 'default' });\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'randomPrimaryColorBtn':\r\n\t\t\t\tsetActivePrimary(id);\r\n\t\t\t\tadjustBoxState({ primaryToggle: 'random' });\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'choosePrimaryColorBtn':\r\n\t\t\t\tsetActivePrimary(id);\r\n\t\t\t\tadjustBoxState({\r\n\t\t\t\t\tprimaryToggle: 'choose',\r\n\t\t\t\t\tprimaryColor: input.choosePrimaryColor,\r\n\t\t\t\t});\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'defaultSecondaryColorBtn':\r\n\t\t\t\tsetActiveSecondary(id);\r\n\t\t\t\tadjustBoxState({ secondaryToggle: 'default' });\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'chooseSecondaryColorBtn':\r\n\t\t\t\tsetActiveSecondary(id);\r\n\t\t\t\tadjustBoxState({\r\n\t\t\t\t\tsecondaryToggle: 'choose',\r\n\t\t\t\t\tsecondaryColor: input.chooseSecondaryColor,\r\n\t\t\t\t});\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'defaultBackgroundColorBtn':\r\n\t\t\t\tsetActiveBackground(id);\r\n\t\t\t\tadjustBoxState({ backgroundToggle: 'default' });\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'randomBackgroundColorBtn':\r\n\t\t\t\tsetActiveBackground(id);\r\n\t\t\t\tadjustBoxState({ backgroundToggle: 'random' });\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'chooseBackgroundColorBtn':\r\n\t\t\t\tsetActiveBackground(id);\r\n\t\t\t\tadjustBoxState({\r\n\t\t\t\t\tbackgroundToggle: 'choose',\r\n\t\t\t\t\tbackgroundColor: input.chooseBackgroundColor,\r\n\t\t\t\t});\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tconsole.log('error in handleBtns');\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t};\r\n\r\n\tconst handleStyleBtns = (event) => {\r\n\t\tconst word = event.target.innerText;\r\n\t\t// let colorInput = null;\r\n\t\tconst convertedWord =\r\n\t\t\tword.charAt(0).toLowerCase() + word.replace(/\\s/g, '').slice(1);\r\n\t\tsetActiveStyle(convertedWord);\r\n\t\tadjustBoxState({ drawStyle: convertedWord });\r\n\t};\r\n\r\n\treturn (\r\n\t\t<Fragment>\r\n\t\t\t<div className='separatorContainer'>\r\n\t\t\t\t<div className='separators'>\r\n\t\t\t\t\t<p>\r\n\t\t\t\t\t\tBox Count:\r\n\t\t\t\t\t\t<input\r\n\t\t\t\t\t\t\tid='boxCount'\r\n\t\t\t\t\t\t\tclassName='inputField'\r\n\t\t\t\t\t\t\tname='boxCount'\r\n\t\t\t\t\t\t\ttype='number'\r\n\t\t\t\t\t\t\tvalue={input.boxCount}\r\n\t\t\t\t\t\t\tmin='2'\r\n\t\t\t\t\t\t\tstep='2'\r\n\t\t\t\t\t\t\tonChange={handleChange}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</p>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className='separators'>\r\n\t\t\t\t\t<p>Primary Color:</p>\r\n\t\t\t\t\t<div className='primaryColorContainer btnContainer'>\r\n\t\t\t\t\t\t<button\r\n\t\t\t\t\t\t\tid='defaultPrimaryColorBtn'\r\n\t\t\t\t\t\t\tclassName={`btns ${\r\n\t\t\t\t\t\t\t\tactivePrimary === 'defaultPrimaryColorBtn'\r\n\t\t\t\t\t\t\t\t\t? 'active'\r\n\t\t\t\t\t\t\t\t\t: ''\r\n\t\t\t\t\t\t\t}`}\r\n\t\t\t\t\t\t\tonClick={handleBtns}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\tDefault\r\n\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t<button\r\n\t\t\t\t\t\t\tid='randomPrimaryColorBtn'\r\n\t\t\t\t\t\t\tclassName={`btns ${\r\n\t\t\t\t\t\t\t\tactivePrimary === 'randomPrimaryColorBtn'\r\n\t\t\t\t\t\t\t\t\t? 'active'\r\n\t\t\t\t\t\t\t\t\t: ''\r\n\t\t\t\t\t\t\t}`}\r\n\t\t\t\t\t\t\tonClick={handleBtns}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\tRandom\r\n\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t<button\r\n\t\t\t\t\t\t\tid='choosePrimaryColorBtn'\r\n\t\t\t\t\t\t\tclassName={`btns ${\r\n\t\t\t\t\t\t\t\tactivePrimary === 'choosePrimaryColorBtn'\r\n\t\t\t\t\t\t\t\t\t? 'active'\r\n\t\t\t\t\t\t\t\t\t: ''\r\n\t\t\t\t\t\t\t}`}\r\n\t\t\t\t\t\t\tonClick={handleBtns}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\tChoose\r\n\t\t\t\t\t\t\t<input\r\n\t\t\t\t\t\t\t\tid='choosePrimaryColor'\r\n\t\t\t\t\t\t\t\tname='choosePrimaryColor'\r\n\t\t\t\t\t\t\t\ttype='color'\r\n\t\t\t\t\t\t\t\tvalue={input.choosePrimaryColor}\r\n\t\t\t\t\t\t\t\tonChange={handleChange}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t</button>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className='separators'>\r\n\t\t\t\t\t<p>Secondary Color:</p>\r\n\t\t\t\t\t<div className='secondaryColorContainer btnContainer'>\r\n\t\t\t\t\t\t<button\r\n\t\t\t\t\t\t\tid='defaultSecondaryColorBtn'\r\n\t\t\t\t\t\t\tclassName={`btns ${\r\n\t\t\t\t\t\t\t\tactiveSecondary === 'defaultSecondaryColorBtn'\r\n\t\t\t\t\t\t\t\t\t? 'active'\r\n\t\t\t\t\t\t\t\t\t: ''\r\n\t\t\t\t\t\t\t}`}\r\n\t\t\t\t\t\t\tonClick={handleBtns}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\tDefault Random\r\n\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t<button\r\n\t\t\t\t\t\t\tid='chooseSecondaryColorBtn'\r\n\t\t\t\t\t\t\tclassName={`btns ${\r\n\t\t\t\t\t\t\t\tactiveSecondary === 'chooseSecondaryColorBtn'\r\n\t\t\t\t\t\t\t\t\t? 'active'\r\n\t\t\t\t\t\t\t\t\t: ''\r\n\t\t\t\t\t\t\t}`}\r\n\t\t\t\t\t\t\tonClick={handleBtns}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\tChoose\r\n\t\t\t\t\t\t\t<input\r\n\t\t\t\t\t\t\t\tid='chooseSecondaryColor'\r\n\t\t\t\t\t\t\t\ttype='color'\r\n\t\t\t\t\t\t\t\tvalue={input.chooseSecondaryColor}\r\n\t\t\t\t\t\t\t\tonChange={handleChange}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t</button>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className='separators'>\r\n\t\t\t\t\t<p>Background Color:</p>\r\n\t\t\t\t\t<div className='backgroundColorContainer btnContainer'>\r\n\t\t\t\t\t\t<button\r\n\t\t\t\t\t\t\tid='defaultBackgroundColorBtn'\r\n\t\t\t\t\t\t\tclassName={`btns ${\r\n\t\t\t\t\t\t\t\tactiveBackground === 'defaultBackgroundColorBtn'\r\n\t\t\t\t\t\t\t\t\t? 'active'\r\n\t\t\t\t\t\t\t\t\t: ''\r\n\t\t\t\t\t\t\t}`}\r\n\t\t\t\t\t\t\tonClick={handleBtns}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\tDefault\r\n\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t<button\r\n\t\t\t\t\t\t\tid='randomBackgroundColorBtn'\r\n\t\t\t\t\t\t\tclassName={`btns ${\r\n\t\t\t\t\t\t\t\tactiveBackground === 'randomBackgroundColorBtn'\r\n\t\t\t\t\t\t\t\t\t? 'active'\r\n\t\t\t\t\t\t\t\t\t: ''\r\n\t\t\t\t\t\t\t}`}\r\n\t\t\t\t\t\t\tonClick={handleBtns}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\tRandom\r\n\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t<button\r\n\t\t\t\t\t\t\tid='chooseBackgroundColorBtn'\r\n\t\t\t\t\t\t\tclassName={`btns ${\r\n\t\t\t\t\t\t\t\tactiveBackground === 'chooseBackgroundColorBtn'\r\n\t\t\t\t\t\t\t\t\t? 'active'\r\n\t\t\t\t\t\t\t\t\t: ''\r\n\t\t\t\t\t\t\t}`}\r\n\t\t\t\t\t\t\tonClick={handleBtns}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\tChoose\r\n\t\t\t\t\t\t\t<input\r\n\t\t\t\t\t\t\t\tid='chooseBackgroundColor'\r\n\t\t\t\t\t\t\t\ttype='color'\r\n\t\t\t\t\t\t\t\tvalue={input.chooseBackgroundColor}\r\n\t\t\t\t\t\t\t\tonChange={handleChange}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t</button>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t<div className='styleContainer btnContainer'>\r\n\t\t\t\t<p>Styles</p>\r\n\t\t\t\t<div className='btnContainer'>\r\n\t\t\t\t\t<button\r\n\t\t\t\t\t\tid='randomBtn'\r\n\t\t\t\t\t\tclassName={`btns boxPatternBtns ${\r\n\t\t\t\t\t\t\tactiveStyle === 'random' ? 'active' : ''\r\n\t\t\t\t\t\t}`}\r\n\t\t\t\t\t\tonClick={handleStyleBtns}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\tRandom\r\n\t\t\t\t\t</button>\r\n\t\t\t\t\t<button\r\n\t\t\t\t\t\tid='fullCloneBtn'\r\n\t\t\t\t\t\tclassName={`btns boxPatternBtns ${\r\n\t\t\t\t\t\t\tactiveStyle === 'fullClone' ? 'active' : ''\r\n\t\t\t\t\t\t}`}\r\n\t\t\t\t\t\tonClick={handleStyleBtns}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\tFull Clone\r\n\t\t\t\t\t</button>\r\n\t\t\t\t\t<button\r\n\t\t\t\t\t\tid='fullReflectBtn'\r\n\t\t\t\t\t\tclassName={`btns boxPatternBtns ${\r\n\t\t\t\t\t\t\tactiveStyle === 'fullReflect' ? 'active' : ''\r\n\t\t\t\t\t\t}`}\r\n\t\t\t\t\t\tonClick={handleStyleBtns}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\tFull Reflect\r\n\t\t\t\t\t</button>\r\n\t\t\t\t\t<button\r\n\t\t\t\t\t\tid='fullRotateBtn'\r\n\t\t\t\t\t\tclassName={`btns boxPatternBtns ${\r\n\t\t\t\t\t\t\tactiveStyle === 'fullRotate' ? 'active' : ''\r\n\t\t\t\t\t\t}`}\r\n\t\t\t\t\t\tonClick={handleStyleBtns}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\tFull Rotate\r\n\t\t\t\t\t</button>\r\n\t\t\t\t\t<button\r\n\t\t\t\t\t\tid='halfReflectBtn'\r\n\t\t\t\t\t\tclassName={`btns boxPatternBtns ${\r\n\t\t\t\t\t\t\tactiveStyle === 'halfReflect' ? 'active' : ''\r\n\t\t\t\t\t\t}`}\r\n\t\t\t\t\t\tonClick={handleStyleBtns}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\tHalf Reflect\r\n\t\t\t\t\t</button>\r\n\t\t\t\t\t<button\r\n\t\t\t\t\t\tid='noPatternBtn'\r\n\t\t\t\t\t\tclassName={`btns boxPatternBtns ${\r\n\t\t\t\t\t\t\tactiveStyle === 'noPattern' ? 'active' : ''\r\n\t\t\t\t\t\t}`}\r\n\t\t\t\t\t\tonClick={handleStyleBtns}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\tNo Pattern\r\n\t\t\t\t\t</button>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</Fragment>\r\n\t);\r\n};\r\n\r\nexport default BoxDropDownMarkUp;\r\n","import React, { Fragment, useState, useEffect } from 'react';\r\n\r\nconst initialState = {\r\n\tloopCount: 5,\r\n\tminShapeSize: 20,\r\n\tmaxShapeSize: 200,\r\n\tminShapeCount: 4,\r\n\tmaxShapeCount: 200,\r\n\tminPathRadius: 20,\r\n\tmaxPathRadius: 500,\r\n\tblendMode: 'default',\r\n\tchooseBackgroundColor: '#ffffff',\r\n};\r\n\r\nconst MandalaCustomDrawOptions = ({ adjustMandalaState }) => {\r\n\tconst [input, setInput] = useState(initialState);\r\n\tconst [showBackgroundOptions, setShowBackgroundOptions] = useState(false);\r\n\r\n\t// useEffect(() => {\r\n\t// \tconsole.log('refresh dropdown');\r\n\t// \t//prevent input state refreshing component,\r\n\t// }, []);\r\n\r\n\tconst handleChange = (event) => {\r\n\t\tlet keyName = event.target.id;\r\n\t\tlet value = event.target.value;\r\n\r\n\t\t//custom\r\n\t\tif (keyName === 'customBackgroundSwitch') {\r\n\t\t\tconst checked = event.target.checked;\r\n\t\t\tadjustMandalaState({\r\n\t\t\t\t[keyName]: checked,\r\n\t\t\t\tchooseBackgroundColor: input.chooseBackgroundColor,\r\n\t\t\t});\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t//update this state\r\n\t\tsetInput({\r\n\t\t\t...input,\r\n\t\t\t[keyName]: value,\r\n\t\t});\r\n\t\tif (keyName === 'chooseBackgroundColor') return;\r\n\t\t//update main state\r\n\t\tadjustMandalaState({ [keyName]: value });\r\n\t};\r\n\r\n\treturn (\r\n\t\t<Fragment>\r\n\t\t\t<p>\r\n\t\t\t\tLoop Count:\r\n\t\t\t\t<input\r\n\t\t\t\t\tid='loopCount'\r\n\t\t\t\t\tclassName='mandalaInputs'\r\n\t\t\t\t\tname='loopCount'\r\n\t\t\t\t\ttype='number'\r\n\t\t\t\t\tvalue={input.loopCount}\r\n\t\t\t\t\tmin='2'\r\n\t\t\t\t\tonChange={handleChange}\r\n\t\t\t\t/>\r\n\t\t\t</p>\r\n\t\t\t<p>\r\n\t\t\t\tMin Shape Size:\r\n\t\t\t\t<input\r\n\t\t\t\t\tid='minShapeSize'\r\n\t\t\t\t\tclassName='mandalaInputs'\r\n\t\t\t\t\tname='minShapeSize'\r\n\t\t\t\t\ttype='number'\r\n\t\t\t\t\tvalue={input.minShapeSize}\r\n\t\t\t\t\tmin='2'\r\n\t\t\t\t\tonChange={handleChange}\r\n\t\t\t\t/>\r\n\t\t\t</p>\r\n\t\t\t<p>\r\n\t\t\t\tMax Shape Size:\r\n\t\t\t\t<input\r\n\t\t\t\t\tid='maxShapeSize'\r\n\t\t\t\t\tclassName='mandalaInputs'\r\n\t\t\t\t\tname='maxShapeSize'\r\n\t\t\t\t\ttype='number'\r\n\t\t\t\t\tvalue={input.maxShapeSize}\r\n\t\t\t\t\tmin='2'\r\n\t\t\t\t\tonChange={handleChange}\r\n\t\t\t\t/>\r\n\t\t\t</p>\r\n\t\t\t<p>\r\n\t\t\t\tMin Shape Count:\r\n\t\t\t\t<input\r\n\t\t\t\t\tid='minShapeCount'\r\n\t\t\t\t\tclassName='mandalaInputs'\r\n\t\t\t\t\tname='minShapeCount'\r\n\t\t\t\t\ttype='number'\r\n\t\t\t\t\tvalue={input.minShapeCount}\r\n\t\t\t\t\tmin='2'\r\n\t\t\t\t\tonChange={handleChange}\r\n\t\t\t\t/>\r\n\t\t\t</p>\r\n\t\t\t<p>\r\n\t\t\t\tMax Shape Count:\r\n\t\t\t\t<input\r\n\t\t\t\t\tid='maxShapeCount'\r\n\t\t\t\t\tclassName='mandalaInputs'\r\n\t\t\t\t\tname='maxShapeCount'\r\n\t\t\t\t\ttype='number'\r\n\t\t\t\t\tvalue={input.maxShapeCount}\r\n\t\t\t\t\tmin='2'\r\n\t\t\t\t\tonChange={handleChange}\r\n\t\t\t\t/>\r\n\t\t\t</p>\r\n\t\t\t<p>\r\n\t\t\t\tMin Path Radius:\r\n\t\t\t\t<input\r\n\t\t\t\t\tid='minPathRadius'\r\n\t\t\t\t\tclassName='mandalaInputs'\r\n\t\t\t\t\tname='minPathRadius'\r\n\t\t\t\t\ttype='number'\r\n\t\t\t\t\tvalue={input.minPathRadius}\r\n\t\t\t\t\tmin='2'\r\n\t\t\t\t\tonChange={handleChange}\r\n\t\t\t\t/>\r\n\t\t\t</p>\r\n\t\t\t<p>\r\n\t\t\t\tMax Path Radius:\r\n\t\t\t\t<input\r\n\t\t\t\t\tid='maxPathRadius'\r\n\t\t\t\t\tclassName='mandalaInputs'\r\n\t\t\t\t\tname='maxPathRadius'\r\n\t\t\t\t\ttype='number'\r\n\t\t\t\t\tvalue={input.maxPathRadius}\r\n\t\t\t\t\tmin='2'\r\n\t\t\t\t\tonChange={handleChange}\r\n\t\t\t\t/>\r\n\t\t\t</p>\r\n\t\t\t<p>\r\n\t\t\t\tBlend Mode:\r\n\t\t\t\t<input\r\n\t\t\t\t\tid='blendMode'\r\n\t\t\t\t\tclassName='mandalaInputs'\r\n\t\t\t\t\tname='blendMode'\r\n\t\t\t\t\ttype='string'\r\n\t\t\t\t\tvalue={input.blendMode}\r\n\t\t\t\t\tonChange={handleChange}\r\n\t\t\t\t/>\r\n\t\t\t</p>\r\n\t\t\t<p>\r\n\t\t\t\tBackground Color:\r\n\t\t\t\t<input\r\n\t\t\t\t\tid='customBackgroundSwitch'\r\n\t\t\t\t\tclassName='mandalaInputs'\r\n\t\t\t\t\tname='customBackgroundSwitch'\r\n\t\t\t\t\ttype='checkbox'\r\n\t\t\t\t\tonChange={handleChange}\r\n\t\t\t\t/>\r\n\t\t\t\t<input\r\n\t\t\t\t\tid='chooseBackgroundColor'\r\n\t\t\t\t\tname='chooseBackgroundColor'\r\n\t\t\t\t\ttype='color'\r\n\t\t\t\t\tvalue={input.chooseBackgroundColor}\r\n\t\t\t\t\tonChange={handleChange}\r\n\t\t\t\t/>\r\n\t\t\t</p>\r\n\t\t</Fragment>\r\n\t);\r\n};\r\n\r\nexport default MandalaCustomDrawOptions;\r\n","import React, { Fragment, useState, useEffect } from 'react';\r\nimport MandalaCustomDrawOptions from './MandalaCustomDrawOptions';\r\nconst initialState = {\r\n\tdrawType: 'random',\r\n};\r\n\r\nconst MandalaDropDownMarkUp = ({ adjustMandalaState }) => {\r\n\tconst [input, setInput] = useState({});\r\n\tconst [showDrawOptions, setShowDrawOptions] = useState(false);\r\n\r\n\tconst [activeStyle, setActiveStyle] = useState('random');\r\n\r\n\tconst handleSelectionChange = (event) => {\r\n\t\tconst name = event.target.name;\r\n\t\tconst selection = event.target.selectedOptions[0].value;\r\n\r\n\t\t//see if I need to show custom options\r\n\t\tif (name === 'drawType' && selection === 'custom') {\r\n\t\t\tsetShowDrawOptions(true);\r\n\t\t} else {\r\n\t\t\tsetShowDrawOptions(false);\r\n\t\t}\r\n\t\t//send obj to app\r\n\t\tadjustMandalaState({ [name]: selection });\r\n\t};\r\n\r\n\treturn (\r\n\t\t<Fragment>\r\n\t\t\t<div className='separatorContainer'>\r\n\t\t\t\t<div className='separators'>\r\n\t\t\t\t\t<p>\r\n\t\t\t\t\t\tDraw Type:\r\n\t\t\t\t\t\t<select\r\n\t\t\t\t\t\t\tid='drawType'\r\n\t\t\t\t\t\t\tclassName='mandalaInputs'\r\n\t\t\t\t\t\t\tname='drawType'\r\n\t\t\t\t\t\t\tonChange={handleSelectionChange}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t<option value='random'>random</option>\r\n\t\t\t\t\t\t\t<option value='strokeOnly'>Stroke Only</option>\r\n\t\t\t\t\t\t\t<option value='fillOnly'>Fill Only</option>\r\n\t\t\t\t\t\t\t<option value='fillAndStroke'>\r\n\t\t\t\t\t\t\t\tFill And Stroke\r\n\t\t\t\t\t\t\t</option>\r\n\t\t\t\t\t\t\t<option value='individual'>Individual</option>\r\n\t\t\t\t\t\t\t<option value='chaos'>Chaos</option>\r\n\t\t\t\t\t\t\t<option value='outline'>Outline</option>\r\n\t\t\t\t\t\t\t<option value='custom'>Custom</option>\r\n\t\t\t\t\t\t</select>\r\n\t\t\t\t\t</p>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className='separators'>\r\n\t\t\t\t\t{showDrawOptions ? (\r\n\t\t\t\t\t\t<MandalaCustomDrawOptions\r\n\t\t\t\t\t\t\tadjustMandalaState={adjustMandalaState}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t) : null}\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</Fragment>\r\n\t);\r\n};\r\n\r\nexport default MandalaDropDownMarkUp;\r\n\r\n// <Fragment>\r\n// <div className='separatorContainer'>\r\n// \t<div className='separators'>\r\n// \t\t<p>\r\n// \t\t\tBox Count:\r\n// \t\t\t<input\r\n// \t\t\t\tid='boxCount'\r\n// \t\t\t\tclassName='inputField'\r\n// \t\t\t\tname='boxCount'\r\n// \t\t\t\ttype='number'\r\n// \t\t\t\tvalue={input.boxCount}\r\n// \t\t\t\tmin='2'\r\n// \t\t\t\tstep='2'\r\n// \t\t\t\tonChange={handleChange}\r\n// \t\t\t/>\r\n// \t\t</p>\r\n// \t</div>\r\n// \t<div className='separators'>\r\n// \t\t<p>Primary Color:</p>\r\n// \t\t<div className='primaryColorContainer btnContainer'>\r\n// \t\t\t<button\r\n// \t\t\t\tid='defaultPrimaryColorBtn'\r\n// \t\t\t\tclassName={`btns ${\r\n// \t\t\t\t\tactivePrimary === 'defaultPrimaryColorBtn'\r\n// \t\t\t\t\t\t? 'active'\r\n// \t\t\t\t\t\t: ''\r\n// \t\t\t\t}`}\r\n// \t\t\t\tonClick={handleBtns}\r\n// \t\t\t>\r\n// \t\t\t\tDefault\r\n// \t\t\t</button>\r\n// \t\t\t<button\r\n// \t\t\t\tid='randomPrimaryColorBtn'\r\n// \t\t\t\tclassName={`btns ${\r\n// \t\t\t\t\tactivePrimary === 'randomPrimaryColorBtn'\r\n// \t\t\t\t\t\t? 'active'\r\n// \t\t\t\t\t\t: ''\r\n// \t\t\t\t}`}\r\n// \t\t\t\tonClick={handleBtns}\r\n// \t\t\t>\r\n// \t\t\t\tRandom\r\n// \t\t\t</button>\r\n// \t\t\t<button\r\n// \t\t\t\tid='choosePrimaryColorBtn'\r\n// \t\t\t\tclassName={`btns ${\r\n// \t\t\t\t\tactivePrimary === 'choosePrimaryColorBtn'\r\n// \t\t\t\t\t\t? 'active'\r\n// \t\t\t\t\t\t: ''\r\n// \t\t\t\t}`}\r\n// \t\t\t\tonClick={handleBtns}\r\n// \t\t\t>\r\n// \t\t\t\tChoose\r\n// \t\t\t\t<input\r\n// \t\t\t\t\tid='choosePrimaryColor'\r\n// \t\t\t\t\tname='choosePrimaryColor'\r\n// \t\t\t\t\ttype='color'\r\n// \t\t\t\t\tvalue={input.choosePrimaryColor}\r\n// \t\t\t\t\tonChange={handleChange}\r\n// \t\t\t\t/>\r\n// \t\t\t</button>\r\n// \t\t</div>\r\n// \t</div>\r\n// \t<div className='separators'>\r\n// \t\t<p>Secondary Color:</p>\r\n// \t\t<div className='secondaryColorContainer btnContainer'>\r\n// \t\t\t<button\r\n// \t\t\t\tid='defaultSecondaryColorBtn'\r\n// \t\t\t\tclassName={`btns ${\r\n// \t\t\t\t\tactiveSecondary === 'defaultSecondaryColorBtn'\r\n// \t\t\t\t\t\t? 'active'\r\n// \t\t\t\t\t\t: ''\r\n// \t\t\t\t}`}\r\n// \t\t\t\tonClick={handleBtns}\r\n// \t\t\t>\r\n// \t\t\t\tDefault Random\r\n// \t\t\t</button>\r\n// \t\t\t<button\r\n// \t\t\t\tid='chooseSecondaryColorBtn'\r\n// \t\t\t\tclassName={`btns ${\r\n// \t\t\t\t\tactiveSecondary === 'chooseSecondaryColorBtn'\r\n// \t\t\t\t\t\t? 'active'\r\n// \t\t\t\t\t\t: ''\r\n// \t\t\t\t}`}\r\n// \t\t\t\tonClick={handleBtns}\r\n// \t\t\t>\r\n// \t\t\t\tChoose\r\n// \t\t\t\t<input\r\n// \t\t\t\t\tid='chooseSecondaryColor'\r\n// \t\t\t\t\ttype='color'\r\n// \t\t\t\t\tvalue={input.chooseSecondaryColor}\r\n// \t\t\t\t\tonChange={handleChange}\r\n// \t\t\t\t/>\r\n// \t\t\t</button>\r\n// \t\t</div>\r\n// \t</div>\r\n// \t<div className='separators'>\r\n// \t\t<p>Background Color:</p>\r\n// \t\t<div className='backgroundColorContainer btnContainer'>\r\n// \t\t\t<button\r\n// \t\t\t\tid='defaultBackgroundColorBtn'\r\n// \t\t\t\tclassName={`btns ${\r\n// \t\t\t\t\tactiveBackground === 'defaultBackgroundColorBtn'\r\n// \t\t\t\t\t\t? 'active'\r\n// \t\t\t\t\t\t: ''\r\n// \t\t\t\t}`}\r\n// \t\t\t\tonClick={handleBtns}\r\n// \t\t\t>\r\n// \t\t\t\tDefault\r\n// \t\t\t</button>\r\n// \t\t\t<button\r\n// \t\t\t\tid='randomBackgroundColorBtn'\r\n// \t\t\t\tclassName={`btns ${\r\n// \t\t\t\t\tactiveBackground === 'randomBackgroundColorBtn'\r\n// \t\t\t\t\t\t? 'active'\r\n// \t\t\t\t\t\t: ''\r\n// \t\t\t\t}`}\r\n// \t\t\t\tonClick={handleBtns}\r\n// \t\t\t>\r\n// \t\t\t\tRandom\r\n// \t\t\t</button>\r\n// \t\t\t<button\r\n// \t\t\t\tid='chooseBackgroundColorBtn'\r\n// \t\t\t\tclassName={`btns ${\r\n// \t\t\t\t\tactiveBackground === 'chooseBackgroundColorBtn'\r\n// \t\t\t\t\t\t? 'active'\r\n// \t\t\t\t\t\t: ''\r\n// \t\t\t\t}`}\r\n// \t\t\t\tonClick={handleBtns}\r\n// \t\t\t>\r\n// \t\t\t\tChoose\r\n// \t\t\t\t<input\r\n// \t\t\t\t\tid='chooseBackgroundColor'\r\n// \t\t\t\t\ttype='color'\r\n// \t\t\t\t\tvalue={input.chooseBackgroundColor}\r\n// \t\t\t\t\tonChange={handleChange}\r\n// \t\t\t\t/>\r\n// \t\t\t</button>\r\n// \t\t</div>\r\n// \t</div>\r\n// </div>\r\n// <div className='styleContainer btnContainer'>\r\n// \t<p>Styles</p>\r\n// \t<div className='btnContainer'>\r\n// \t\t<button\r\n// \t\t\tid='randomBtn'\r\n// \t\t\tclassName={`btns boxPatternBtns ${\r\n// \t\t\t\tactiveStyle === 'random' ? 'active' : ''\r\n// \t\t\t}`}\r\n// \t\t\tonClick={handleStyleBtns}\r\n// \t\t>\r\n// \t\t\tRandom\r\n// \t\t</button>\r\n// \t\t<button\r\n// \t\t\tid='fullCloneBtn'\r\n// \t\t\tclassName={`btns boxPatternBtns ${\r\n// \t\t\t\tactiveStyle === 'fullClone' ? 'active' : ''\r\n// \t\t\t}`}\r\n// \t\t\tonClick={handleStyleBtns}\r\n// \t\t>\r\n// \t\t\tFull Clone\r\n// \t\t</button>\r\n// \t\t<button\r\n// \t\t\tid='fullReflectBtn'\r\n// \t\t\tclassName={`btns boxPatternBtns ${\r\n// \t\t\t\tactiveStyle === 'fullReflect' ? 'active' : ''\r\n// \t\t\t}`}\r\n// \t\t\tonClick={handleStyleBtns}\r\n// \t\t>\r\n// \t\t\tFull Reflect\r\n// \t\t</button>\r\n// \t\t<button\r\n// \t\t\tid='fullRotateBtn'\r\n// \t\t\tclassName={`btns boxPatternBtns ${\r\n// \t\t\t\tactiveStyle === 'fullRotate' ? 'active' : ''\r\n// \t\t\t}`}\r\n// \t\t\tonClick={handleStyleBtns}\r\n// \t\t>\r\n// \t\t\tFull Rotate\r\n// \t\t</button>\r\n// \t\t<button\r\n// \t\t\tid='halfReflectBtn'\r\n// \t\t\tclassName={`btns boxPatternBtns ${\r\n// \t\t\t\tactiveStyle === 'halfReflect' ? 'active' : ''\r\n// \t\t\t}`}\r\n// \t\t\tonClick={handleStyleBtns}\r\n// \t\t>\r\n// \t\t\tHalf Reflect\r\n// \t\t</button>\r\n// \t\t<button\r\n// \t\t\tid='noPatternBtn'\r\n// \t\t\tclassName={`btns boxPatternBtns ${\r\n// \t\t\t\tactiveStyle === 'noPattern' ? 'active' : ''\r\n// \t\t\t}`}\r\n// \t\t\tonClick={handleStyleBtns}\r\n// \t\t>\r\n// \t\t\tNo Pattern\r\n// \t\t</button>\r\n// \t</div>\r\n// </div>\r\n// </Fragment>\r\n","import React, { useState, Fragment } from 'react';\r\nimport BoxDropDownMarkUp from './BoxDropDownMarkUp';\r\nimport MandalaDropDownMarkUp from './MandalaDropDownMarkUp';\r\n// import { randomDraw } from '../../randomDraw';\r\n\r\nconst initialInputState = {\r\n\twidth: 500,\r\n\theight: 500,\r\n};\r\n\r\nconst Controls = ({\r\n\tdraw,\r\n\tstate,\r\n\tadjustState,\r\n\tadjustDimensions,\r\n\tadjustBoxState,\r\n\tadjustMandalaState,\r\n}) => {\r\n\tconst [input, setInput] = useState(initialInputState);\r\n\tconst [active, setActive] = useState('randomDrawerBtn');\r\n\tconst [dropDown, setDropDown] = useState(false);\r\n\tconst [whichDropDown, setWhichDropDown] = useState(''); //'draw', 'mandala'\r\n\r\n\tconst handleBtnClick = (event) => {\r\n\t\tlet id = event.target.id;\r\n\t\tswitch (id) {\r\n\t\t\tcase 'boxDrawerBtn':\r\n\t\t\t\tsetActive(id);\r\n\t\t\t\tadjustState({ typeOfDrawer: 'boxDraw' });\r\n\t\t\t\tsetDropDown(true);\r\n\t\t\t\tsetWhichDropDown('box');\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'mandalaDrawerBtn':\r\n\t\t\t\tsetActive(id);\r\n\t\t\t\tadjustState({ typeOfDrawer: 'mandalaDraw' });\r\n\t\t\t\tsetDropDown(true);\r\n\t\t\t\tsetWhichDropDown('mandala');\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tsetActive('randomDrawerBtn');\r\n\t\t\t\tadjustState({ typeOfDrawer: 'random' });\r\n\t\t\t\tsetDropDown(false);\r\n\t\t\t\tconsole.log('error in handleBtnClick', id);\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t};\r\n\tconst handleChange = (event) => {\r\n\t\tsetInput({\r\n\t\t\t...input,\r\n\t\t\t[event.target.name]: event.target.value,\r\n\t\t});\r\n\t\tadjustDimensions({ [event.target.name]: Number(event.target.value) });\r\n\t};\r\n\r\n\tlet dropDownMarkUp;\r\n\tswitch (whichDropDown) {\r\n\t\tcase 'box':\r\n\t\t\tdropDownMarkUp = (\r\n\t\t\t\t<BoxDropDownMarkUp adjustBoxState={adjustBoxState} />\r\n\t\t\t);\r\n\t\t\tbreak;\r\n\t\tcase 'mandala':\r\n\t\t\tdropDownMarkUp = (\r\n\t\t\t\t<MandalaDropDownMarkUp\r\n\t\t\t\t\tadjustMandalaState={adjustMandalaState}\r\n\t\t\t\t/>\r\n\t\t\t);\r\n\t\t\tbreak;\r\n\t\tdefault:\r\n\t\t\tdropDownMarkUp = null;\r\n\t\t\tbreak;\r\n\t}\r\n\r\n\treturn (\r\n\t\t<section className='controls'>\r\n\t\t\t<div className='mainControls'>\r\n\t\t\t\t<div className='drawerContainer btnContainer'>\r\n\t\t\t\t\t<button\r\n\t\t\t\t\t\tid='randomDrawerBtn'\r\n\t\t\t\t\t\tclassName={`btns ${\r\n\t\t\t\t\t\t\tactive === 'randomDrawerBtn' ? 'active' : ''\r\n\t\t\t\t\t\t}`}\r\n\t\t\t\t\t\tonClick={handleBtnClick}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\tRandom Draw\r\n\t\t\t\t\t</button>\r\n\t\t\t\t\t<button\r\n\t\t\t\t\t\tid='boxDrawerBtn'\r\n\t\t\t\t\t\tclassName={`btns ${\r\n\t\t\t\t\t\t\tactive === 'boxDrawerBtn' ? 'active' : ''\r\n\t\t\t\t\t\t}`}\r\n\t\t\t\t\t\tonClick={handleBtnClick}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\tBox Draw\r\n\t\t\t\t\t</button>\r\n\t\t\t\t\t<button\r\n\t\t\t\t\t\tid='mandalaDrawerBtn'\r\n\t\t\t\t\t\tclassName='btns'\r\n\t\t\t\t\t\tonClick={handleBtnClick}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\tMandala Draw\r\n\t\t\t\t\t</button>\r\n\t\t\t\t</div>\r\n\t\t\t\t<p>\r\n\t\t\t\t\tDimensions:\r\n\t\t\t\t\t<input\r\n\t\t\t\t\t\tid='dimensionWidth'\r\n\t\t\t\t\t\tname='width'\r\n\t\t\t\t\t\tclassName='inputField'\r\n\t\t\t\t\t\ttype='number'\r\n\t\t\t\t\t\tvalue={input.width}\r\n\t\t\t\t\t\tmin='2'\r\n\t\t\t\t\t\tstep='2'\r\n\t\t\t\t\t\tonChange={handleChange}\r\n\t\t\t\t\t/>\r\n\t\t\t\t\tx\r\n\t\t\t\t\t<input\r\n\t\t\t\t\t\tid='dimensionHeight'\r\n\t\t\t\t\t\tname='height'\r\n\t\t\t\t\t\tclassName='inputField'\r\n\t\t\t\t\t\ttype='number'\r\n\t\t\t\t\t\tvalue={input.height}\r\n\t\t\t\t\t\tmin='2'\r\n\t\t\t\t\t\tstep='2'\r\n\t\t\t\t\t\tonChange={handleChange}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</p>\r\n\t\t\t</div>\r\n\t\t\t<div className='subControls'>\r\n\t\t\t\t{dropDown ? dropDownMarkUp : null}\r\n\t\t\t</div>\r\n\t\t</section>\r\n\t);\r\n};\r\nexport default Controls;\r\n","import React from 'react';\r\n\r\nconst MainDisplay = () => {\r\n\treturn <section className='randomDraw'>Drawing will go here</section>;\r\n};\r\nexport default MainDisplay;\r\n","import { roll } from '../utilities.js';\r\n\r\nconst boxDraw = (boxDrawObj, xCoord = 0, yCoord = 0) => {\r\n\tconst usingMatrix = boxDrawObj.matrix;\r\n\r\n\tif (xCoord === null && yCoord === null) {\r\n\t\tfor (let matrixRow = 0; matrixRow < usingMatrix.length; matrixRow++) {\r\n\t\t\tfor (\r\n\t\t\t\tlet matrixColumn = 0;\r\n\t\t\t\tmatrixColumn < usingMatrix[matrixRow].length;\r\n\t\t\t\tmatrixColumn++\r\n\t\t\t) {\r\n\t\t\t\tconst pixel = usingMatrix[matrixRow][matrixColumn];\r\n\t\t\t\tconst calcX = pixel.xStart + xCoord;\r\n\t\t\t\tconst calcY = pixel.yStart + yCoord;\r\n\r\n\t\t\t\tboxDrawObj.ctx.fillStyle = pixel.color;\r\n\t\t\t\tboxDrawObj.ctx.fillRect(\r\n\t\t\t\t\tcalcX,\r\n\t\t\t\t\tcalcY,\r\n\t\t\t\t\tboxDrawObj.pixelWidth,\r\n\t\t\t\t\tboxDrawObj.pixelHeight\r\n\t\t\t\t);\r\n\t\t\t\tboxDrawObj.ctx.strokeStyle = `rgb(255, 255, 255)`;\r\n\t\t\t\tboxDrawObj.ctx.strokeRect(\r\n\t\t\t\t\tcalcX,\r\n\t\t\t\t\tcalcY,\r\n\t\t\t\t\tboxDrawObj.pixelWidth,\r\n\t\t\t\t\tboxDrawObj.pixelHeight\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn;\r\n\t}\r\n\tfor (let matrixRow = 0; matrixRow < usingMatrix.length; matrixRow++) {\r\n\t\tfor (\r\n\t\t\tlet matrixColumn = 0;\r\n\t\t\tmatrixColumn < usingMatrix[matrixRow].length;\r\n\t\t\tmatrixColumn++\r\n\t\t) {\r\n\t\t\tconst pixel = usingMatrix[matrixRow][matrixColumn];\r\n\t\t\tconst calcX = pixel.xStart + xCoord;\r\n\t\t\tconst calcY = pixel.yStart + yCoord;\r\n\r\n\t\t\tif (xCoord === null && yCoord === null) {\r\n\t\t\t\tboxDrawObj.ctx.fillStyle = pixel.color;\r\n\t\t\t\tboxDrawObj.ctx.fillRect(\r\n\t\t\t\t\tcalcX,\r\n\t\t\t\t\tcalcY,\r\n\t\t\t\t\tboxDrawObj.pixelWidth,\r\n\t\t\t\t\tboxDrawObj.pixelHeight\r\n\t\t\t\t);\r\n\t\t\t\tboxDrawObj.ctx.strokeStyle = `rgb(255, 255, 255)`;\r\n\t\t\t\tboxDrawObj.ctx.strokeRect(\r\n\t\t\t\t\tcalcX,\r\n\t\t\t\t\tcalcY,\r\n\t\t\t\t\tboxDrawObj.pixelWidth,\r\n\t\t\t\t\tboxDrawObj.pixelHeight\r\n\t\t\t\t);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tboxDrawObj.ctx2.fillStyle = pixel.color;\r\n\t\t\tboxDrawObj.ctx2.fillRect(\r\n\t\t\t\tcalcX,\r\n\t\t\t\tcalcY,\r\n\t\t\t\tboxDrawObj.pixelWidth,\r\n\t\t\t\tboxDrawObj.pixelHeight\r\n\t\t\t);\r\n\t\t\tboxDrawObj.ctx2.strokeStyle = `rgb(255, 255, 255)`;\r\n\t\t\tboxDrawObj.ctx2.strokeRect(\r\n\t\t\t\tcalcX,\r\n\t\t\t\tcalcY,\r\n\t\t\t\tboxDrawObj.pixelWidth,\r\n\t\t\t\tboxDrawObj.pixelHeight\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n\treturn usingMatrix;\r\n};\r\nclass PixelNode {\r\n\tconstructor(xStart, yStart, color = '#020') {\r\n\t\tthis.xStart = xStart;\r\n\t\tthis.yStart = yStart;\r\n\t\tthis.color = color;\r\n\t}\r\n}\r\nclass InputNode {\r\n\tconstructor(ctx, ctx2, matrix, pixelWidth, pixelHeight) {\r\n\t\tthis.ctx = ctx;\r\n\t\tthis.ctx2 = ctx2;\r\n\t\tthis.matrix = matrix;\r\n\t\tthis.pixelWidth = pixelWidth;\r\n\t\tthis.pixelHeight = pixelHeight;\r\n\t}\r\n}\r\n\r\nconst whatToPlace = (boxDrawObj, xStart, yStart) => {\r\n\tconst rollColor = roll(3);\r\n\tlet pixel = new PixelNode(xStart, yStart);\r\n\tswitch (rollColor) {\r\n\t\tcase 1:\r\n\t\t\tpixel.color = boxDrawObj.backgroundColor;\r\n\t\t\tbreak;\r\n\t\tcase 2:\r\n\t\t\tpixel.color = boxDrawObj.primaryColor;\r\n\t\t\tbreak;\r\n\t\tcase 3:\r\n\t\t\tpixel.color = boxDrawObj.secondaryColor;\r\n\t\t\tbreak;\r\n\t\tdefault:\r\n\t\t\tconsole.log('error, sorry');\r\n\t}\r\n\treturn pixel;\r\n};\r\n\r\nconst createPixelMap = (boxDrawObj, patternOverride) => {\r\n\tconst newMatrix = [];\r\n\tif (patternOverride === 'noPattern') {\r\n\t\t//this will cycle through y axis on pixel height\r\n\t\tfor (\r\n\t\t\tlet y = 0;\r\n\t\t\ty < boxDrawObj.canvasHeight;\r\n\t\t\ty += boxDrawObj.pixelHeight\r\n\t\t) {\r\n\t\t\tlet row = [];\r\n\t\t\t//this will cycle through x axis on pixel width\r\n\t\t\tfor (\r\n\t\t\t\tlet x = 0;\r\n\t\t\t\tx < boxDrawObj.canvasWidth;\r\n\t\t\t\tx += boxDrawObj.pixelWidth\r\n\t\t\t) {\r\n\t\t\t\t// console.log(`${x} starting pixel draw,`);\r\n\t\t\t\tconst pixel = whatToPlace(boxDrawObj, x, y);\r\n\t\t\t\trow.push(pixel);\r\n\t\t\t}\r\n\t\t\tnewMatrix.push(row);\r\n\t\t}\r\n\t} else {\r\n\t\t//this will cycle through y axis on pixel height\r\n\t\tfor (\r\n\t\t\tlet y = 0;\r\n\t\t\ty < boxDrawObj.drawSectionHeight;\r\n\t\t\ty += boxDrawObj.pixelHeight\r\n\t\t) {\r\n\t\t\tlet row = [];\r\n\t\t\t//this will cycle through x axis on pixel width\r\n\t\t\tfor (\r\n\t\t\t\tlet x = 0;\r\n\t\t\t\tx < boxDrawObj.drawSectionWidth;\r\n\t\t\t\tx += boxDrawObj.pixelWidth\r\n\t\t\t) {\r\n\t\t\t\t// console.log(`${x} starting pixel draw,`);\r\n\t\t\t\tconst pixel = whatToPlace(boxDrawObj, x, y);\r\n\t\t\t\trow.push(pixel);\r\n\t\t\t}\r\n\t\t\tnewMatrix.push(row);\r\n\t\t}\r\n\t}\r\n\treturn newMatrix;\r\n};\r\n\r\nconst combineMatrixTopHalf = (matrix1, matrix2) => {\r\n\tlet combinedMatrix = [];\r\n\tfor (let i = 0; i < matrix1.length; i++) {\r\n\t\tconst combine = [...matrix1[i], ...matrix2[i]];\r\n\t\tcombinedMatrix.push(combine);\r\n\t}\r\n\treturn combinedMatrix;\r\n};\r\nconst combineMatrixLeftHalf = (matrix1, matrix2) => {\r\n\treturn [...matrix1, ...matrix2];\r\n};\r\n\r\nconst findQuadrantOrder = (boxDrawObj) => {\r\n\t// console.log(boxDrawObj);\r\n\tlet order = [];\r\n\tlet quadrantArray = [];\r\n\r\n\twhile (order.length < 4) {\r\n\t\tlet test = roll(4);\r\n\t\tif (!order.includes(test)) {\r\n\t\t\tlet quadrant = {};\r\n\t\t\tswitch (test) {\r\n\t\t\t\tcase 1:\r\n\t\t\t\t\tquadrant.x = 0;\r\n\t\t\t\t\tquadrant.y = 0;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 2:\r\n\t\t\t\t\tquadrant.x = boxDrawObj.drawSectionWidth;\r\n\t\t\t\t\tquadrant.y = 0;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 3:\r\n\t\t\t\t\tquadrant.x = boxDrawObj.drawSectionWidth;\r\n\t\t\t\t\tquadrant.y = boxDrawObj.drawSectionHeight;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 4:\r\n\t\t\t\t\tquadrant.x = 0;\r\n\t\t\t\t\tquadrant.y = boxDrawObj.drawSectionHeight;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tconsole.log('error in findQuadrantOrder');\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\torder.push(test);\r\n\t\t\tquadrantArray.push(quadrant);\r\n\t\t}\r\n\t}\r\n\treturn quadrantArray;\r\n};\r\n\r\nexport {\r\n\tboxDraw,\r\n\tPixelNode,\r\n\tInputNode,\r\n\tcreatePixelMap,\r\n\tcombineMatrixTopHalf,\r\n\tcombineMatrixLeftHalf,\r\n\tfindQuadrantOrder,\r\n};\r\n","import { PixelNode } from '../boxDrawingUtilities.js';\r\n\r\nconst clone = (boxDrawObj, xOffset = 0, yOffset = 0) => {\r\n\tconst usingMatrix = boxDrawObj.matrix;\r\n\tlet xPos = xOffset;\r\n\tlet yPos = yOffset;\r\n\tlet tempMatrix = [];\r\n\r\n\tfor (let matrixRow = 0; matrixRow < usingMatrix.length; matrixRow++) {\r\n\t\tlet rowArr = [];\r\n\t\tfor (\r\n\t\t\tlet matrixColumn = 0;\r\n\t\t\tmatrixColumn < usingMatrix[matrixRow].length;\r\n\t\t\tmatrixColumn++\r\n\t\t) {\r\n\t\t\tconst pixel = usingMatrix[matrixRow][matrixColumn];\r\n\t\t\tconst newPixel = new PixelNode(xPos, yPos, pixel.color);\r\n\r\n\t\t\trowArr.push(newPixel);\r\n\t\t\txPos += boxDrawObj.pixelWidth;\r\n\t\t}\r\n\t\ttempMatrix.push(rowArr);\r\n\t\txPos = xOffset;\r\n\t\tyPos += boxDrawObj.pixelHeight;\r\n\t}\r\n\tyPos = yOffset;\r\n\r\n\treturn tempMatrix;\r\n};\r\n\r\nexport default clone;\r\n","import { boxDraw, InputNode } from '../boxDrawingUtilities.js';\r\nimport clone from '../singles/clone.js';\r\n\r\nconst fullClone = (boxDrawObj) => {\r\n\tlet cloneMatrix1 = [];\r\n\tlet cloneMatrix2 = [];\r\n\tlet cloneMatrix3 = [];\r\n\r\n\tlet inputNode = new InputNode(\r\n\t\tboxDrawObj.ctx,\r\n\t\tboxDrawObj.ctx2,\r\n\t\tboxDrawObj.matrix,\r\n\t\tboxDrawObj.pixelWidth,\r\n\t\tboxDrawObj.pixelHeight\r\n\t);\r\n\r\n\tboxDraw(boxDrawObj);\r\n\r\n\tcloneMatrix1 = clone(boxDrawObj, boxDrawObj.drawSectionWidth, 0);\r\n\r\n\tinputNode.matrix = cloneMatrix1;\r\n\r\n\tboxDraw(inputNode);\r\n\r\n\tcloneMatrix2 = clone(\r\n\t\tboxDrawObj,\r\n\t\tboxDrawObj.drawSectionWidth,\r\n\t\tboxDrawObj.drawSectionHeight\r\n\t);\r\n\r\n\tinputNode.matrix = cloneMatrix2;\r\n\r\n\tboxDraw(inputNode);\r\n\r\n\tcloneMatrix3 = clone(boxDrawObj, 0, boxDrawObj.drawSectionHeight);\r\n\r\n\tinputNode.matrix = cloneMatrix3;\r\n\r\n\tboxDraw(inputNode);\r\n};\r\n\r\nexport default fullClone;\r\n","import { PixelNode } from '../boxDrawingUtilities.js';\r\n\r\nconst rotateClockwise = (boxDrawObj, xOffset = 0, yOffset = 0) => {\r\n\tconst useMatrix = boxDrawObj.matrix;\r\n\tlet xPos = xOffset;\r\n\tlet yPos = yOffset;\r\n\tlet tempMatrix = [];\r\n\tlet rotatedMatrix = [];\r\n\r\n\tfor (let column = 0; column < useMatrix[0].length; column++) {\r\n\t\tlet rowArr = [];\r\n\r\n\t\tfor (let row = useMatrix.length - 1; row >= 0; row--) {\r\n\t\t\tconst pixel = useMatrix[row][column];\r\n\t\t\tconst newPixel = new PixelNode(xPos, yPos, pixel.color);\r\n\r\n\t\t\trowArr.push(newPixel);\r\n\t\t\txPos += boxDrawObj.pixelWidth;\r\n\t\t}\r\n\t\ttempMatrix.push(rowArr);\r\n\t\txPos = xOffset;\r\n\t\tyPos += boxDrawObj.pixelHeight;\r\n\t}\r\n\tyPos = yOffset;\r\n\trotatedMatrix = [...tempMatrix];\r\n\r\n\treturn rotatedMatrix;\r\n};\r\n\r\nconst rotateCounterClockwise = (boxDrawObj, xOffset = 0, yOffset = 0) => {\r\n\tconst useMatrix = boxDrawObj.matrix;\r\n\t//loop columns reverse\r\n\t//loop over rows in order\r\n\tlet xPos = xOffset;\r\n\tlet yPos = yOffset;\r\n\tlet tempMatrix = [];\r\n\tlet rotatedMatrix = [];\r\n\r\n\tfor (let column = useMatrix[0].length - 1; column >= 0; column--) {\r\n\t\tlet rowArr = [];\r\n\r\n\t\tfor (let row = 0; row < useMatrix.length; row++) {\r\n\t\t\tconst pixel = useMatrix[row][column];\r\n\t\t\tconst newPixel = new PixelNode(xPos, yPos, pixel.color);\r\n\r\n\t\t\trowArr.push(newPixel);\r\n\t\t\txPos += boxDrawObj.pixelWidth;\r\n\t\t}\r\n\t\ttempMatrix.push(rowArr);\r\n\t\txPos = xOffset;\r\n\t\tyPos += boxDrawObj.pixelHeight;\r\n\t}\r\n\tyPos = yOffset;\r\n\trotatedMatrix = [...tempMatrix];\r\n\r\n\treturn rotatedMatrix;\r\n};\r\n\r\nexport { rotateClockwise, rotateCounterClockwise };\r\n","import { rotateClockwise } from '../singles/rotate.js';\r\nimport { boxDraw, InputNode } from '../boxDrawingUtilities.js';\r\n\r\nconst fullRotate = (boxDrawObj) => {\r\n\tlet rotatedMatrix1 = [];\r\n\tlet rotatedMatrix2 = [];\r\n\tlet rotatedMatrix3 = [];\r\n\r\n\tboxDraw(boxDrawObj);\r\n\r\n\tlet inputNode = new InputNode(\r\n\t\tboxDrawObj.ctx,\r\n\t\tboxDrawObj.ctx2,\r\n\t\tboxDrawObj.matrix,\r\n\t\tboxDrawObj.pixelWidth,\r\n\t\tboxDrawObj.pixelHeight\r\n\t);\r\n\r\n\trotatedMatrix1 = rotateClockwise(boxDrawObj);\r\n\r\n\tinputNode.matrix = rotatedMatrix1;\r\n\r\n\tboxDraw(inputNode, boxDrawObj.drawSectionWidth, 0);\r\n\r\n\trotatedMatrix2 = rotateClockwise(inputNode);\r\n\r\n\tinputNode.matrix = rotatedMatrix2;\r\n\r\n\tboxDraw(\r\n\t\tinputNode,\r\n\t\tboxDrawObj.drawSectionWidth,\r\n\t\tboxDrawObj.drawSectionHeight\r\n\t);\r\n\r\n\trotatedMatrix3 = rotateClockwise(inputNode);\r\n\r\n\tinputNode.matrix = rotatedMatrix3;\r\n\r\n\tboxDraw(inputNode, 0, boxDrawObj.drawSectionHeight);\r\n};\r\n\r\nexport default fullRotate;\r\n","import { PixelNode } from '../boxDrawingUtilities.js';\r\n\r\nconst reflectVerticalAxis = (boxDrawObj, xOffset = 0, yOffset = 0) => {\r\n\tconst useMatrix = boxDrawObj.matrix;\r\n\tlet xPos = xOffset;\r\n\tlet yPos = yOffset;\r\n\tlet tempMatrix = [];\r\n\tfor (let row = 0; row < useMatrix.length; row++) {\r\n\t\tlet rowArr = [];\r\n\t\tfor (let column = useMatrix[row].length - 1; column >= 0; column--) {\r\n\t\t\tconst pixel = useMatrix[row][column];\r\n\t\t\tconst newPixel = new PixelNode(xPos, yPos, pixel.color);\r\n\r\n\t\t\trowArr.push(newPixel);\r\n\t\t\txPos += boxDrawObj.pixelWidth;\r\n\t\t}\r\n\t\ttempMatrix.push(rowArr);\r\n\t\txPos = xOffset;\r\n\t\tyPos += boxDrawObj.pixelHeight;\r\n\t}\r\n\tyPos = yOffset;\r\n\r\n\treturn tempMatrix;\r\n};\r\n\r\nconst reflectHorizontalAxis = (boxDrawObj, xOffset = 0, yOffset = 0) => {\r\n\tconst useMatrix = boxDrawObj.matrix;\r\n\tlet xPos = xOffset;\r\n\tlet yPos = yOffset;\r\n\tlet tempMatrix = [];\r\n\tfor (let row = useMatrix.length - 1; row >= 0; row--) {\r\n\t\tlet rowArr = [];\r\n\t\tfor (let column = 0; column < useMatrix[row].length; column++) {\r\n\t\t\tconst pixel = useMatrix[row][column];\r\n\t\t\tconst newPixel = new PixelNode(xPos, yPos, pixel.color);\r\n\r\n\t\t\trowArr.push(newPixel);\r\n\t\t\txPos += boxDrawObj.pixelWidth;\r\n\t\t}\r\n\t\ttempMatrix.push(rowArr);\r\n\t\txPos = xOffset;\r\n\t\tyPos += boxDrawObj.pixelHeight;\r\n\t}\r\n\tyPos = yOffset;\r\n\r\n\treturn tempMatrix;\r\n};\r\n\r\nexport { reflectVerticalAxis, reflectHorizontalAxis };\r\n","import {\r\n\treflectVerticalAxis,\r\n\treflectHorizontalAxis,\r\n} from '../singles/reflect.js';\r\nimport {\r\n\tboxDraw,\r\n\tInputNode,\r\n\tcombineMatrixTopHalf,\r\n} from '../boxDrawingUtilities.js';\r\n\r\nconst fullReflect = (boxDrawObj) => {\r\n\tlet adjustedMatrix = [];\r\n\tlet combinedMatrix = [];\r\n\tlet reflectedMatrix = [];\r\n\r\n\tlet inputNode = new InputNode(\r\n\t\tboxDrawObj.ctx,\r\n\t\tboxDrawObj.ctx2,\r\n\t\tboxDrawObj.matrix,\r\n\t\tboxDrawObj.pixelWidth,\r\n\t\tboxDrawObj.pixelHeight\r\n\t);\r\n\r\n\tboxDraw(inputNode);\r\n\r\n\tadjustedMatrix = reflectVerticalAxis(\r\n\t\tboxDrawObj,\r\n\t\tboxDrawObj.drawSectionWidth,\r\n\t\t0\r\n\t);\r\n\r\n\tinputNode.matrix = adjustedMatrix;\r\n\r\n\tboxDraw(inputNode);\r\n\r\n\tcombinedMatrix = combineMatrixTopHalf(boxDrawObj.matrix, adjustedMatrix);\r\n\r\n\tinputNode.matrix = combinedMatrix;\r\n\r\n\treflectedMatrix = reflectHorizontalAxis(\r\n\t\tinputNode,\r\n\t\t0,\r\n\t\tboxDrawObj.drawSectionHeight\r\n\t);\r\n\r\n\tinputNode.matrix = reflectedMatrix;\r\n\r\n\tboxDraw(inputNode);\r\n};\r\n\r\nexport default fullReflect;\r\n","import { roll } from '../../utilities.js';\r\nimport {\r\n\tboxDraw,\r\n\tInputNode,\r\n\tcombineMatrixLeftHalf,\r\n\tcombineMatrixTopHalf,\r\n} from '../boxDrawingUtilities.js';\r\nimport clone from '../singles/clone.js';\r\nimport {\r\n\treflectVerticalAxis,\r\n\treflectHorizontalAxis,\r\n} from '../singles/reflect.js';\r\n\r\nconst halfReflect = (boxDrawObj) => {\r\n\tboxDraw(boxDrawObj);\r\n\tlet clonedMatrix = [];\r\n\tlet combinedMatrix = [];\r\n\tlet reflectedMatrix = [];\r\n\r\n\tlet inputNode = new InputNode(\r\n\t\tboxDrawObj.ctx,\r\n\t\tboxDrawObj.ctx2,\r\n\t\tboxDrawObj.matrix,\r\n\t\tboxDrawObj.pixelWidth,\r\n\t\tboxDrawObj.pixelHeight\r\n\t);\r\n\r\n\tconst quadrantDice = roll(2);\r\n\tswitch (quadrantDice) {\r\n\t\tcase 1:\r\n\t\t\t//horizontal reflect\r\n\t\t\tclonedMatrix = clone(boxDrawObj, boxDrawObj.drawSectionWidth, 0);\r\n\r\n\t\t\tinputNode.matrix = clonedMatrix;\r\n\r\n\t\t\tboxDraw(inputNode);\r\n\r\n\t\t\tcombinedMatrix = combineMatrixTopHalf(\r\n\t\t\t\tboxDrawObj.matrix,\r\n\t\t\t\tclonedMatrix\r\n\t\t\t);\r\n\r\n\t\t\tinputNode.matrix = combinedMatrix;\r\n\r\n\t\t\treflectedMatrix = reflectHorizontalAxis(\r\n\t\t\t\tinputNode,\r\n\t\t\t\t0,\r\n\t\t\t\tboxDrawObj.drawSectionHeight\r\n\t\t\t);\r\n\r\n\t\t\tinputNode.matrix = reflectedMatrix;\r\n\r\n\t\t\tboxDraw(inputNode);\r\n\r\n\t\t\tbreak;\r\n\t\tcase 2:\r\n\t\t\t//vertical reflect\r\n\t\t\tclonedMatrix = clone(boxDrawObj, 0, boxDrawObj.drawSectionHeight);\r\n\r\n\t\t\tinputNode.matrix = clonedMatrix;\r\n\r\n\t\t\tboxDraw(inputNode);\r\n\r\n\t\t\tcombinedMatrix = combineMatrixLeftHalf(\r\n\t\t\t\tboxDrawObj.matrix,\r\n\t\t\t\tclonedMatrix\r\n\t\t\t);\r\n\r\n\t\t\tinputNode.matrix = combinedMatrix;\r\n\r\n\t\t\treflectedMatrix = reflectVerticalAxis(\r\n\t\t\t\tinputNode,\r\n\t\t\t\tboxDrawObj.drawSectionWidth,\r\n\t\t\t\t0\r\n\t\t\t);\r\n\r\n\t\t\tinputNode.matrix = reflectedMatrix;\r\n\r\n\t\t\tboxDraw(inputNode);\r\n\t\t\tbreak;\r\n\t\tdefault:\r\n\t\t\tconsole.log('error in halfReflect switch');\r\n\t\t\tbreak;\r\n\t}\r\n};\r\n\r\nexport default halfReflect;\r\n","import { boxDraw, InputNode, createPixelMap } from '../boxDrawingUtilities.js';\r\n\r\nconst noPattern = (boxDrawObj) => {\r\n\tlet inputNode = new InputNode(\r\n\t\tboxDrawObj.ctx,\r\n\t\tboxDrawObj.ctx2,\r\n\t\tboxDrawObj.matrix,\r\n\t\tboxDrawObj.pixelWidth,\r\n\t\tboxDrawObj.pixelHeight\r\n\t);\r\n\r\n\tlet getMatrix = createPixelMap(boxDrawObj, 'noPattern');\r\n\tinputNode.matrix = getMatrix;\r\n\r\n\tboxDraw(inputNode);\r\n};\r\n\r\nexport default noPattern;\r\n","import { roll } from '../../utilities.js';\r\nimport fullClone from './fullClone.js';\r\nimport fullRotate from './fullRotate.js';\r\nimport fullReflect from './fullReflect.js';\r\nimport halfReflect from './halfReflect.js';\r\nimport noPattern from './noPattern.js';\r\n\r\nconst specials = (boxDrawObj) => {\r\n\tif (!boxDrawObj.drawStyle || boxDrawObj.drawStyle === 'random') {\r\n\t\tconst dice = roll(5);\r\n\t\tswitch (dice) {\r\n\t\t\tcase 1:\r\n\t\t\t\tfullClone(boxDrawObj);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 2:\r\n\t\t\t\tfullRotate(boxDrawObj);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 3:\r\n\t\t\t\tfullReflect(boxDrawObj);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 4:\r\n\t\t\t\thalfReflect(boxDrawObj);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 5:\r\n\t\t\t\tnoPattern(boxDrawObj);\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tconsole.log('error in layout variable');\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t} else {\r\n\t\tswitch (boxDrawObj.drawStyle) {\r\n\t\t\tcase 'fullClone':\r\n\t\t\t\tfullClone(boxDrawObj);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'fullReflect':\r\n\t\t\t\tfullReflect(boxDrawObj);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'fullRotate':\r\n\t\t\t\tfullRotate(boxDrawObj);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'halfReflect':\r\n\t\t\t\thalfReflect(boxDrawObj);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'noPattern':\r\n\t\t\t\tnoPattern(boxDrawObj);\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tconsole.log('error in forcedraw of specials');\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n};\r\n\r\nexport default specials;\r\n","import { roll } from '../../utilities.js';\r\nimport {\r\n\tfindQuadrantOrder,\r\n\tboxDraw,\r\n\tInputNode,\r\n} from '../boxDrawingUtilities.js';\r\nimport clone from './clone.js';\r\nimport { reflectVerticalAxis, reflectHorizontalAxis } from './reflect.js';\r\nimport { rotateClockwise, rotateCounterClockwise } from './rotate.js';\r\n\r\nconst singles = (boxDrawObj) => {\r\n\tconst quadrantDice = findQuadrantOrder(boxDrawObj);\r\n\tconst styleDice = [1, roll(3), roll(3), roll(3)];\r\n\r\n\tstyleDice.forEach((number, index) => {\r\n\t\tconst xPos = quadrantDice[index].x;\r\n\t\tconst yPos = quadrantDice[index].y;\r\n\t\tlet adjustedMatrix = [];\r\n\r\n\t\tlet inputNode = new InputNode(\r\n\t\t\tboxDrawObj.ctx,\r\n\t\t\tboxDrawObj.ctx2,\r\n\t\t\tboxDrawObj.matrix,\r\n\t\t\tboxDrawObj.pixelWidth,\r\n\t\t\tboxDrawObj.pixelHeight\r\n\t\t);\r\n\r\n\t\tswitch (number) {\r\n\t\t\tcase 1:\r\n\t\t\t\t//clone\r\n\t\t\t\tadjustedMatrix = clone(boxDrawObj, xPos, yPos);\r\n\r\n\t\t\t\tinputNode.matrix = adjustedMatrix;\r\n\r\n\t\t\t\tboxDraw(inputNode);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 2:\r\n\t\t\t\t//reflect\r\n\t\t\t\tconst directionDiceReflect = roll(2); // 1 = vertical axis reflect. 2 = horizontal axis reflect\r\n\r\n\t\t\t\tdirectionDiceReflect === 1\r\n\t\t\t\t\t? (adjustedMatrix = reflectVerticalAxis(\r\n\t\t\t\t\t\t\tboxDrawObj,\r\n\t\t\t\t\t\t\txPos,\r\n\t\t\t\t\t\t\tyPos\r\n\t\t\t\t\t  ))\r\n\t\t\t\t\t: (adjustedMatrix = reflectHorizontalAxis(\r\n\t\t\t\t\t\t\tboxDrawObj,\r\n\t\t\t\t\t\t\txPos,\r\n\t\t\t\t\t\t\tyPos\r\n\t\t\t\t\t  ));\r\n\r\n\t\t\t\tinputNode.matrix = adjustedMatrix;\r\n\r\n\t\t\t\tboxDraw(inputNode);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 3:\r\n\t\t\t\t//rotate\r\n\t\t\t\tconst directionDiceRotate = roll(2); // 1 = clockwise rotate. 2 = counter clockwise rotate\r\n\r\n\t\t\t\tdirectionDiceRotate === 1\r\n\t\t\t\t\t? (adjustedMatrix = rotateClockwise(boxDrawObj, xPos, yPos))\r\n\t\t\t\t\t: (adjustedMatrix = rotateCounterClockwise(\r\n\t\t\t\t\t\t\tboxDrawObj,\r\n\t\t\t\t\t\t\txPos,\r\n\t\t\t\t\t\t\tyPos\r\n\t\t\t\t\t  ));\r\n\r\n\t\t\t\tinputNode.matrix = adjustedMatrix;\r\n\r\n\t\t\t\tboxDraw(inputNode);\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tconsole.log('error in number variable');\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t});\r\n};\r\n\r\nexport default singles;\r\n","import { roll } from '../../utilities.js';\r\nimport { InputNode } from '../boxDrawingUtilities.js';\r\nimport {\r\n\tboxDraw,\r\n\tcombineMatrixTopHalf,\r\n\tcombineMatrixLeftHalf,\r\n} from '../boxDrawingUtilities.js';\r\nimport clone from '../singles/clone.js';\r\nimport {\r\n\treflectHorizontalAxis,\r\n\treflectVerticalAxis,\r\n} from '../singles/reflect.js';\r\nimport { rotateClockwise, rotateCounterClockwise } from '../singles/rotate.js';\r\n\r\nconst doubles = (boxDrawObj) => {\r\n\tboxDraw(boxDrawObj);\r\n\tconst quadrantDice = roll(2); // 1 = q2. 2 = q3\r\n\tconst styleDice = roll(3); // 1= clone, 2= rotate, 3= reflect\r\n\tconst doubleDice = roll(3); // 1= clone, 2= rotate x2, 3= reflect\r\n\tlet directionDice = 0;\r\n\tlet adjustedMatrix = [];\r\n\r\n\tconst quadrant =\r\n\t\tquadrantDice === 1\r\n\t\t\t? { x: boxDrawObj.drawSectionWidth, y: 0 }\r\n\t\t\t: { x: 0, y: boxDrawObj.drawSectionHeight };\r\n\tconst quadrantDouble =\r\n\t\tquadrantDice === 1\r\n\t\t\t? { x: 0, y: boxDrawObj.drawSectionHeight }\r\n\t\t\t: { x: boxDrawObj.drawSectionWidth, y: 0 };\r\n\r\n\tlet inputNode = new InputNode(\r\n\t\tboxDrawObj.ctx,\r\n\t\tboxDrawObj.ctx2,\r\n\t\tboxDrawObj.matrix,\r\n\t\tboxDrawObj.pixelWidth,\r\n\t\tboxDrawObj.pixelHeight\r\n\t);\r\n\r\n\tswitch (styleDice) {\r\n\t\tcase 1:\r\n\t\t\t//clone\r\n\t\t\tadjustedMatrix = clone(boxDrawObj, quadrant.x, quadrant.y);\r\n\r\n\t\t\tinputNode.matrix = adjustedMatrix;\r\n\r\n\t\t\tboxDraw(inputNode);\r\n\t\t\tbreak;\r\n\t\tcase 2:\r\n\t\t\t//rotate\r\n\t\t\tdirectionDice = roll(2); // 1 = clockwise. 2 = counter clockwise\r\n\t\t\tdirectionDice === 1\r\n\t\t\t\t? (adjustedMatrix = rotateClockwise(\r\n\t\t\t\t\t\tinputNode,\r\n\t\t\t\t\t\tquadrant.x,\r\n\t\t\t\t\t\tquadrant.y\r\n\t\t\t\t  ))\r\n\t\t\t\t: (adjustedMatrix = rotateCounterClockwise(\r\n\t\t\t\t\t\tinputNode,\r\n\t\t\t\t\t\tquadrant.x,\r\n\t\t\t\t\t\tquadrant.y\r\n\t\t\t\t  ));\r\n\r\n\t\t\tinputNode.matrix = adjustedMatrix;\r\n\r\n\t\t\tboxDraw(inputNode);\r\n\t\t\tbreak;\r\n\t\tcase 3:\r\n\t\t\t//reflect\r\n\r\n\t\t\tdirectionDice = roll(2); // 1 = vertical axis reflect. 2 = horizontal axis reflect\r\n\t\t\tdirectionDice === 1\r\n\t\t\t\t? (adjustedMatrix = reflectVerticalAxis(\r\n\t\t\t\t\t\tinputNode,\r\n\t\t\t\t\t\tquadrant.x,\r\n\t\t\t\t\t\tquadrant.y\r\n\t\t\t\t  ))\r\n\t\t\t\t: (adjustedMatrix = reflectHorizontalAxis(\r\n\t\t\t\t\t\tinputNode,\r\n\t\t\t\t\t\tquadrant.x,\r\n\t\t\t\t\t\tquadrant.y\r\n\t\t\t\t  ));\r\n\r\n\t\t\tinputNode.matrix = adjustedMatrix;\r\n\r\n\t\t\tboxDraw(inputNode);\r\n\t\t\tbreak;\r\n\t\tdefault:\r\n\t\t\tconsole.log('error in style dice variable');\r\n\t\t\tbreak;\r\n\t}\r\n\r\n\tlet combinedMatrix = [];\r\n\tquadrantDice === 1\r\n\t\t? (combinedMatrix = combineMatrixTopHalf(\r\n\t\t\t\tboxDrawObj.matrix,\r\n\t\t\t\tadjustedMatrix\r\n\t\t  ))\r\n\t\t: (combinedMatrix = combineMatrixLeftHalf(\r\n\t\t\t\tboxDrawObj.matrix,\r\n\t\t\t\tadjustedMatrix\r\n\t\t  ));\r\n\tlet rotatedMatrix = [];\r\n\tlet reflectedMatrix = [];\r\n\r\n\tinputNode.matrix = combinedMatrix;\r\n\r\n\tswitch (doubleDice) {\r\n\t\tcase 1:\r\n\t\t\t//clone\r\n\r\n\t\t\tboxDraw(inputNode, quadrantDouble.x, quadrantDouble.y);\r\n\t\t\tbreak;\r\n\t\tcase 2: //quadrantDice === 1, combine top\r\n\t\t\t//rotate\r\n\r\n\t\t\trotatedMatrix = rotateClockwise(inputNode);\r\n\t\t\tinputNode.matrix = rotatedMatrix;\r\n\t\t\trotatedMatrix = rotateClockwise(\r\n\t\t\t\tinputNode,\r\n\t\t\t\tquadrantDouble.x,\r\n\t\t\t\tquadrantDouble.y\r\n\t\t\t); // rotate twice\r\n\r\n\t\t\tinputNode.matrix = rotatedMatrix;\r\n\r\n\t\t\tboxDraw(inputNode);\r\n\t\t\tbreak;\r\n\t\tcase 3: // quadrantDice === 1, reflect horizontal : reflect vertical\r\n\t\t\t//reflect\r\n\t\t\treflectedMatrix =\r\n\t\t\t\tquadrantDice === 1\r\n\t\t\t\t\t? reflectHorizontalAxis(\r\n\t\t\t\t\t\t\tinputNode,\r\n\t\t\t\t\t\t\tquadrantDouble.x,\r\n\t\t\t\t\t\t\tquadrantDouble.y\r\n\t\t\t\t\t  )\r\n\t\t\t\t\t: reflectVerticalAxis(\r\n\t\t\t\t\t\t\tinputNode,\r\n\t\t\t\t\t\t\tquadrantDouble.x,\r\n\t\t\t\t\t\t\tquadrantDouble.y\r\n\t\t\t\t\t  );\r\n\r\n\t\t\tinputNode.matrix = reflectedMatrix;\r\n\r\n\t\t\tboxDraw(inputNode);\r\n\r\n\t\t\tbreak;\r\n\r\n\t\tdefault:\r\n\t\t\tconsole.log('error in style dice variable');\r\n\t\t\tbreak;\r\n\t}\r\n};\r\n\r\nexport default doubles;\r\n","import specials from './specials/specials.js';\r\nimport singles from './singles/singles.js';\r\nimport doubles from './doubles/doubles.js';\r\nimport { roll, clear, randomColor } from '../utilities.js';\r\nimport { boxDraw, createPixelMap } from './boxDrawingUtilities.js';\r\n\r\nimport { createCanvasTemplate, createCanvasDraw } from '../utilities.js';\r\n\r\nconst BoxDrawing = (forceDesignObj) => {\r\n\t// if(forceDesignObj)\r\n\tlet { dimensions, boxDrawObj } = forceDesignObj;\r\n\tlet width, height;\r\n\tif (dimensions) {\r\n\t\twidth = dimensions.width;\r\n\t\theight = dimensions.height;\r\n\t}\r\n\r\n\tconst canvasWidth = width ? width : 500;\r\n\tconst canvasHeight = height ? height : 500;\r\n\tconst matrix = [];\r\n\tconst boxCount = boxDrawObj.boxCount || 10;\r\n\tconst pixelWidth = canvasWidth / boxCount || 250;\r\n\tconst pixelHeight = canvasHeight / boxCount || 250;\r\n\tconst drawSectionWidth = Math.floor(canvasWidth / 2);\r\n\tconst drawSectionHeight = Math.floor(canvasHeight / 2);\r\n\r\n\tconst primaryToggle = boxDrawObj.primaryToggle || 'default';\r\n\tconst secondaryToggle = boxDrawObj.secondaryToggle || 'default';\r\n\tconst backgroundToggle = boxDrawObj.backgroundToggle || 'default';\r\n\r\n\tconst [canvasTemplate, ctx] = createCanvasTemplate(\r\n\t\tdrawSectionWidth,\r\n\t\tdrawSectionHeight\r\n\t);\r\n\tconst [canvasDraw, ctx2] = createCanvasDraw(canvasWidth, canvasHeight);\r\n\r\n\tswitch (primaryToggle) {\r\n\t\tcase 'default':\r\n\t\t\tboxDrawObj.primaryColor = '#000000';\r\n\t\t\tbreak;\r\n\t\tcase 'random':\r\n\t\t\tboxDrawObj.primaryColor = randomColor();\r\n\t\t\tbreak;\r\n\t\tcase 'choose':\r\n\t\t\tlet inputColor;\r\n\t\t\tif (!boxDrawObj.primaryColor) {\r\n\t\t\t\tinputColor = '#000000';\r\n\t\t\t} else {\r\n\t\t\t\tinputColor = boxDrawObj.primaryColor;\r\n\t\t\t}\r\n\t\t\tboxDrawObj.primaryColor = inputColor;\r\n\t\t\tbreak;\r\n\t\tdefault:\r\n\t\t\tconsole.log('error in primarytoggle');\r\n\t\t\tboxDrawObj.primaryColor = '#000000';\r\n\t\t\tbreak;\r\n\t}\r\n\r\n\tswitch (secondaryToggle) {\r\n\t\tcase 'default':\r\n\t\tcase 'random':\r\n\t\t\tboxDrawObj.secondaryColor = randomColor(); //new color seed on refresh;\r\n\t\t\tbreak;\r\n\t\tcase 'choose':\r\n\t\t\tlet inputColor;\r\n\t\t\tif (!boxDrawObj.secondaryColor) {\r\n\t\t\t\tinputColor = '#8C00FF';\r\n\t\t\t} else {\r\n\t\t\t\tinputColor = boxDrawObj.secondaryColor;\r\n\t\t\t}\r\n\t\t\tboxDrawObj.secondaryColor = inputColor;\r\n\t\t\tbreak;\r\n\t\tdefault:\r\n\t\t\tconsole.log('error in secondaryToggle');\r\n\t\t\tboxDrawObj.secondaryColor = randomColor();\r\n\t\t\tbreak;\r\n\t}\r\n\r\n\tswitch (backgroundToggle) {\r\n\t\tcase 'default':\r\n\t\t\tboxDrawObj.backgroundColor = '#ffffff00';\r\n\t\t\tbreak;\r\n\t\tcase 'random':\r\n\t\t\tboxDrawObj.backgroundColor = randomColor();\r\n\t\t\tbreak;\r\n\t\tcase 'choose':\r\n\t\t\tlet inputColor;\r\n\t\t\tif (!boxDrawObj.backgroundColor) {\r\n\t\t\t\tinputColor = '#ffffff00';\r\n\t\t\t} else {\r\n\t\t\t\tinputColor = boxDrawObj.backgroundColor;\r\n\t\t\t}\r\n\t\t\tboxDrawObj.backgroundColor = inputColor;\r\n\t\t\tbreak;\r\n\t\tdefault:\r\n\t\t\tconsole.log('error in backgroundToggle');\r\n\t\t\tboxDrawObj.backgroundColor = '#ffffff00';\r\n\t\t\tbreak;\r\n\t}\r\n\t//build up input obj\r\n\tboxDrawObj = {\r\n\t\t...boxDrawObj,\r\n\t\tcanvasWidth,\r\n\t\tcanvasHeight,\r\n\t\tmatrix,\r\n\t\tboxCount,\r\n\t\tpixelWidth,\r\n\t\tpixelHeight,\r\n\t\tdrawSectionWidth,\r\n\t\tdrawSectionHeight,\r\n\t\tcanvasTemplate,\r\n\t\tctx,\r\n\t\tcanvasDraw,\r\n\t\tctx2,\r\n\t};\r\n\r\n\tif (boxDrawObj.canvasDraw.getContext) {\r\n\t\t//clear previous matrix\r\n\t\tboxDrawObj.matrix = clear(boxDrawObj);\r\n\t\t//create new matrix\r\n\t\tboxDrawObj.matrix = [...createPixelMap(boxDrawObj)];\r\n\r\n\t\tboxDraw(boxDrawObj); // draw on ctx not ctx2\r\n\r\n\t\tswitch (boxDrawObj.drawStyle || 'random') {\r\n\t\t\tcase 'random':\r\n\t\t\t\tlet dice = roll(3);\r\n\t\t\t\tswitch (dice) {\r\n\t\t\t\t\tcase 1:\r\n\t\t\t\t\t\tspecials(boxDrawObj);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 2:\r\n\t\t\t\t\t\tsingles(boxDrawObj);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 3:\r\n\t\t\t\t\t\tdoubles(boxDrawObj);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\tconsole.log('error in layout variable no dice');\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tspecials(boxDrawObj);\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t} else {\r\n\t\talert('You need Safari or Firefox 1.5+ to see this demo.');\r\n\t}\r\n\t//convert canvas to an image\r\n\t//return image\r\n\t// return ctx2;\r\n\r\n\tconst dataURL = boxDrawObj.canvasDraw.toDataURL('image/png');\r\n\treturn dataURL;\r\n};\r\n\r\nexport { BoxDrawing };\r\n","import { roll } from '../../utilities.js';\r\nconst getStrokeWidth = (shapeCount) => {\r\n    let dice;\r\n    switch (shapeCount) {\r\n        case shapeCount > 100:\r\n            dice = 1;\r\n            break;\r\n        case shapeCount > 90:\r\n            dice = roll(2);\r\n            break;\r\n        case shapeCount > 60:\r\n            dice = roll(3);\r\n            break;\r\n        case shapeCount > 40:\r\n            dice = roll(4);\r\n            break;\r\n        default:\r\n            dice = roll(5);\r\n            break;\r\n    }\r\n    return dice;\r\n};\r\n\r\nexport default getStrokeWidth;\r\n","import { randomColor, lightColor, darkColor } from '../../utilities.js';\r\n\r\nconst getColorType = (inputs) => {\r\n    if (inputs.clearSwitch) {\r\n        return randomColor();\r\n    }\r\n\r\n    if (inputs.blendMode === 'screen') {\r\n        return darkColor(inputs.shapeCount);\r\n    } else if (inputs.blendMode === 'multiply') {\r\n        return lightColor(inputs.shapeCount);\r\n    } else {\r\n        return randomColor();\r\n    }\r\n    // return inputs;\r\n};\r\nexport default getColorType;\r\n","import { coinFlip } from '../../utilities.js';\r\nimport getStrokeWidth from './_getStrokeWidth.js';\r\nimport getColorType from './_getColorType.js';\r\n\r\nconst checkIndividualSwitches = (type, inputs) => {\r\n    if (!type) {\r\n        console.log('error in checkIndividual switch, no type');\r\n        return inputs;\r\n    }\r\n    if (type === 'clear') {\r\n        if (inputs.clearIndividual) {\r\n            inputs.clearSwitch = coinFlip();\r\n        }\r\n    }\r\n    if (type === 'fill') {\r\n        // if (inputs.fillIndividual) {\r\n        //     inputs.fillSwitch = coinFlip();\r\n        // }\r\n        if (inputs.fillSwitch) {\r\n            if (inputs.fillColorIndividual) {\r\n                inputs.fillColor = getColorType(inputs);\r\n            }\r\n        }\r\n    }\r\n    if (type === 'stroke') {\r\n        // if (inputs.strokeIndividual) {\r\n        //     inputs.strokeSwitch = coinFlip();\r\n        // }\r\n        if (inputs.strokeSwitch) {\r\n            if (inputs.strokeColorIndividual) {\r\n                inputs.strokeColor = getColorType(inputs);\r\n            }\r\n            if (inputs.strokeWidthIndividual) {\r\n                inputs.strokeWidth = getStrokeWidth(inputs.shapeCount);\r\n            }\r\n        }\r\n    }\r\n\r\n    return inputs;\r\n};\r\nexport default checkIndividualSwitches;\r\n","// import { ctx2 } from '../../MandalaDrawing.js';\r\n// import { roll } from '../../../utilities.js';\r\n\r\nconst starburst = (inputs) => {\r\n\t//starburst\r\n\tinputs.ctx2.save();\r\n\tinputs.ctx2.moveTo(inputs.pathRadius - inputs.shapeSize, 0);\r\n\tinputs.ctx2.lineTo(inputs.shapeSize, 0);\r\n\tinputs.ctx2.restore();\r\n\t//starburst\r\n};\r\nconst slant = (inputs) => {\r\n\t//slant\r\n\tinputs.ctx2.save();\r\n\tinputs.ctx2.moveTo(\r\n\t\tinputs.pathRadius - inputs.shapeSize,\r\n\t\tinputs.pathRadius - inputs.shapeSize\r\n\t);\r\n\tinputs.ctx2.lineTo(-inputs.shapeSize / 2, inputs.shapeSize / 2);\r\n\tinputs.ctx2.restore();\r\n\t// ctx2.stroke();\r\n\t//slant\r\n};\r\n\r\nexport { starburst, slant };\r\n","// import { ctx2 } from '../../mandalaDrawing.js';\r\nimport checkIndividualSwitches from '../_checkIndividualSwitches.js';\r\nimport { slant, starburst } from './drawLine.js';\r\n\r\nconst clearLoop = (inputs) => {\r\n\tconst shapeFunction = inputs.shapeArr[inputs.currentLoop - 1];\r\n\tif (shapeFunction === slant || shapeFunction === starburst) return;\r\n\r\n\tfor (let clearShape = 1; clearShape <= inputs.shapeCount; clearShape++) {\r\n\t\tinputs = checkIndividualSwitches('clear', inputs);\r\n\r\n\t\tinputs.ctx2.globalCompositeOperation = 'destination-out';\r\n\t\tinputs.ctx2.beginPath();\r\n\t\tshapeFunction(inputs);\r\n\t\tinputs.ctx2.fillStyle = inputs.color;\r\n\t\tinputs.ctx2.fill();\r\n\t\tinputs.ctx2.closePath();\r\n\t\tinputs.ctx2.globalCompositeOperation = 'source-over';\r\n\t\tinputs.ctx2.rotate((2 * Math.PI) / inputs.shapeCount);\r\n\t}\r\n};\r\n\r\nexport default clearLoop;\r\n","// import { ctx2 } from '../../mandalaDrawing.js';\r\nimport checkIndividualSwitches from '../_checkIndividualSwitches.js';\r\nimport { slant, starburst } from './drawLine.js';\r\n\r\nconst fillLoop = (inputs) => {\r\n\tconst shapeFunction = inputs.shapeArr[inputs.currentLoop - 1];\r\n\tif (shapeFunction === slant || shapeFunction === starburst) return;\r\n\tfor (let fillShape = 1; fillShape <= inputs.shapeCount; fillShape++) {\r\n\t\tinputs = checkIndividualSwitches('fill', inputs);\r\n\r\n\t\tinputs.ctx2.globalCompositeOperation = inputs.blendMode; // great for clear first\r\n\t\t// ctx2.globalCompositeOperation = 'multiply'; // great for clear first\r\n\t\t// ctx2.globalCompositeOperation = 'screen'; // also good option for both\r\n\t\t// ctx2.globalCompositeOperation = 'difference'; // cool chaos option both ways\r\n\t\t// ctx2.globalCompositeOperation = inputs.blendMode || 'source-over';\r\n\t\t// ctx2.globalCompositeOperation = 'source-over';\r\n\t\tinputs.ctx2.beginPath();\r\n\t\tshapeFunction(inputs);\r\n\t\tinputs.ctx2.fillStyle = inputs.fillColor;\r\n\t\tinputs.ctx2.fill();\r\n\t\tinputs.ctx2.closePath();\r\n\t\tinputs.ctx2.globalCompositeOperation = 'source-over';\r\n\t\tinputs.ctx2.rotate((2 * Math.PI) / inputs.shapeCount);\r\n\t}\r\n};\r\n\r\nexport default fillLoop;\r\n","// import { ctx2 } from '../../mandalaDrawing.js';\r\nimport checkIndividualSwitches from '../_checkIndividualSwitches.js';\r\n\r\nconst strokeLoop = (inputs) => {\r\n\tconst shapeFunction = inputs.shapeArr[inputs.currentLoop - 1];\r\n\r\n\tfor (let strokeShape = 1; strokeShape <= inputs.shapeCount; strokeShape++) {\r\n\t\tinputs = checkIndividualSwitches('stroke', inputs);\r\n\r\n\t\tinputs.ctx2.globalCompositeOperation = 'source-over';\r\n\t\tinputs.ctx2.beginPath();\r\n\t\tshapeFunction(inputs);\r\n\r\n\t\tinputs.ctx2.lineWidth = inputs.strokeWidth;\r\n\t\tinputs.ctx2.strokeStyle = inputs.strokeColor;\r\n\t\tinputs.ctx2.stroke();\r\n\t\tinputs.ctx2.closePath();\r\n\t\tinputs.ctx2.globalCompositeOperation = 'source-over';\r\n\t\tinputs.ctx2.rotate((2 * Math.PI) / inputs.shapeCount);\r\n\t}\r\n};\r\n// ctx2.beginPath();\r\n// drawCircle(shapeSize, pathRadius);\r\n// ctx2.lineWidth = 1;\r\n// ctx2.strokeStyle = randomColorValue;\r\n// ctx2.stroke();\r\n// ctx2.closePath();\r\n// ctx2.rotate((2 * Math.PI) / inputs.shapeCount);\r\n\r\nexport default strokeLoop;\r\n","import { roll, rollRange, randomColor, lightColor } from '../../utilities.js';\r\n\r\nimport checkIndividualSwitches from '../functionPool/_checkIndividualSwitches.js';\r\n\r\n// import { ctx2, halfWidth, halfHeight } from '../mandalaDrawing.js';\r\n\r\nimport clearLoop from '../functionPool/draw/clearLoop.js';\r\nimport fillLoop from '../functionPool/draw/fillLoop.js';\r\nimport strokeLoop from '../functionPool/draw/strokeLoop.js';\r\n\r\nconst loop = (inputs) => {\r\n\t//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ check clear fill stroke ~~~~~~~~~~~\r\n\r\n\tinputs.ctx2.save();\r\n\tinputs.ctx2.translate(inputs.halfWidth, inputs.halfHeight); // move to center\r\n\r\n\tinputs.clearSwitch && clearLoop(inputs);\r\n\r\n\tinputs.fillSwitch && fillLoop(inputs);\r\n\r\n\tinputs.strokeSwitch && strokeLoop(inputs);\r\n\r\n\tinputs.ctx2.restore();\r\n\t//******MOVE CENTER POINT BACK*********** */\r\n\t//******ENDING DRAW*********** */\r\n\t//******ENDING DRAW*********** */\r\n\t//******ENDING DRAW*********** */\r\n\t//******ENDING DRAW*********** */\r\n\treturn inputs;\r\n};\r\n\r\nexport default loop;\r\n","// import { ctx2, width, height } from '../../mandalaDrawing.js';\r\n\r\nconst clearDrawingArea = (inputs) => {\r\n\tinputs.ctx2.clearRect(0, 0, inputs.width, inputs.height);\r\n};\r\n\r\nexport default clearDrawingArea;\r\n","import { rollRange } from '../../utilities.js';\r\nimport getColorType from './_getColorType.js';\r\n\r\nconst getBackgroundStats = (inputs) => {\r\n    inputs.shapeCount = rollRange(inputs.minShapeCount, inputs.maxShapeCount);\r\n    inputs.pathRadius = rollRange(inputs.maxPathRadius, inputs.maxFullPath);\r\n    inputs.shapeSize = inputs.pathRadius;\r\n    // //****************INSIDE FIRST ROLL****************\r\n    // //****************INSIDE FIRST ROLL****************\r\n    // console.log(inputs);\r\n    // debugger;\r\n\r\n    if (inputs.customBackgroundSwitch) {\r\n        inputs.fillColor = inputs.customBackgroundColor;\r\n        inputs.strokeColor = inputs.customStrokeColor;\r\n    } else {\r\n        inputs.fillColor = getColorType(inputs);\r\n        inputs.strokeColor = getColorType(inputs);\r\n    }\r\n\r\n    inputs.fillSwitch = true;\r\n    inputs.backgroundLoopSwitch = false; // switch off\r\n    return inputs;\r\n};\r\nexport default getBackgroundStats;\r\n","import { lightColor, coinFlip, roll } from '../../utilities.js';\r\nimport getStrokeWidth from './_getStrokeWidth.js';\r\nimport getColorType from './_getColorType.js';\r\n\r\nconst checkLoopSwitches = (inputs) => {\r\n    //clear\r\n    if (inputs.clearRandomLoops) {\r\n        inputs.clearSwitch = coinFlip();\r\n    }\r\n    //clear\r\n    //fill\r\n    if (inputs.FillRandomLoops) {\r\n        inputs.fillSwitch = coinFlip();\r\n    }\r\n    if (inputs.fillSwitch) {\r\n        if (inputs.fillColorRandomLoops) {\r\n            inputs.fillColor = getColorType(inputs);\r\n        }\r\n    }\r\n    //fill\r\n    //stroke\r\n    if (inputs.strokeRandomLoops) {\r\n        inputs.strokeSwitch = coinFlip();\r\n    }\r\n    if (inputs.strokeSwitch) {\r\n        if (inputs.strokeColorRandomLoops) {\r\n            inputs.strokeColor = getColorType(inputs);\r\n            //chance for randomIndividual color to be a single loop choice\r\n            inputs.strokeColorIndividual = roll(10) === 1 ? true : false;\r\n        }\r\n        if (inputs.strokeWidthRandomLoops) {\r\n            inputs.strokeWidth = getStrokeWidth(inputs.shapeCount);\r\n            //chance for randomIndividual width to be a single loop choice\r\n            inputs.strokeWidthIndividual = roll(10) === 1 ? true : false;\r\n        }\r\n    }\r\n    //stroke\r\n    //individual\r\n    if (inputs.strokeIndividual) {\r\n        inputs.strokeSwitch = true;\r\n    }\r\n    if (inputs.fillIndividual) {\r\n        inputs.fillSwitch = true;\r\n    }\r\n    //individual\r\n\r\n    return inputs;\r\n};\r\nexport default checkLoopSwitches;\r\n","import { rollRange } from '../../utilities.js';\r\n\r\nconst checkShapeSpacing = (inputs) => {\r\n    let newPath = inputs.pathRadius;\r\n    let improperSpacing = inputs.shapeSize - inputs.pathRadius;\r\n\r\n    while (improperSpacing >= -5 && improperSpacing <= 5) {\r\n        console.log('improperspacing while loop, changing pathRadius variable');\r\n\r\n        newPath = rollRange(inputs.minPathRadius, inputs.maxPathRadius);\r\n        improperSpacing = newPath - inputs.pathRadius;\r\n    }\r\n    inputs.pathRadius = newPath;\r\n    return inputs;\r\n};\r\n\r\nexport default checkShapeSpacing;\r\n","import { rollRange, lightColor, coinFlip } from '../../utilities.js';\r\nimport checkLoopSwitches from './_checkLoopSwitches.js';\r\n\r\nimport checkShapeSpacing from './_checkShapeSpacing.js';\r\n\r\nconst getFollowingLoopStats = (inputs) => {\r\n    //****************INSIDE OTHER ROLLS****************\r\n    //          things changing per loop\r\n    //****************INSIDE OTHER ROLLS****************\r\n\r\n    inputs.pathRadius = rollRange(inputs.minPathRadius, inputs.maxPathRadius);\r\n    inputs.shapeSize = inputs.maxShapeSize * inputs.percent;\r\n    inputs.shapeCount = rollRange(inputs.minShapeCount, inputs.maxShapeCount);\r\n    inputs = checkShapeSpacing(inputs);\r\n\r\n    //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ check clear fill stroke ~~~~~~~~~~~\r\n    inputs = checkLoopSwitches(inputs);\r\n    //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ check clear fill stroke ~~~~~~~~~~~\r\n    if (inputs.customBackgroundSwitch) {\r\n        inputs.fillColor = inputs.customBackgroundColor;\r\n        inputs.strokeColor = inputs.customStrokeColor;\r\n    }\r\n\r\n    return inputs;\r\n};\r\n\r\nexport default getFollowingLoopStats;\r\n","// import { ctx2 } from '../../MandalaDrawing.js';\r\n\r\nconst square = (inputs) => {\r\n\t// ctx.rect(x, y, width, height);\r\n\tinputs.ctx2.rect(\r\n\t\tinputs.shapeSize / 2,\r\n\t\tinputs.pathRadius,\r\n\t\t-inputs.shapeSize,\r\n\t\t-inputs.shapeSize\r\n\t);\r\n};\r\nconst diamond = (inputs) => {\r\n\tinputs.ctx2.save();\r\n\tinputs.ctx2.rotate(Math.PI / 4);\r\n\tinputs.ctx2.rect(\r\n\t\tinputs.pathRadius,\r\n\t\tinputs.pathRadius,\r\n\t\t-inputs.shapeSize,\r\n\t\t-inputs.shapeSize\r\n\t);\r\n\tinputs.ctx2.restore();\r\n};\r\n\r\nexport { square, diamond };\r\n","// import { ctx2 } from '../../MandalaDrawing.js';\r\n\r\nconst circle = (inputs) => {\r\n\tinputs.ctx2.arc(\r\n\t\t0,\r\n\t\tinputs.pathRadius,\r\n\t\tinputs.shapeSize,\r\n\t\t0,\r\n\t\t2 * Math.PI,\r\n\t\tfalse\r\n\t);\r\n};\r\n\r\nconst oval = (inputs) => {\r\n\t// ctx.ellipse(x, y, radiusX, radiusY, rotation, startAngle, endAngle [, anticlockwise]);\r\n\tinputs.ctx2.ellipse(\r\n\t\t0,\r\n\t\tinputs.pathRadius,\r\n\t\tinputs.shapeSize / 5,\r\n\t\tinputs.shapeSize,\r\n\t\t0,\r\n\t\t0,\r\n\t\t2 * Math.PI\r\n\t);\r\n};\r\n\r\nexport { circle, oval };\r\n","import { roll } from '../../utilities.js';\r\nimport { slant, starburst } from './draw/drawLine.js';\r\nimport { square, diamond } from './draw/drawSquare.js';\r\nimport { circle, oval } from './draw/drawEllipse.js';\r\n\r\nconst getShapeFunction = (customShape, forceNumber) => {\r\n\tconst diceRange = 3; // length of cases when ready\r\n\tlet dice;\r\n\t//forceNumber should increment, lets the invoke call the case\r\n\tif (forceNumber) {\r\n\t\twhile (forceNumber && forceNumber > diceRange) {\r\n\t\t\tforceNumber = forceNumber - diceRange;\r\n\t\t}\r\n\t\tdice = forceNumber;\r\n\t} else if (customShape) {\r\n\t\tswitch (customShape) {\r\n\t\t\tcase 'circle':\r\n\t\t\t\treturn circle;\r\n\t\t\tcase 'oval':\r\n\t\t\t\treturn oval;\r\n\t\t\tcase 'square':\r\n\t\t\t\treturn square;\r\n\t\t\tcase 'diamond':\r\n\t\t\t\treturn diamond;\r\n\t\t\tcase 'starburst':\r\n\t\t\t\treturn starburst;\r\n\t\t\tcase 'slant':\r\n\t\t\t\treturn slant;\r\n\t\t\tcase 'no-line':\r\n\t\t\t\tdice = roll(2);\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tconsole.log('default in customshape, get shapefunction');\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t} else {\r\n\t\tdice = roll(3);\r\n\t}\r\n\r\n\tswitch (dice) {\r\n\t\tcase 1: // draw ellipse\r\n\t\t\tconst ellipseDice = roll(2);\r\n\t\t\t// ellipseDice = 2;\r\n\t\t\tswitch (ellipseDice) {\r\n\t\t\t\tcase 1:\r\n\t\t\t\t\treturn circle;\r\n\t\t\t\tcase 2:\r\n\t\t\t\t\treturn oval;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tconsole.log('error in getShapeFunction ellipse');\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t// return drawCircle;\r\n\t\tcase 2: // draw square\r\n\t\t\tlet squareDice = roll(2);\r\n\t\t\tswitch (squareDice) {\r\n\t\t\t\tcase 1:\r\n\t\t\t\t\treturn square;\r\n\t\t\t\tcase 2:\r\n\t\t\t\t\treturn diamond;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tconsole.log('error in getShapeFunction square');\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\tcase 3: // draw line\r\n\t\t\tlet lineDice = roll(2);\r\n\t\t\tswitch (lineDice) {\r\n\t\t\t\tcase 1:\r\n\t\t\t\t\treturn starburst;\r\n\t\t\t\tcase 2:\r\n\t\t\t\t\treturn slant;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tconsole.log('error in getShapeFunction line');\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\tdefault:\r\n\t\t\tconsole.log('error in getShapeType');\r\n\t\t\treturn;\r\n\t}\r\n};\r\nexport default getShapeFunction;\r\n","import { roll } from '../../utilities.js';\r\nimport getShapeFunction from './_getShapeFunction.js';\r\n\r\nconst getShapeArr = (loopCount, customShape, forceNumber) => {\r\n\tlet shapeStyleDice;\r\n\r\n\tif (forceNumber) {\r\n\t\tif (forceNumber === 'random') shapeStyleDice = 1;\r\n\t\tif (forceNumber === 'same') shapeStyleDice = 2;\r\n\t\tif (forceNumber === 'increment') shapeStyleDice = 3;\r\n\t} else {\r\n\t\tshapeStyleDice = roll(3);\r\n\t}\r\n\tlet shapeArr = [];\r\n\tswitch (shapeStyleDice) {\r\n\t\tcase 1:\r\n\t\t\tfor (let loop = 0; loop < loopCount; loop++) {\r\n\t\t\t\tshapeArr.push(getShapeFunction(customShape));\r\n\t\t\t}\r\n\t\t\tbreak;\r\n\t\tcase 2:\r\n\t\t\tconst sameShape = getShapeFunction(customShape);\r\n\t\t\tfor (let loop = 0; loop < loopCount; loop++) {\r\n\t\t\t\tshapeArr.push(sameShape);\r\n\t\t\t}\r\n\t\t\tbreak;\r\n\t\tcase 3:\r\n\t\t\tfor (let loop = 0; loop < loopCount; loop++) {\r\n\t\t\t\tshapeArr.push(getShapeFunction(customShape, loop + 1));\r\n\t\t\t}\r\n\t\t\tbreak;\r\n\t\tdefault:\r\n\t\t\tconsole.log('error in getShapeArr');\r\n\t\t\tbreak;\r\n\t}\r\n\treturn shapeArr;\r\n};\r\n\r\nexport default getShapeArr;\r\n","import getColorType from './_getColorType.js';\r\n\r\nconst checkResetBackgroundSwitches = (inputs) => {\r\n    if (inputs.clearAll) {\r\n        inputs.clearSwitch = true;\r\n    } else {\r\n        inputs.clearSwitch = false;\r\n    }\r\n    if (inputs.fillAll) {\r\n        inputs.fillSwitch = true;\r\n\r\n        if (inputs.fillColorAll) {\r\n            inputs.fillColor = getColorType(inputs);\r\n        }\r\n    } else {\r\n        inputs.fillSwitch = false;\r\n    }\r\n    if (inputs.strokeAll) {\r\n        inputs.strokeSwitch = true;\r\n\r\n        if (inputs.strokeColorAll) {\r\n            inputs.strokeColor = getColorType(inputs);\r\n        }\r\n        if (inputs.strokeWidthAll) {\r\n            inputs.strokeWidth = 1;\r\n            //stroke all needs 1 because some loops may have high shape count\r\n        }\r\n    } else {\r\n        inputs.strokeSwitch = false;\r\n    }\r\n\r\n    return inputs;\r\n};\r\nexport default checkResetBackgroundSwitches;\r\n","import loop from './special/loop.js';\r\n// import getInputStats from './functionPool/_getInputStats.js';\r\nimport clearDrawingArea from './functionPool/draw/clearDrawingArea.js';\r\nimport getBackgroundLoopStats from './functionPool/_getBackgroundLoopStats.js';\r\n// import getInitLoopStats from '../functionPool/_getInitLoopStats.js';\r\nimport getFollowingLoopStats from './functionPool/_getFollowingLoopStats.js';\r\nimport getShapeArr from './functionPool/_getShapeArr.js';\r\n// import getDrawType from './functionPool/_getDrawType.js';\r\nimport checkBackgroundSwitches from './functionPool/_checkBackgroundSwitches.js';\r\n// import getBlendMode from './functionPool/_getBlendMode.js';\r\n\r\nconst initMandalaDraw = (inputStats) => {\r\n\t// clear canvas\r\n\tclearDrawingArea(inputStats);\r\n\t// clear canvas\r\n\t//|||||||||||||||||||||||||||||||||stats|||||||||||||||||||\r\n\t//init stats\r\n\r\n\t// let inputStats = getInputStats();\r\n\r\n\t//'strokeOnly','fillOnly','fillAndStroke','individual','chaos','outline'\r\n\t// inputStats = getBlendMode(inputStats);\r\n\t//overrides\r\n\t// inputStats = getDrawType(inputStats, 'outline');\r\n\t// inputStats = getDrawType(inputStats);\r\n\t//build arr\r\n\t// inputStats.shapeArr = getShapeArr(inputStats);\r\n\r\n\t//start looping\r\n\tfor (\r\n\t\tlet currentLoop = inputStats.loopCount;\r\n\t\tcurrentLoop > 0;\r\n\t\tcurrentLoop--\r\n\t) {\r\n\t\tinputStats.currentLoop = currentLoop;\r\n\t\tinputStats.percent = currentLoop / inputStats.loopCount;\r\n\t\tif (!inputStats.customShape) {\r\n\t\t\tinputStats.maxShapeCount = Math.ceil(\r\n\t\t\t\tinputStats.useHalfSize * inputStats.percent\r\n\t\t\t);\r\n\t\t}\r\n\t\tif (inputStats.backgroundLoopSwitch) {\r\n\t\t\tinputStats = getBackgroundLoopStats(inputStats);\r\n\t\t\t// } else if (inputStats.initLoopSwitch) {\r\n\t\t\t//     inputStats = getInitLoopStats(inputStats);\r\n\t\t} else {\r\n\t\t\tinputStats = getFollowingLoopStats(inputStats);\r\n\t\t}\r\n\t\t//call loop\r\n\t\t// console.log({ ...inputStats });\r\n\t\t// console.log(inputStats.pathRadius, inputStats.shapeSize);\r\n\t\t// debugger;\r\n\t\tinputStats = loop(inputStats);\r\n\t\t//reset loop stats\r\n\t\tif (inputStats.percent === 1) {\r\n\t\t\tinputStats = checkBackgroundSwitches(inputStats);\r\n\t\t}\r\n\t}\r\n};\r\n\r\nexport default initMandalaDraw;\r\n","// #################################### idea ######################################\r\n// stacking effect when you use rollRange(0, threshRadius50) for every pass\r\n\r\n// move this to edges for one of the effects being on the sides off center\r\n// ctx2.translate(halfWidth, halfHeight)\r\n\r\n// outer circle\r\n// ctx2.translate(halfWidth, halfHeight);\r\n// drawCircle(width, halfHeight);\r\n// drawCircle(halfWidth, height);\r\n//\r\n// top left is center inside begin path, bot right web outside of beginpath\r\n// ctx2.translate(0, 0);\r\n// drawCircle(width, height);\r\n// #################################### idea ######################################\r\n\r\nclass PointNode {\r\n\tconstructor(x, y) {\r\n\t\tthis.x = x;\r\n\t\tthis.y = y;\r\n\t}\r\n}\r\n\r\n// const randomStartingPoint = () => {\r\n// \tconst dice = roll(halfWidth);\r\n// \treturn new PointNode(dice, halfWidth);\r\n// };\r\n\r\nconst findHypotenuse = (width, height) => {\r\n\tconst hypotenuse = Math.sqrt(Math.pow(width, 2) + Math.pow(height, 2));\r\n\treturn Math.round(hypotenuse);\r\n};\r\n\r\n// const mandalaDraw = () => {\r\n// \t// const mandalaType = roll(5);\r\n// \tconst mandalaType = 1;\r\n// \tswitch (mandalaType) {\r\n// \t\tcase 1:\r\n// \t\t\tspecialShape();\r\n// \t\t\tbreak;\r\n// \t\tcase 2:\r\n// \t\t\toneShape();\r\n// \t\t\tbreak;\r\n// \t\tcase 3:\r\n// \t\t\tmultiShapes();\r\n// \t\t\tbreak;\r\n// \t\tdefault:\r\n// \t\t\tbreak;\r\n// \t}\r\n\r\n// };\r\n\r\nexport {\r\n\tPointNode,\r\n\t// mandalaDraw,\r\n\tfindHypotenuse,\r\n};\r\n","import { roll } from '../../utilities.js';\r\n\r\nconst getBlendMode = () => {\r\n\t// debugger;\r\n\t// const blends = ['source-over', 'screen', 'difference', 'multiply'];\r\n\t// if (inputs.blendMode && blends.includes(inputs.blendMode)) return;\r\n\r\n\tlet blend;\r\n\tconst dice = roll(3);\r\n\tswitch (dice) {\r\n\t\tcase 1:\r\n\t\t\tblend = 'difference';\r\n\t\t\tbreak;\r\n\t\tcase 2:\r\n\t\t\tblend = 'screen';\r\n\t\t\tbreak;\r\n\t\tcase 3:\r\n\t\t\tblend = 'multiply';\r\n\t\t\tbreak;\r\n\t\t// case 4:\r\n\t\t//     blend = 'source-over';\r\n\t\t//     break;\r\n\t\tdefault:\r\n\t\t\tconsole.log('error in getBlendMode');\r\n\t\t\tbreak;\r\n\t}\r\n\r\n\treturn blend;\r\n};\r\n\r\nexport default getBlendMode;\r\n","// import { roll, randomColor, lightColor } from '../../utilities.js';\r\n// import { halfWidth, halfHeight, height, width } from '../mandalaDrawing.js';\r\nimport { findHypotenuse } from '../mandalaDrawingUtilities.js';\r\nimport getBlendMode from './_getBlendMode.js';\r\nimport getShapeArr from './_getShapeArr.js';\r\n\r\nconst getInputStats = (mandalaDrawObj) => {\r\n\t//|||||||||||||||||||||||||||||||||stats|||||||||||||||||||\r\n\t// console.log(mandalaDrawObj);\r\n\tconst { canvasWidth, canvasHeight } = mandalaDrawObj;\r\n\tlet inputObj = {\r\n\t\twidth: canvasWidth || 500,\r\n\t\theight: canvasHeight || 500,\r\n\t\thalfWidth: Math.floor(canvasWidth / 2) || 250,\r\n\t\thalfHeight: Math.floor(canvasHeight / 2) || 250,\r\n\r\n\t\tloopCount: 5, //roll(5)\r\n\t\tcurrentLoop: null,\r\n\t\tpercent: null, // created in loop\r\n\r\n\t\tbackgroundLoopSwitch: true,\r\n\t\tinitLoopSwitch: false,\r\n\r\n\t\tcustomBackgroundSwitch: false,\r\n\t\tcustomBackgroundColor: null,\r\n\t\tcustomStrokeColor: null,\r\n\t\tcustomShape: null,\r\n\r\n\t\tclearSwitch: false,\r\n\t\tclearAll: false,\r\n\t\tclearRandomLoops: false,\r\n\t\tclearIndividual: false,\r\n\r\n\t\tdrawType: null,\r\n\r\n\t\tfillSwitch: false,\r\n\t\tfillAll: false,\r\n\t\tfillRandomLoops: false,\r\n\t\tfillIndividual: false,\r\n\t\tfillColor: null,\r\n\t\tfillColorAll: false,\r\n\t\tfillColorRandomLoops: false,\r\n\t\tfillColorIndividual: false,\r\n\r\n\t\tstrokeSwitch: false,\r\n\t\tstrokeAll: false,\r\n\t\tstrokeRandomLoops: false,\r\n\t\tstrokeIndividual: false,\r\n\t\tstrokeColor: null,\r\n\t\tstrokeColorAll: false,\r\n\t\tstrokeColorRandomLoops: false,\r\n\t\tstrokeColorIndividual: false,\r\n\t\tstrokeWidth: 1,\r\n\t\tstrokeWidthAll: false,\r\n\t\tstrokeWidthRandomLoops: false,\r\n\t\tstrokeWidthIndividual: false,\r\n\r\n\t\tuseSize: canvasWidth > canvasHeight ? canvasWidth : canvasHeight,\r\n\t\tuseHalfSize: null,\r\n\t\tmaxFullPath: findHypotenuse(canvasWidth, canvasHeight),\r\n\r\n\t\tpathRadius: null,\r\n\t\tminPathRadius: 20,\r\n\t\tmaxPathRadius: null,\r\n\t\tminShapeCount: 4,\r\n\t\tmaxShapeCount: 200,\r\n\t\tmaxShapeSize: 200,\r\n\r\n\t\tshapeCount: null, // default, randomize\r\n\t\tshapeSize: null, //default, shape size needs to be adjusted based on path\r\n\t\tshapeArr: null,\r\n\r\n\t\tblendMode: getBlendMode(), // have to find in loop\r\n\r\n\t\t...mandalaDrawObj, // override input stats\r\n\t};\r\n\tinputObj.useHalfSize = inputObj.useSize / 2;\r\n\tinputObj.maxPathRadius = findHypotenuse(\r\n\t\tinputObj.halfWidth,\r\n\t\tinputObj.halfHeight\r\n\t);\r\n\tinputObj.shapeArr = getShapeArr(inputObj.loopCount, inputObj.customShape);\r\n\r\n\t// console.log(inputObj.shapeArr);\r\n\t// debugger;\r\n\treturn inputObj;\r\n};\r\n\r\nexport default getInputStats;\r\n","import { createCanvasDraw } from '../utilities.js';\r\nimport initMandalaDraw from './initMandalaDraw.js';\r\nimport getInputStats from './functionPool/_getInputStats.js';\r\nimport getDrawType from './functionPool/_getDrawType.js';\r\n\r\nconst MandalaDrawing = (forceDesignObj) => {\r\n\tlet { dimensions, mandalaDrawObj } = forceDesignObj;\r\n\tlet width, height;\r\n\tif (dimensions) {\r\n\t\twidth = dimensions.width;\r\n\t\theight = dimensions.height;\r\n\t}\r\n\r\n\tconst canvasWidth = width ? width : 500;\r\n\tconst canvasHeight = height ? height : 500;\r\n\tconst [canvasDraw, ctx2] = createCanvasDraw(canvasWidth, canvasHeight);\r\n\r\n\tmandalaDrawObj = {\r\n\t\t...mandalaDrawObj,\r\n\t\tcanvasWidth,\r\n\t\tcanvasHeight,\r\n\t\tcanvasDraw,\r\n\t\tctx2,\r\n\t};\r\n\t//get and place stats\r\n\tlet inputStats = getInputStats(mandalaDrawObj);\r\n\t//build arr\r\n\tinputStats = getDrawType(inputStats);\r\n\r\n\tinitMandalaDraw(inputStats);\r\n\r\n\t//convert canvas to an image\r\n\t//return image\r\n\t// return ctx2;\r\n\tconst dataURL = mandalaDrawObj.canvasDraw.toDataURL('image/png');\r\n\treturn dataURL;\r\n};\r\n\r\nexport { MandalaDrawing };\r\n","import RandomDrawing from './randomDrawing.js';\r\nimport { BoxDrawing } from './boxDrawing/BoxDrawing.js';\r\nimport { MandalaDrawing } from './mandalaDrawing/MandalaDrawing.js';\r\n\r\nconst randomInterface = {\r\n    RandomDrawing,\r\n    BoxDrawing,\r\n    MandalaDrawing,\r\n};\r\n\r\nexport default randomInterface;\r\n","import { roll } from './utilities.js';\r\nimport { BoxDrawing } from './boxDrawing/BoxDrawing.js';\r\nimport { MandalaDrawing } from './mandalaDrawing/MandalaDrawing.js';\r\n\r\nconst RandomDrawing = (forceDesignObj) => {\r\n\tconst dice = roll(2);\r\n\tlet returnRandomDrawing;\r\n\tswitch (dice) {\r\n\t\tcase 1:\r\n\t\t\treturnRandomDrawing = BoxDrawing;\r\n\t\t\tbreak;\r\n\t\tcase 2:\r\n\t\t\treturnRandomDrawing = MandalaDrawing;\r\n\t\t\tbreak;\r\n\t\tdefault:\r\n\t\t\tconsole.log('error in randomDraw random dice');\r\n\t\t\tbreak;\r\n\t}\r\n\treturn returnRandomDrawing(forceDesignObj);\r\n};\r\n\r\nexport default RandomDrawing;\r\n","import randomInterface from './codeBank/randomInterface.js';\r\n\r\nconst BoxDrawing = randomInterface.BoxDrawing;\r\nconst MandalaDrawing = randomInterface.MandalaDrawing;\r\nconst RandomDrawing = randomInterface.RandomDrawing;\r\n\r\nlet sequence = [];\r\n\r\nconst getSequence = (length) => {\r\n\tif (sequence.length > length) {\r\n\t\tsequence.shift();\r\n\t}\r\n\tconst image = sequence[sequence.length - 1];\r\n\tconsole.log(image);\r\n\treturn image;\r\n};\r\n\r\nconst randomDraw = (forceDesignObj = {}) => {\r\n\tconst { typeOfDrawer } = forceDesignObj;\r\n\tif (!forceDesignObj.boxDrawObj) {\r\n\t\tforceDesignObj.boxDrawObj = {};\r\n\t}\r\n\tif (!forceDesignObj.mandalaDrawObj) {\r\n\t\tforceDesignObj.mandalaDrawObj = {};\r\n\t}\r\n\tswitch (typeOfDrawer) {\r\n\t\tcase 'boxDraw':\r\n\t\t\tconst box = BoxDrawing(forceDesignObj);\r\n\t\t\tsequence.push(box);\r\n\t\t\treturn;\r\n\t\tcase 'mandalaDraw':\r\n\t\t\tconst mandala = MandalaDrawing(forceDesignObj);\r\n\t\t\tsequence.push(mandala);\r\n\t\t\treturn;\r\n\t\tdefault:\r\n\t\t\tconst random = RandomDrawing(forceDesignObj);\r\n\t\t\tsequence.push(random);\r\n\t\t\treturn;\r\n\t}\r\n};\r\n\r\nexport { randomDraw, getSequence };\r\n","import React, { useState, useEffect } from 'react';\nimport Nav from './components/Nav';\nimport CodeInjector from './components/CodeInjector';\nimport Controls from './components/Controls';\nimport MainDisplay from './components/MainDisplay';\n\nimport { randomDraw } from './randomDraw.js';\nimport { cloneObj, resetDefaults } from './functions/functions.js';\n\nfunction App() {\n\t// let forceDesignObj = {\n\t// \t\ttypeOfDrawer: 'random',\n\t// \t\t\tdimensions: {\n\t// \t\t\t\twidth: null,\n\t// \t\t\t\theight: null,\n\t// \t\t\t},\n\t// \t\ttestStr: '',\n\t// \t\tboxDrawObj: {},\n\t// \t\tmandalaDrawObj: {},\n\t// };\n\t// let forceDesignObj = {};\n\tconst [designState, setDesignState] = useState({});\n\n\tuseEffect(() => {\n\t\t//reset defaults\n\t\tresetDefaults(\n\t\t\tdesignState,\n\t\t\tadjustState,\n\t\t\tadjustDimensions,\n\t\t\tadjustBoxState,\n\t\t\tadjustMandalaState\n\t\t);\n\n\t\t//clone state\n\t\tconst inputObj = cloneObj(designState);\n\t\t//draw\n\t\trandomDraw(inputObj);\n\t}, [designState]);\n\n\tconst adjustState = (obj) => {\n\t\tsetDesignState({\n\t\t\t...designState,\n\t\t\t...obj,\n\t\t});\n\t};\n\n\tconst adjustDimensions = (obj) => {\n\t\tsetDesignState({\n\t\t\t...designState,\n\t\t\tdimensions: {\n\t\t\t\t...designState.dimensions,\n\t\t\t\t...obj,\n\t\t\t},\n\t\t});\n\t};\n\tconst adjustBoxState = (obj) => {\n\t\tsetDesignState({\n\t\t\t...designState,\n\t\t\tboxDrawObj: {\n\t\t\t\t...designState.boxDrawObj,\n\t\t\t\t...obj,\n\t\t\t},\n\t\t});\n\t};\n\tconst adjustMandalaState = (obj) => {\n\t\tsetDesignState({\n\t\t\t...designState,\n\t\t\tmandalaDrawObj: {\n\t\t\t\t...designState.mandalaDrawObj,\n\t\t\t\t...obj,\n\t\t\t},\n\t\t});\n\t};\n\n\tconst draw = () => {\n\t\trandomDraw(designState);\n\t};\n\n\treturn (\n\t\t<div className='App'>\n\t\t\t<Nav />\n\t\t\t<CodeInjector state={designState} />\n\t\t\t<main>\n\t\t\t\t<Controls\n\t\t\t\t\tdraw={draw}\n\t\t\t\t\tstate={designState}\n\t\t\t\t\tadjustState={adjustState}\n\t\t\t\t\tadjustDimensions={adjustDimensions}\n\t\t\t\t\tadjustBoxState={adjustBoxState}\n\t\t\t\t\tadjustMandalaState={adjustMandalaState}\n\t\t\t\t/>\n\t\t\t\t<MainDisplay />\n\t\t\t</main>\n\t\t</div>\n\t);\n}\n\nexport default App;\n\n//maybe add fractals\n//maybe add pixel trails\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './scss/main.scss';\nimport App from './App';\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\n"],"sourceRoot":""}